// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: afXULSfGYmou2jFpEc2QWJ
// Component: XSAvgKpp1Uaz

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import Select from "../../Select"; // plasmic-import: 7wkEfmUYAcMf/component
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariants_7Bs7RtJcMv9T } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 7BS7RtJcMv9t/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: afXULSfGYmou2jFpEc2QWJ/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: XSAvgKpp1Uaz/css

import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: sdf49AtFp7I6/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: 7-KwYGGksEHB/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: eeiQdsLura6L/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  h1?: Flex__<"h1">;
  btnDashboard3?: Flex__<"div">;
  lblUser?: Flex__<"div">;
  btnLogout?: Flex__<"a"> & Partial<LinkProps>;
  btnLogin?: Flex__<typeof Button>;
  section?: Flex__<"section">;
  gridCalculator2?: Flex__<"div">;
  cbProductlist?: Flex__<typeof Select>;
  txtRemainingText?: Flex__<"div">;
  txtRemainingValue?: Flex__<"div">;
  btnPay?: Flex__<typeof Button>;
  gridInvoice1?: Flex__<"div">;
  gridInvoice12?: Flex__<"div">;
  btnInvoiceInfo?: Flex__<typeof Button>;
  sideEffectPageLoad?: Flex__<typeof SideEffect>;
  waitingIcon?: Flex__<"svg">;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "user",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "txtUserName",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "btnLoginShow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "btnLogoutShow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "cbProductlist.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "productList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            productid: 0,
            name: "\u0644\u0637\u0641\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u0646\u0645\u0627\u06cc\u06cc\u062f"
          }
        ]
      },
      {
        path: "userid",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "hkk"
      },
      {
        path: "txtTest2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "waiting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "btnPayShow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "txtReminderTextValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "\u0645\u0627\u0646\u062f\u0647 \u0628\u062f\u0647\u06cc: "
      },
      {
        path: "txtReminderValue",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants_7Bs7RtJcMv9T()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicHomepage.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicHomepage.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicHomepage.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicHomepage.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicHomepage.pageMetadata.ogImageSrc}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {(() => {
          try {
            return true;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_fragment_design_system_css.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens,
              sty.root
            )}
            dir={"rtl"}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__wgrRs)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__wtNpu)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox__blxXq)}
                />

                <div className={classNames(projectcss.all, sty.freeBox__jdBO)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__prqZr)}
                  >
                    <Icon11Icon
                      className={classNames(projectcss.all, sty.svg__qkRgv)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToHttpspaziresh24Com"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: "https://paziresh24.com"
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToHttpspaziresh24Com"] != null &&
                          typeof $steps["goToHttpspaziresh24Com"] ===
                            "object" &&
                          typeof $steps["goToHttpspaziresh24Com"].then ===
                            "function"
                        ) {
                          $steps["goToHttpspaziresh24Com"] = await $steps[
                            "goToHttpspaziresh24Com"
                          ];
                        }
                      }}
                      role={"img"}
                    />

                    <h1
                      data-plasmic-name={"h1"}
                      data-plasmic-override={overrides.h1}
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1
                      )}
                    >
                      {
                        "\u0686\u0631\u062a\u06a9\u0647\u060c \u0645\u062f\u06cc\u0631\u06cc\u062a \u0627\u0645\u0648\u0631 \u0645\u0627\u0644\u06cc"
                      }
                    </h1>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__mvNga)}>
                  <div
                    data-plasmic-name={"btnDashboard3"}
                    data-plasmic-override={overrides.btnDashboard3}
                    className={classNames(projectcss.all, sty.btnDashboard3)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  return document
                                    .querySelector(".grid_calculator")
                                    .scrollIntoView({ behavior: "smooth" });
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }}
                  >
                    <Icon6Icon
                      className={classNames(projectcss.all, sty.svg__b78Sc)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qa7Wf
                      )}
                    >
                      {
                        "\u0645\u0627\u0634\u06cc\u0646 \u062d\u0633\u0627\u0628"
                      }
                    </div>
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___4OQlX)}
                >
                  <div
                    data-plasmic-name={"lblUser"}
                    data-plasmic-override={overrides.lblUser}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.lblUser
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.txtUserName;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "\u062d\u062c\u062a \u062e\u0648\u0627\u062c\u0648\u06cc";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  {(() => {
                    try {
                      return $state.btnLogoutShow;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <PlasmicLink__
                      data-plasmic-name={"btnLogout"}
                      data-plasmic-override={overrides.btnLogout}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.btnLogout
                      )}
                      component={Link}
                      href={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? ""
                          : undefined
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps[
                          "goToHttpspaziresh24Comlogouturlhttpschortkepaziresh24Com"
                        ] = true
                          ? (() => {
                              const actionArgs = {
                                destination:
                                  "https://paziresh24.com/logout?url=https://chortke.paziresh24.com"
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps[
                            "goToHttpspaziresh24Comlogouturlhttpschortkepaziresh24Com"
                          ] != null &&
                          typeof $steps[
                            "goToHttpspaziresh24Comlogouturlhttpschortkepaziresh24Com"
                          ] === "object" &&
                          typeof $steps[
                            "goToHttpspaziresh24Comlogouturlhttpschortkepaziresh24Com"
                          ].then === "function"
                        ) {
                          $steps[
                            "goToHttpspaziresh24Comlogouturlhttpschortkepaziresh24Com"
                          ] = await $steps[
                            "goToHttpspaziresh24Comlogouturlhttpschortkepaziresh24Com"
                          ];
                        }
                      }}
                      platform={"nextjs"}
                    >
                      {"\u062e\u0631\u0648\u062c"}
                    </PlasmicLink__>
                  ) : null}
                  {(() => {
                    try {
                      return $state.btnLoginShow;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Button
                      data-plasmic-name={"btnLogin"}
                      data-plasmic-override={overrides.btnLogin}
                      children2={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__he0G
                          )}
                        >
                          {"\u0648\u0631\u0648\u062f"}
                        </div>
                      }
                      className={classNames("__wab_instance", sty.btnLogin)}
                      link={
                        "https://www.paziresh24.com/login/?redirect_url=https://chortke.paziresh24.com/"
                      }
                      outline={true}
                    />
                  ) : null}
                </div>
              </div>
            </Stack__>
            <section
              data-plasmic-name={"section"}
              data-plasmic-override={overrides.section}
              className={classNames(projectcss.all, sty.section)}
              dir={"rtl"}
            >
              <div
                data-plasmic-name={"gridCalculator2"}
                data-plasmic-override={overrides.gridCalculator2}
                className={classNames(projectcss.all, sty.gridCalculator2)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__dZfo,
                    "grid_calculator"
                  )}
                  id={"grid_calculator"}
                >
                  <Select
                    data-plasmic-name={"cbProductlist"}
                    data-plasmic-override={overrides.cbProductlist}
                    aria-label={"name"}
                    aria-labelledby={"productid"}
                    className={classNames("__wab_instance", sty.cbProductlist)}
                    name={"productlist"}
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "cbProductlist",
                          "value"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);
                      (async value => {
                        const $steps = {};

                        $steps["showWaiting"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["waiting"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["showWaiting"] != null &&
                          typeof $steps["showWaiting"] === "object" &&
                          typeof $steps["showWaiting"].then === "function"
                        ) {
                          $steps["showWaiting"] = await $steps["showWaiting"];
                        }

                        $steps["getProductWallet"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  undefined,
                                  (() => {
                                    try {
                                      return (
                                        "https://apigw.paziresh24.com/transaction/v1/productwallet?productid=" +
                                        $state.cbProductlist.value
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["getProductWallet"] != null &&
                          typeof $steps["getProductWallet"] === "object" &&
                          typeof $steps["getProductWallet"].then === "function"
                        ) {
                          $steps["getProductWallet"] = await $steps[
                            "getProductWallet"
                          ];
                        }

                        $steps["runCode"] =
                          ($steps.getProductWallet.data.status = true)
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return ($state.btnPayShow = !(
                                      $steps.getProductWallet.data.data
                                        .balance > 0
                                    ));
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }

                        $steps["txtRemainingText"] =
                          ($steps.getProductWallet.data.status = true)
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return $steps.getProductWallet.data.data
                                      .balance >= 0
                                      ? ($state.txtReminderTextValue =
                                          "موجودی حساب: ")
                                      : ($state.txtReminderTextValue =
                                          "بدهی شما: ");
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["txtRemainingText"] != null &&
                          typeof $steps["txtRemainingText"] === "object" &&
                          typeof $steps["txtRemainingText"].then === "function"
                        ) {
                          $steps["txtRemainingText"] = await $steps[
                            "txtRemainingText"
                          ];
                        }

                        $steps["txtReminderValue"] =
                          ($steps.getProductWallet.data.status = true)
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      return ($state.txtReminderValue =
                                        new Intl.NumberFormat("fa-IR").format(
                                          $steps.getProductWallet.data.data
                                            .balance
                                        ));
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["txtReminderValue"] != null &&
                          typeof $steps["txtReminderValue"] === "object" &&
                          typeof $steps["txtReminderValue"].then === "function"
                        ) {
                          $steps["txtReminderValue"] = await $steps[
                            "txtReminderValue"
                          ];
                        }

                        $steps["hideWaiting"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["waiting"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["hideWaiting"] != null &&
                          typeof $steps["hideWaiting"] === "object" &&
                          typeof $steps["hideWaiting"].then === "function"
                        ) {
                          $steps["hideWaiting"] = await $steps["hideWaiting"];
                        }
                      }).apply(null, eventArgs);
                    }}
                    options={(() => {
                      try {
                        return $state.productList.map(item => ({
                          value: item.productid.toString(),
                          label: item.name
                        }));
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    placeholder={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lX8IZ
                        )}
                      >
                        {
                          "\u0628\u062e\u0634 \u0645\u0648\u0631\u062f \u0646\u0638\u0631 \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u0646\u0645\u0627\u06cc\u06cc\u062f"
                        }
                      </div>
                    }
                    value={generateStateValueProp($state, [
                      "cbProductlist",
                      "value"
                    ])}
                  />
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__uFbdt,
                    "grid_calculator"
                  )}
                  id={"grid_calculator"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__aiGt,
                    "grid_calculator"
                  )}
                  id={"grid_calculator"}
                >
                  <div
                    data-plasmic-name={"txtRemainingText"}
                    data-plasmic-override={overrides.txtRemainingText}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.txtRemainingText
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.txtReminderTextValue;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "\u0645\u0627\u0646\u062f\u0647 \u0628\u062f\u0647\u06cc:";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <div
                    data-plasmic-name={"txtRemainingValue"}
                    data-plasmic-override={overrides.txtRemainingValue}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.txtRemainingValue
                    )}
                  >
                    {"0"}
                  </div>
                  {(() => {
                    try {
                      return $state.btnPayShow;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Button
                      data-plasmic-name={"btnPay"}
                      data-plasmic-override={overrides.btnPay}
                      children2={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___6C57K
                          )}
                        >
                          {"\u067e\u0631\u062f\u0627\u062e\u062a"}
                        </div>
                      }
                      className={classNames("__wab_instance", sty.btnPay)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["userProduct"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  undefined,
                                  "https://apigw.paziresh24.com/transaction/v1/userproduct"
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["userProduct"] != null &&
                          typeof $steps["userProduct"] === "object" &&
                          typeof $steps["userProduct"].then === "function"
                        ) {
                          $steps["userProduct"] = await $steps["userProduct"];
                        }
                      }}
                    />
                  ) : null}
                </div>
              </div>
              <div
                data-plasmic-name={"gridInvoice1"}
                data-plasmic-override={overrides.gridInvoice1}
                className={classNames(projectcss.all, sty.gridInvoice1)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__nwsmg,
                    "grid_calculator"
                  )}
                  id={"grid_calculator"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ecZ3V
                    )}
                  >
                    {"\u0631\u062f\u06cc\u0641"}
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox___2NkoK,
                    "grid_calculator"
                  )}
                  id={"grid_calculator"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__spZ98
                    )}
                  >
                    {"\u062a\u0627\u0631\u06cc\u062e"}
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__e7Ml0,
                    "grid_calculator"
                  )}
                  id={"grid_calculator"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gmjpK
                    )}
                  >
                    {"\u0639\u0646\u0648\u0627\u0646"}
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__piKZ,
                    "grid_calculator"
                  )}
                  id={"grid_calculator"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cj3GE
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "\u0642\u06cc\u0645\u062a "
                      : "\u0642\u06cc\u0645\u062a (\u0631\u06cc\u0627\u0644)"}
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__ydgyO,
                    "grid_calculator"
                  )}
                  id={"grid_calculator"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hbBO
                    )}
                  >
                    {"\u062c\u0632\u0626\u06cc\u0627\u062a"}
                  </div>
                </div>
              </div>
              <div
                data-plasmic-name={"gridInvoice12"}
                data-plasmic-override={overrides.gridInvoice12}
                className={classNames(projectcss.all, sty.gridInvoice12)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox___7L5Fd,
                    "grid_calculator"
                  )}
                  id={"grid_calculator"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__b9TAi
                    )}
                  >
                    {"1"}
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__yy3L,
                    "grid_calculator"
                  )}
                  id={"grid_calculator"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__k5RNe
                    )}
                  >
                    {"1403/05/01"}
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox___5KBuV,
                    "grid_calculator"
                  )}
                  id={"grid_calculator"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mS8Qi
                    )}
                  >
                    {
                      "\u0635\u0648\u0631\u062a \u062d\u0633\u0627\u0628 \u0647\u0632\u06cc\u0646\u0647 \u0646\u0648\u0628\u062a \u062f\u0647\u06cc \u062a\u06cc\u0631 \u0645\u0627\u0647 1403"
                    }
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__kPny5,
                    "grid_calculator"
                  )}
                  id={"grid_calculator"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___07T8
                    )}
                  >
                    {"25.300.000"}
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__wy9LE,
                    "grid_calculator"
                  )}
                  id={"grid_calculator"}
                >
                  <Button
                    data-plasmic-name={"btnInvoiceInfo"}
                    data-plasmic-override={overrides.btnInvoiceInfo}
                    children2={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zgEzb
                        )}
                      >
                        {"\u062c\u0632\u0626\u06cc\u0627\u062a"}
                      </div>
                    }
                    className={classNames("__wab_instance", sty.btnInvoiceInfo)}
                    color={"green"}
                  />
                </div>
              </div>
            </section>
            <SideEffect
              data-plasmic-name={"sideEffectPageLoad"}
              data-plasmic-override={overrides.sideEffectPageLoad}
              className={classNames("__wab_instance", sty.sideEffectPageLoad)}
              onMount={async () => {
                const $steps = {};

                $steps["showWaiting"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["waiting"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["showWaiting"] != null &&
                  typeof $steps["showWaiting"] === "object" &&
                  typeof $steps["showWaiting"].then === "function"
                ) {
                  $steps["showWaiting"] = await $steps["showWaiting"];
                }

                $steps["checkUser"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          undefined,
                          "https://apigw.paziresh24.com/v1/auth/me"
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["checkUser"] != null &&
                  typeof $steps["checkUser"] === "object" &&
                  typeof $steps["checkUser"].then === "function"
                ) {
                  $steps["checkUser"] = await $steps["checkUser"];
                }

                $steps["updateUser"] =
                  $steps.checkUser.status == 200
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["user"]
                          },
                          operation: 0,
                          value: $steps.checkUser.data.users[0]
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["updateUser"] != null &&
                  typeof $steps["updateUser"] === "object" &&
                  typeof $steps["updateUser"].then === "function"
                ) {
                  $steps["updateUser"] = await $steps["updateUser"];
                }

                $steps["setFnameLname"] =
                  $steps.checkUser.status == 200
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["txtUserName"]
                          },
                          operation: 0,
                          value: $state.user.name + " " + $state.user.family
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["setFnameLname"] != null &&
                  typeof $steps["setFnameLname"] === "object" &&
                  typeof $steps["setFnameLname"].then === "function"
                ) {
                  $steps["setFnameLname"] = await $steps["setFnameLname"];
                }

                $steps["btnLogout"] =
                  $steps.checkUser.status == 200
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["btnLogoutShow"]
                          },
                          operation: 0,
                          value: true
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["btnLogout"] != null &&
                  typeof $steps["btnLogout"] === "object" &&
                  typeof $steps["btnLogout"].then === "function"
                ) {
                  $steps["btnLogout"] = await $steps["btnLogout"];
                }

                $steps["getProductList"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          undefined,
                          (() => {
                            try {
                              return "https://apigw.paziresh24.com/transaction/v1/userproductlist";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["getProductList"] != null &&
                  typeof $steps["getProductList"] === "object" &&
                  typeof $steps["getProductList"].then === "function"
                ) {
                  $steps["getProductList"] = await $steps["getProductList"];
                }

                $steps["setProductListVariable"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["productList"]
                        },
                        operation: 0,
                        value: $steps.getProductList.data.data
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["setProductListVariable"] != null &&
                  typeof $steps["setProductListVariable"] === "object" &&
                  typeof $steps["setProductListVariable"].then === "function"
                ) {
                  $steps["setProductListVariable"] = await $steps[
                    "setProductListVariable"
                  ];
                }

                $steps["hideWaiting"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["waiting"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["hideWaiting"] != null &&
                  typeof $steps["hideWaiting"] === "object" &&
                  typeof $steps["hideWaiting"].then === "function"
                ) {
                  $steps["hideWaiting"] = await $steps["hideWaiting"];
                }
              }}
            />

            {(() => {
              try {
                return $state.waiting;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Icon2Icon
                data-plasmic-name={"waitingIcon"}
                data-plasmic-override={overrides.waitingIcon}
                className={classNames(projectcss.all, sty.waitingIcon)}
                role={"img"}
              />
            ) : null}
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "h1",
    "btnDashboard3",
    "lblUser",
    "btnLogout",
    "btnLogin",
    "section",
    "gridCalculator2",
    "cbProductlist",
    "txtRemainingText",
    "txtRemainingValue",
    "btnPay",
    "gridInvoice1",
    "gridInvoice12",
    "btnInvoiceInfo",
    "sideEffectPageLoad",
    "waitingIcon"
  ],
  h1: ["h1"],
  btnDashboard3: ["btnDashboard3"],
  lblUser: ["lblUser"],
  btnLogout: ["btnLogout"],
  btnLogin: ["btnLogin"],
  section: [
    "section",
    "gridCalculator2",
    "cbProductlist",
    "txtRemainingText",
    "txtRemainingValue",
    "btnPay",
    "gridInvoice1",
    "gridInvoice12",
    "btnInvoiceInfo"
  ],
  gridCalculator2: [
    "gridCalculator2",
    "cbProductlist",
    "txtRemainingText",
    "txtRemainingValue",
    "btnPay"
  ],
  cbProductlist: ["cbProductlist"],
  txtRemainingText: ["txtRemainingText"],
  txtRemainingValue: ["txtRemainingValue"],
  btnPay: ["btnPay"],
  gridInvoice1: ["gridInvoice1"],
  gridInvoice12: ["gridInvoice12", "btnInvoiceInfo"],
  btnInvoiceInfo: ["btnInvoiceInfo"],
  sideEffectPageLoad: ["sideEffectPageLoad"],
  waitingIcon: ["waitingIcon"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h1: "h1";
  btnDashboard3: "div";
  lblUser: "div";
  btnLogout: "a";
  btnLogin: typeof Button;
  section: "section";
  gridCalculator2: "div";
  cbProductlist: typeof Select;
  txtRemainingText: "div";
  txtRemainingValue: "div";
  btnPay: typeof Button;
  gridInvoice1: "div";
  gridInvoice12: "div";
  btnInvoiceInfo: typeof Button;
  sideEffectPageLoad: typeof SideEffect;
  waitingIcon: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    btnDashboard3: makeNodeComponent("btnDashboard3"),
    lblUser: makeNodeComponent("lblUser"),
    btnLogout: makeNodeComponent("btnLogout"),
    btnLogin: makeNodeComponent("btnLogin"),
    section: makeNodeComponent("section"),
    gridCalculator2: makeNodeComponent("gridCalculator2"),
    cbProductlist: makeNodeComponent("cbProductlist"),
    txtRemainingText: makeNodeComponent("txtRemainingText"),
    txtRemainingValue: makeNodeComponent("txtRemainingValue"),
    btnPay: makeNodeComponent("btnPay"),
    gridInvoice1: makeNodeComponent("gridInvoice1"),
    gridInvoice12: makeNodeComponent("gridInvoice12"),
    btnInvoiceInfo: makeNodeComponent("btnInvoiceInfo"),
    sideEffectPageLoad: makeNodeComponent("sideEffectPageLoad"),
    waitingIcon: makeNodeComponent("waitingIcon"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "چرتکه، مدیریت امور مالی",
      description: "ماژول ها وشیوه قیمت گذاری محصولات پذیرش24",
      ogImageSrc:
        "https://site-assets.plasmic.app/49b5e4e62d4fd1407285906a0f5e6382.svg",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
