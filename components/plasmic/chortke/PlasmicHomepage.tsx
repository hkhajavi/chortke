// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: afXULSfGYmou2jFpEc2QWJ
// Component: XSAvgKpp1Uaz

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: 0wu_ZE1f8SuT/component
import Select from "../../Select"; // plasmic-import: 7wkEfmUYAcMf/component
import Dialog from "../../Dialog"; // plasmic-import: nYtkLnbqtkXY/component
import TextInput from "../../TextInput"; // plasmic-import: SePhlRlvEn3n/component
import Button2 from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import Dialog2 from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component
import { TabContent } from "@plasmicpkgs/plasmic-tabs";
import { AntdRadioGroup } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: hVBOtSJvmbc4/codeComponent
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsbr2UhI7UlpvR } from "../fragment_icons/PlasmicGlobalVariant__Screen"; // plasmic-import: BR2UhI7ulpvR/globalVariant
import { useScreenVariants as useScreenVariants_7Bs7RtJcMv9T } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 7BS7RtJcMv9t/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: afXULSfGYmou2jFpEc2QWJ/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: XSAvgKpp1Uaz/css

import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: sdf49AtFp7I6/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: 7-KwYGGksEHB/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: eeiQdsLura6L/icon
import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: fjupp6w2fUeo/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: VZ6Vl-sB0jLM/icon
import Icon29Icon from "../katibe/icons/PlasmicIcon__Icon29"; // plasmic-import: v6n1zIPv27O2/icon
import Icon30Icon from "../katibe/icons/PlasmicIcon__Icon30"; // plasmic-import: b5udc-7LsSfj/icon

createPlasmicElementProxy;

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: Flex__<"div">;
  h1?: Flex__<"h1">;
  btnDashboard3?: Flex__<"div">;
  lblUser?: Flex__<"div">;
  btnLogout?: Flex__<"a"> & Partial<LinkProps>;
  btnLogin?: Flex__<typeof Button>;
  section?: Flex__<"section">;
  cbAccounts?: Flex__<typeof Select>;
  gridCalculator2?: Flex__<"div">;
  cbProductlist?: Flex__<typeof Select>;
  txtRemainingText?: Flex__<"div">;
  txtRemainingValue?: Flex__<"div">;
  dialogIncreaseRemaining?: Flex__<typeof Dialog>;
  btnPay?: Flex__<typeof Button>;
  gridSelectprice?: Flex__<"div">;
  btnSelectAmount?: Flex__<typeof Button>;
  gridMyAmount?: Flex__<"div">;
  txtNewPaymentAmount?: Flex__<typeof TextInput>;
  btnSettlement?: Flex__<typeof Button2>;
  dialogSettlement?: Flex__<typeof Dialog2>;
  tabContent?: Flex__<typeof TabContent>;
  txtSettlemenAmount?: Flex__<typeof TextInput>;
  dialogRegisterAccount?: Flex__<typeof Dialog2>;
  txtCardId?: Flex__<typeof TextInput>;
  txtCardOwner?: Flex__<typeof TextInput>;
  txtCardIban?: Flex__<typeof TextInput>;
  txtCardBankName?: Flex__<typeof TextInput>;
  radioAccounts?: Flex__<typeof AntdRadioGroup>;
  span?: Flex__<"span">;
  txtSettlementResult?: Flex__<"div">;
  gridInvoice1?: Flex__<"div">;
  gridNoData?: Flex__<"div">;
  gridInvoice12?: Flex__<"div">;
  dialogNewInvoiceDetails?: Flex__<typeof Dialog>;
  btnInvoiceInfo?: Flex__<typeof Button>;
  detailsDataApiRequest?: Flex__<typeof ApiRequest>;
  waitingIcon3?: Flex__<"svg">;
  gridNoData2?: Flex__<"div">;
  sideEffectPageLoad?: Flex__<typeof SideEffect>;
  sideEffectRefresh?: Flex__<typeof SideEffect>;
};

export interface DefaultHomepageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "user",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "txtUserName",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "btnLoginShow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "btnLogoutShow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "cbProductlist.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return $state.productList[0].productid;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "0";
              }
              throw e;
            }
          })()
      },
      {
        path: "productList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            productid: 0,
            name: "\u0644\u0637\u0641\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u0646\u0645\u0627\u06cc\u06cc\u062f"
          }
        ]
      },
      {
        path: "userid",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "hkk"
      },
      {
        path: "txtTest2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "waiting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "btnPayShow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "txtReminderTextValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "txtReminderValue",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "invoicelist",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "invoiceDetials",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          status: true,
          message:
            "\u062c\u0632\u0626\u06cc\u0627\u062a \u0635\u0648\u0631\u062a \u062d\u0633\u0627\u0628",
          data: {
            invoiceid: 197,
            userid: "15594550",
            status: "registered",
            type: "purchase",
            discountpercent: 0,
            vatpercent: 0,
            title:
              "\u067e\u0631\u062f\u0627\u062e\u062a \u0628\u0627\u0628\u062a \u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0645\u0634\u0627\u0648\u0631\u0647 \u0622\u0646\u0644\u0627\u06cc\u0646",
            description:
              "\u062f\u0631\u06af\u0627\u0647 \u067e\u0631\u062f\u0627\u062e\u062a \u0633\u0627\u0645\u0627\u0646",
            sumprice: 15000,
            discountprice: 0,
            vatprice: 0,
            finalprice: 15000,
            registerdate: "2024-07-28",
            services: [
              {
                service:
                  "\u062f\u0631\u06af\u0627\u0647 \u067e\u0631\u062f\u0627\u062e\u062a \u0633\u0627\u0645\u0627\u0646",
                count: 1,
                price: "15000"
              }
            ],
            meta: {
              ResNum: "e40a83d2-d5f6-4c52-83ab-fdde1bdad009",
              samantoken: "8fc9e787e0c548e58e4896c17d0aa475",
              returnlink: "https://paziresh24.com/"
            }
          }
        })
      },
      {
        path: "isDialogOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "invoiceHasOnlinePayment",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "waitingInvoiceDetails",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "increaseButtonList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          2000000, 3500000, 5000000
        ]
      },
      {
        path: "waitingPayment",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "paymentAmount",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "txtNewPaymentAmount.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "showMyAmount",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "isShowPaymentButton",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "reminderWallet",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "increaseButtonListBase",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          2000000, 3500000, 5000000
        ]
      },
      {
        path: "showSelectPriceGrid",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "dialogIncreaseRemaining.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobileOnly") ? false : false
      },
      {
        path: "showCbCenters",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "centersList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "currentCenterid",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "0"
      },
      {
        path: "txtPaymentText",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "\u0627\u0641\u0632\u0627\u06cc\u0634 \u0645\u0648\u062c\u0648\u062f\u06cc"
      },
      {
        path: "limit",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 20
      },
      {
        path: "offset",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "waitingLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "showMoreBtn",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "dialogSettlement.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "isSettlementShow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "txtSettlemenAmount.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "bankAccountList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "dialogRegisterAccount.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "txtCardId.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "cardInquiry",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "txtCardOwner.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.cardInquiry.deposit_owners[0];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "txtCardIban.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.cardInquiry.IBAN;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "txtCardBankName.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.cardInquiry.bank_name;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "waitingAccount",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "radioAccounts.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "insertAccountErrorText",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "waitingSettlement",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "requestSettlementMessage",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "firstRequestCount",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "btnRegisterSettlementShow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "settlementResultShow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "cbAccounts.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.accounts[0].id;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "0";
              }
              throw e;
            }
          })()
      },
      {
        path: "accounts",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "requestInvoiceUrl",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "requestWalletUrl",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "switchAccountPanel",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "currentAccountType",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "updatewallet",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "isLoadAccount",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "dialogNewInvoiceDetails[].open",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "detailsDataApiRequest[].data",
        type: "private",
        variableType: "object"
      },
      {
        path: "detailsDataApiRequest[].error",
        type: "private",
        variableType: "object"
      },
      {
        path: "detailsDataApiRequest[].loading",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "paymentLink",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbr2UhI7UlpvR(),
    screen: useScreenVariants_7Bs7RtJcMv9T()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicHomepage.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicHomepage.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicHomepage.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicHomepage.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicHomepage.pageMetadata.ogImageSrc}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {(() => {
          try {
            return true;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens,
              plasmic_fragment_design_system_css.plasmic_tokens,
              sty.root
            )}
            dir={"rtl"}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__wgrRs)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__wtNpu)}>
                <div className={classNames(projectcss.all, sty.freeBox__blxXq)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vfyou)}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__jdBO)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__prqZr)}
                  >
                    <Icon11Icon
                      className={classNames(projectcss.all, sty.svg__qkRgv)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToHttpsPaziresh24Com"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: "https://paziresh24.com"
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToHttpsPaziresh24Com"] != null &&
                          typeof $steps["goToHttpsPaziresh24Com"] ===
                            "object" &&
                          typeof $steps["goToHttpsPaziresh24Com"].then ===
                            "function"
                        ) {
                          $steps["goToHttpsPaziresh24Com"] = await $steps[
                            "goToHttpsPaziresh24Com"
                          ];
                        }
                      }}
                      role={"img"}
                    />

                    <h1
                      data-plasmic-name={"h1"}
                      data-plasmic-override={overrides.h1}
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1
                      )}
                    >
                      {
                        "\u0686\u0631\u062a\u06a9\u0647\u060c \u0645\u062f\u06cc\u0631\u06cc\u062a \u0627\u0645\u0648\u0631 \u0645\u0627\u0644\u06cc"
                      }
                    </h1>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__mvNga)}>
                  <div
                    data-plasmic-name={"btnDashboard3"}
                    data-plasmic-override={overrides.btnDashboard3}
                    className={classNames(projectcss.all, sty.btnDashboard3)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  return document
                                    .querySelector(".grid_calculator")
                                    .scrollIntoView({ behavior: "smooth" });
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }}
                  >
                    <Icon6Icon
                      className={classNames(projectcss.all, sty.svg__b78Sc)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qa7Wf
                      )}
                    >
                      {
                        "\u0645\u0627\u0634\u06cc\u0646 \u062d\u0633\u0627\u0628"
                      }
                    </div>
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___4OQlX)}
                >
                  <div
                    data-plasmic-name={"lblUser"}
                    data-plasmic-override={overrides.lblUser}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.lblUser
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.txtUserName;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "\u062d\u062c\u062a \u062e\u0648\u0627\u062c\u0648\u06cc";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  {(() => {
                    try {
                      return $state.btnLogoutShow;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <PlasmicLink__
                      data-plasmic-name={"btnLogout"}
                      data-plasmic-override={overrides.btnLogout}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.btnLogout
                      )}
                      component={Link}
                      href={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? ""
                          : undefined
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps[
                          "goToHttpsPaziresh24ComLogoutUrlHttpsChortkePaziresh24Com"
                        ] = true
                          ? (() => {
                              const actionArgs = {
                                destination:
                                  "https://paziresh24.com/logout?url=https://chortke.paziresh24.com"
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps[
                            "goToHttpsPaziresh24ComLogoutUrlHttpsChortkePaziresh24Com"
                          ] != null &&
                          typeof $steps[
                            "goToHttpsPaziresh24ComLogoutUrlHttpsChortkePaziresh24Com"
                          ] === "object" &&
                          typeof $steps[
                            "goToHttpsPaziresh24ComLogoutUrlHttpsChortkePaziresh24Com"
                          ].then === "function"
                        ) {
                          $steps[
                            "goToHttpsPaziresh24ComLogoutUrlHttpsChortkePaziresh24Com"
                          ] = await $steps[
                            "goToHttpsPaziresh24ComLogoutUrlHttpsChortkePaziresh24Com"
                          ];
                        }
                      }}
                      platform={"nextjs"}
                    >
                      {"\u062e\u0631\u0648\u062c"}
                    </PlasmicLink__>
                  ) : null}
                  {(() => {
                    try {
                      return $state.btnLoginShow;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Button
                      data-plasmic-name={"btnLogin"}
                      data-plasmic-override={overrides.btnLogin}
                      children2={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__he0G
                          )}
                        >
                          {"\u0648\u0631\u0648\u062f"}
                        </div>
                      }
                      className={classNames("__wab_instance", sty.btnLogin)}
                      link={
                        "https://www.paziresh24.com/login/?redirect_url=https://chortke.paziresh24.com/"
                      }
                      outline={true}
                    />
                  ) : null}
                </div>
              </div>
            </Stack__>
            <section
              data-plasmic-name={"section"}
              data-plasmic-override={overrides.section}
              className={classNames(projectcss.all, sty.section)}
              dir={"rtl"}
            >
              {(() => {
                try {
                  return $state.accounts.length > 1;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__riVw0)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__tdWwz)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__l4CJ
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return "حساب کاربری: ";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u062d\u0633\u0627\u0628 \u06a9\u0627\u0631\u0628\u0631\u06cc: ";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <Select
                      data-plasmic-name={"cbAccounts"}
                      data-plasmic-override={overrides.cbAccounts}
                      aria-label={"name"}
                      aria-labelledby={"id"}
                      className={classNames("__wab_instance", sty.cbAccounts)}
                      name={"accounts"}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "cbAccounts",
                            "value"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }

                        (async value => {
                          const $steps = {};

                          $steps["updateUpdatewallet"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["updatewallet"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateUpdatewallet"] != null &&
                            typeof $steps["updateUpdatewallet"] === "object" &&
                            typeof $steps["updateUpdatewallet"].then ===
                              "function"
                          ) {
                            $steps["updateUpdatewallet"] = await $steps[
                              "updateUpdatewallet"
                            ];
                          }

                          $steps["updateFirstRequestCount"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["firstRequestCount"]
                                  },
                                  operation: 2
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(
                                    objRoot,
                                    variablePath,
                                    oldValue + 1
                                  );
                                  return oldValue + 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateFirstRequestCount"] != null &&
                            typeof $steps["updateFirstRequestCount"] ===
                              "object" &&
                            typeof $steps["updateFirstRequestCount"].then ===
                              "function"
                          ) {
                            $steps["updateFirstRequestCount"] = await $steps[
                              "updateFirstRequestCount"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }}
                      options={(() => {
                        try {
                          return $state.accounts.map(item => ({
                            value: item.id.toString(),
                            label: item.name
                          }));
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      placeholder={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__a5UlJ
                          )}
                        >
                          {hasVariant(
                            globalVariants,
                            "screen",
                            "mobileOnly"
                          ) ? (
                            "\u0627\u0646\u062a\u062e\u0627\u0628 \u0646\u0645\u0627\u06cc\u06cc\u062f"
                          ) : (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return "حساب مورد نظر را انتخاب نمایید";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u0645\u0631\u06a9\u0632 \u0645\u0648\u0631\u062f \u0646\u0638\u0631 \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u0646\u0645\u0627\u06cc\u06cc\u062f";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          )}
                        </div>
                      }
                      value={generateStateValueProp($state, [
                        "cbAccounts",
                        "value"
                      ])}
                    />
                  </div>
                </div>
              ) : null}
              <div
                data-plasmic-name={"gridCalculator2"}
                data-plasmic-override={overrides.gridCalculator2}
                className={classNames(projectcss.all, sty.gridCalculator2)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__dZfo,
                    "grid_calculator"
                  )}
                  id={"grid_calculator"}
                >
                  {(() => {
                    try {
                      return $state.currentAccountType == "userid";
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Select
                      data-plasmic-name={"cbProductlist"}
                      data-plasmic-override={overrides.cbProductlist}
                      aria-label={"name"}
                      aria-labelledby={"productid"}
                      className={classNames(
                        "__wab_instance",
                        sty.cbProductlist
                      )}
                      name={"productlist"}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "cbProductlist",
                            "value"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }

                        (async value => {
                          const $steps = {};

                          $steps["updateUpdatewallet"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["updatewallet"]
                                  },
                                  operation: 0,
                                  value: false
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateUpdatewallet"] != null &&
                            typeof $steps["updateUpdatewallet"] === "object" &&
                            typeof $steps["updateUpdatewallet"].then ===
                              "function"
                          ) {
                            $steps["updateUpdatewallet"] = await $steps[
                              "updateUpdatewallet"
                            ];
                          }

                          $steps["updateFirstRequestCount"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["firstRequestCount"]
                                  },
                                  operation: 2
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(
                                    objRoot,
                                    variablePath,
                                    oldValue + 1
                                  );
                                  return oldValue + 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateFirstRequestCount"] != null &&
                            typeof $steps["updateFirstRequestCount"] ===
                              "object" &&
                            typeof $steps["updateFirstRequestCount"].then ===
                              "function"
                          ) {
                            $steps["updateFirstRequestCount"] = await $steps[
                              "updateFirstRequestCount"
                            ];
                          }
                        }).apply(null, eventArgs);
                      }}
                      options={(() => {
                        try {
                          return $state.productList.map(item => ({
                            value: item.productid.toString(),
                            label: item.name
                          }));
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      placeholder={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lX8IZ
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "\u0627\u0646\u062a\u062e\u0627\u0628 \u0646\u0645\u0627\u06cc\u06cc\u062f"
                            : "\u0628\u062e\u0634 \u0645\u0648\u0631\u062f \u0646\u0638\u0631 \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u0646\u0645\u0627\u06cc\u06cc\u062f"}
                        </div>
                      }
                      value={generateStateValueProp($state, [
                        "cbProductlist",
                        "value"
                      ])}
                    />
                  ) : null}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__aiGt,
                    "grid_calculator"
                  )}
                  id={"grid_calculator"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__bYmeb)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__s0WRf)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___0Es2W
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___3OBad
                          )}
                        >
                          <div
                            data-plasmic-name={"txtRemainingText"}
                            data-plasmic-override={overrides.txtRemainingText}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.txtRemainingText
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.txtReminderTextValue;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u0645\u0627\u0646\u062f\u0647 \u0628\u062f\u0647\u06cc:";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            data-plasmic-name={"txtRemainingValue"}
                            data-plasmic-override={overrides.txtRemainingValue}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.txtRemainingValue
                            )}
                          >
                            {hasVariant(
                              globalVariants,
                              "screen",
                              "mobileOnly"
                            ) ? (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (() => {
                                      return $state.txtReminderValue == 0
                                        ? ""
                                        : $state.txtReminderValue
                                            .toString()
                                            .replace("\u2212", "")
                                            .replace(
                                              /\B(?=(\d{3})+(?!\d))/g,
                                              ","
                                            ) + " ریال";
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "0";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            ) : (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (() => {
                                      return $state.txtReminderValue == 0
                                        ? ""
                                        : $state.txtReminderValue
                                            .toString()
                                            .replace("\u2212", "")
                                            .replace(
                                              /\B(?=(\d{3})+(?!\d))/g,
                                              ","
                                            ) + " ریال";
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "0";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            )}
                          </div>
                        </div>
                        {(() => {
                          try {
                            return $state.waiting;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___2WYU
                            )}
                          >
                            <Icon2Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__molj2
                              )}
                              role={"img"}
                            />
                          </div>
                        ) : null}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__dLpxl)}
                    >
                      <Dialog
                        data-plasmic-name={"dialogIncreaseRemaining"}
                        data-plasmic-override={
                          overrides.dialogIncreaseRemaining
                        }
                        body={
                          <React.Fragment>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__f3Erv
                              )}
                            />

                            {(() => {
                              try {
                                return $state.showSelectPriceGrid;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                data-plasmic-name={"gridSelectprice"}
                                data-plasmic-override={
                                  overrides.gridSelectprice
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.gridSelectprice
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__gvTHy
                                  )}
                                >
                                  {(_par =>
                                    !_par
                                      ? []
                                      : Array.isArray(_par)
                                      ? _par
                                      : [_par])(
                                    (() => {
                                      try {
                                        return $state.increaseButtonList;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()
                                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                    const currentItem = __plasmic_item_0;
                                    const currentIndex = __plasmic_idx_0;
                                    return (
                                      <Button
                                        data-plasmic-name={"btnSelectAmount"}
                                        data-plasmic-override={
                                          overrides.btnSelectAmount
                                        }
                                        children2={
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__o8Xxn
                                            )}
                                          >
                                            {hasVariant(
                                              globalVariants,
                                              "screen",
                                              "mobileOnly"
                                            ) ? (
                                              <React.Fragment>
                                                {(() => {
                                                  try {
                                                    return new Intl.NumberFormat(
                                                      "fa-IR"
                                                    ).format(
                                                      $state.increaseButtonList[
                                                        currentIndex
                                                      ]
                                                    );
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return "Button";
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                              </React.Fragment>
                                            ) : (
                                              <React.Fragment>
                                                {(() => {
                                                  try {
                                                    return (
                                                      new Intl.NumberFormat(
                                                        "fa-IR"
                                                      ).format(
                                                        $state
                                                          .increaseButtonList[
                                                          currentIndex
                                                        ]
                                                      ) + " ریال"
                                                    );
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return "Button";
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                              </React.Fragment>
                                            )}
                                          </div>
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.btnSelectAmount
                                        )}
                                        color={"green"}
                                        key={currentIndex}
                                        onClick={async event => {
                                          const $steps = {};

                                          $steps["updatePaymentAmount"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "paymentAmount"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value:
                                                    $state.increaseButtonList[
                                                      currentIndex
                                                    ]
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["updatePaymentAmount"] !=
                                              null &&
                                            typeof $steps[
                                              "updatePaymentAmount"
                                            ] === "object" &&
                                            typeof $steps["updatePaymentAmount"]
                                              .then === "function"
                                          ) {
                                            $steps["updatePaymentAmount"] =
                                              await $steps[
                                                "updatePaymentAmount"
                                              ];
                                          }

                                          $steps["runCode"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  customFunction: async () => {
                                                    return ($state.txtNewPaymentAmount.value =
                                                      $state.increaseButtonList[
                                                        currentIndex
                                                      ]);
                                                  }
                                                };
                                                return (({
                                                  customFunction
                                                }) => {
                                                  return customFunction();
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["runCode"] != null &&
                                            typeof $steps["runCode"] ===
                                              "object" &&
                                            typeof $steps["runCode"].then ===
                                              "function"
                                          ) {
                                            $steps["runCode"] = await $steps[
                                              "runCode"
                                            ];
                                          }
                                        }}
                                      />
                                    );
                                  })}
                                  <Button
                                    children2={"..."}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.button__labRk
                                    )}
                                    color={"green"}
                                    onClick={async event => {
                                      const $steps = {};

                                      $steps["runCode"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              customFunction: async () => {
                                                return ($state.showMyAmount =
                                                  !$state.showMyAmount);
                                              }
                                            };
                                            return (({ customFunction }) => {
                                              return customFunction();
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["runCode"] != null &&
                                        typeof $steps["runCode"] === "object" &&
                                        typeof $steps["runCode"].then ===
                                          "function"
                                      ) {
                                        $steps["runCode"] = await $steps[
                                          "runCode"
                                        ];
                                      }
                                    }}
                                  />
                                </div>
                              </div>
                            ) : null}
                            {(
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? true
                                : (() => {
                                    try {
                                      return $state.showMyAmount;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })()
                            ) ? (
                              <div
                                data-plasmic-name={"gridMyAmount"}
                                data-plasmic-override={overrides.gridMyAmount}
                                className={classNames(
                                  projectcss.all,
                                  sty.gridMyAmount
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__hvwig
                                  )}
                                />

                                {(
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? (() => {
                                        try {
                                          return $state.showMyAmount;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })()
                                    : true
                                ) ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__ecXK
                                    )}
                                    dir={"rtl"}
                                  >
                                    <TextInput
                                      data-plasmic-name={"txtNewPaymentAmount"}
                                      data-plasmic-override={
                                        overrides.txtNewPaymentAmount
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.txtNewPaymentAmount
                                      )}
                                      onChange={async (...eventArgs: any) => {
                                        ((...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "txtNewPaymentAmount",
                                            "value"
                                          ])(
                                            (e => e.target?.value).apply(
                                              null,
                                              eventArgs
                                            )
                                          );
                                        }).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }

                                        (async event => {
                                          const $steps = {};

                                          $steps["updatePaymentAmount"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "paymentAmount"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value:
                                                    $state.txtNewPaymentAmount
                                                      .value
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["updatePaymentAmount"] !=
                                              null &&
                                            typeof $steps[
                                              "updatePaymentAmount"
                                            ] === "object" &&
                                            typeof $steps["updatePaymentAmount"]
                                              .then === "function"
                                          ) {
                                            $steps["updatePaymentAmount"] =
                                              await $steps[
                                                "updatePaymentAmount"
                                              ];
                                          }
                                        }).apply(null, eventArgs);
                                      }}
                                      placeholder={
                                        "\u0645\u0628\u0644\u063a \u0645\u0648\u0631\u062f \u0646\u0638\u0631 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f"
                                      }
                                      type={"number"}
                                      value={
                                        generateStateValueProp($state, [
                                          "txtNewPaymentAmount",
                                          "value"
                                        ]) ?? ""
                                      }
                                    />
                                  </div>
                                ) : null}
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__jlOh6
                                  )}
                                />
                              </div>
                            ) : null}
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__zGcd
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__q4Ac
                                )}
                              >
                                <Button
                                  children2={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__hFy2M
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return (
                                              new Intl.NumberFormat(
                                                "fa-IR"
                                              ).format($state.paymentAmount) +
                                              " ریال" +
                                              " - ارسال به درگاه پرداخت"
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "\u0627\u0631\u0633\u0627\u0644 \u0628\u0647 \u062f\u0631\u06af\u0627\u0647";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  }
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button__zzG7G
                                  )}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["showWaitingPayment"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["waitingPayment"]
                                            },
                                            operation: 0,
                                            value: true
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["showWaitingPayment"] != null &&
                                      typeof $steps["showWaitingPayment"] ===
                                        "object" &&
                                      typeof $steps["showWaitingPayment"]
                                        .then === "function"
                                    ) {
                                      $steps["showWaitingPayment"] =
                                        await $steps["showWaitingPayment"];
                                    }

                                    $steps["paymentRequest"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            args: [
                                              "POST",
                                              "https://apigw.paziresh24.com/transaction/v1/userpayment",
                                              (() => {
                                                try {
                                                  return {
                                                    productid:
                                                      $state.currentAccountType ==
                                                      "centerid"
                                                        ? "7"
                                                        : "1",
                                                    returnlink:
                                                      "https://www.paziresh24.com/dashboard/apps/katibe/bills/",
                                                    title: "افزایش موجودی",
                                                    amount:
                                                      $state.paymentAmount,
                                                    centerid:
                                                      $state.currentCenterid
                                                  };
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()
                                            ]
                                          };
                                          return $globalActions[
                                            "Fragment.apiRequest"
                                          ]?.apply(null, [...actionArgs.args]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["paymentRequest"] != null &&
                                      typeof $steps["paymentRequest"] ===
                                        "object" &&
                                      typeof $steps["paymentRequest"].then ===
                                        "function"
                                    ) {
                                      $steps["paymentRequest"] = await $steps[
                                        "paymentRequest"
                                      ];
                                    }

                                    $steps["updatePaymentLink"] =
                                      $steps.paymentRequest.status == 200 &&
                                      $steps.paymentRequest.data.status == true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["paymentLink"]
                                              },
                                              operation: 0,
                                              value:
                                                $steps.paymentRequest.data.data
                                                  .link
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["updatePaymentLink"] != null &&
                                      typeof $steps["updatePaymentLink"] ===
                                        "object" &&
                                      typeof $steps["updatePaymentLink"]
                                        .then === "function"
                                    ) {
                                      $steps["updatePaymentLink"] =
                                        await $steps["updatePaymentLink"];
                                    }

                                    $steps["redirectUser"] =
                                      $steps.paymentRequest.status == 200 &&
                                      $steps.paymentRequest.data.status == true
                                        ? (() => {
                                            const actionArgs = {
                                              args: [
                                                (() => {
                                                  try {
                                                    return $state.paymentLink;
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return undefined;
                                                    }
                                                    throw e;
                                                  }
                                                })()
                                              ]
                                            };
                                            return $globalActions[
                                              "Hamdast.openLink"
                                            ]?.apply(null, [
                                              ...actionArgs.args
                                            ]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["redirectUser"] != null &&
                                      typeof $steps["redirectUser"] ===
                                        "object" &&
                                      typeof $steps["redirectUser"].then ===
                                        "function"
                                    ) {
                                      $steps["redirectUser"] = await $steps[
                                        "redirectUser"
                                      ];
                                    }

                                    $steps["hideWaitingPayment"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["waitingPayment"]
                                            },
                                            operation: 0,
                                            value: false
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["hideWaitingPayment"] != null &&
                                      typeof $steps["hideWaitingPayment"] ===
                                        "object" &&
                                      typeof $steps["hideWaitingPayment"]
                                        .then === "function"
                                    ) {
                                      $steps["hideWaitingPayment"] =
                                        await $steps["hideWaitingPayment"];
                                    }
                                  }}
                                />

                                {(() => {
                                  try {
                                    return $state.waitingPayment;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <Icon2Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__sTpDg
                                    )}
                                    role={"img"}
                                  />
                                ) : null}
                              </div>
                            </div>
                          </React.Fragment>
                        }
                        className={classNames(
                          "__wab_instance",
                          sty.dialogIncreaseRemaining
                        )}
                        onOpenChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "dialogIncreaseRemaining",
                            "open"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        open={generateStateValueProp($state, [
                          "dialogIncreaseRemaining",
                          "open"
                        ])}
                        title={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__aeDeu
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__dycd
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (() => {
                                      return $state.txtPaymentText + ":";
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u0627\u0641\u0632\u0627\u06cc\u0634 \u0645\u0648\u062c\u0648\u062f\u06cc:";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            {(
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? true
                                : (() => {
                                    try {
                                      return $state.showMyAmount;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })()
                            ) ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__keYhm
                                )}
                              >
                                {
                                  '\u0627\u0628\u062a\u062f\u0627 \u0645\u0628\u0644\u063a \u0645\u0648\u0631\u062f \u0646\u0638\u0631 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0631\u062f\u0647 \u0648 \u0633\u067e\u0633 \u062f\u06a9\u0645\u0647 "\u0627\u0631\u0633\u0627\u0644 \u0628\u0647 \u062f\u0631\u06af\u0627\u0647" \u0631\u0627 \u0628\u0632\u0646\u06cc\u062f:'
                                }
                              </div>
                            ) : null}
                          </div>
                        }
                        trigger={
                          (() => {
                            try {
                              return $state.reminderWallet < 0;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <Button
                              data-plasmic-name={"btnPay"}
                              data-plasmic-override={overrides.btnPay}
                              children2={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___6C57K
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $state.txtPaymentText;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "\u067e\u0631\u062f\u0627\u062e\u062a";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.btnPay
                              )}
                              color={"green"}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateShowMyAmount"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["showMyAmount"]
                                        },
                                        operation: 0,
                                        value: false
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateShowMyAmount"] != null &&
                                  typeof $steps["updateShowMyAmount"] ===
                                    "object" &&
                                  typeof $steps["updateShowMyAmount"].then ===
                                    "function"
                                ) {
                                  $steps["updateShowMyAmount"] = await $steps[
                                    "updateShowMyAmount"
                                  ];
                                }

                                $steps["buttonList"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return (() => {
                                            $state.increaseButtonList =
                                              $state.reminderWallet < 0
                                                ? [
                                                    Math.abs(
                                                      $state.reminderWallet
                                                    )
                                                  ]
                                                : $state.increaseButtonListBase;
                                            $state.paymentAmount =
                                              $state.reminderWallet < 0
                                                ? Math.abs(
                                                    $state.reminderWallet
                                                  )
                                                : $state
                                                    .increaseButtonListBase[0];
                                            return ($state.showSelectPriceGrid =
                                              $state.reminderWallet < 0
                                                ? false
                                                : true);
                                          })();
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["buttonList"] != null &&
                                  typeof $steps["buttonList"] === "object" &&
                                  typeof $steps["buttonList"].then ===
                                    "function"
                                ) {
                                  $steps["buttonList"] = await $steps[
                                    "buttonList"
                                  ];
                                }

                                $steps["runCode"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return (() => {
                                            $state.txtNewPaymentAmount.value =
                                              $state.reminderWallet < 0
                                                ? Math.abs(
                                                    $state.reminderWallet
                                                  )
                                                : $state.reminderWallet;
                                            if ($state.reminderWallet >= 0)
                                              return ($state.showMyAmount =
                                                false);
                                            else
                                              return ($state.showMyAmount =
                                                true);
                                          })();
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["runCode"] != null &&
                                  typeof $steps["runCode"] === "object" &&
                                  typeof $steps["runCode"].then === "function"
                                ) {
                                  $steps["runCode"] = await $steps["runCode"];
                                }
                              }}
                            />
                          ) : null
                        }
                      />

                      {(() => {
                        try {
                          return $state.reminderWallet > 0;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <Button2
                          data-plasmic-name={"btnSettlement"}
                          data-plasmic-override={overrides.btnSettlement}
                          children2={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__jvTmg
                              )}
                            >
                              {
                                "\u062f\u0631\u062e\u0648\u0627\u0633\u062a \u062a\u0633\u0648\u06cc\u0647"
                              }
                            </div>
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.btnSettlement
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["runCode"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        $state.txtSettlemenAmount.value =
                                          $state.reminderWallet;
                                        $state.settlementResultShow = false;
                                        return ($state.btnRegisterSettlementShow =
                                          true);
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode"] != null &&
                              typeof $steps["runCode"] === "object" &&
                              typeof $steps["runCode"].then === "function"
                            ) {
                              $steps["runCode"] = await $steps["runCode"];
                            }

                            $steps["openDialog"] =
                              $state.bankAccountList.length > 0
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return ($state.dialogSettlement.open =
                                          true);
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["openDialog"] != null &&
                              typeof $steps["openDialog"] === "object" &&
                              typeof $steps["openDialog"].then === "function"
                            ) {
                              $steps["openDialog"] = await $steps["openDialog"];
                            }

                            $steps["updateWaiting2"] =
                              $state.bankAccountList.length == 0
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["waiting"]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["updateWaiting2"] != null &&
                              typeof $steps["updateWaiting2"] === "object" &&
                              typeof $steps["updateWaiting2"].then ===
                                "function"
                            ) {
                              $steps["updateWaiting2"] = await $steps[
                                "updateWaiting2"
                              ];
                            }

                            $steps["getUserAccounts"] =
                              $state.bankAccountList.length == 0
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        undefined,
                                        "https://apigw.paziresh24.com/financialaccount/v1/useraccounts"
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.apiRequest"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                            if (
                              $steps["getUserAccounts"] != null &&
                              typeof $steps["getUserAccounts"] === "object" &&
                              typeof $steps["getUserAccounts"].then ===
                                "function"
                            ) {
                              $steps["getUserAccounts"] = await $steps[
                                "getUserAccounts"
                              ];
                            }

                            $steps["updateBankAccountList"] =
                              $steps.getUserAccounts.status == 200 &&
                              $state.bankAccountList.length == 0
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["bankAccountList"]
                                      },
                                      operation: 0,
                                      value: $steps.getUserAccounts.data.data
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["updateBankAccountList"] != null &&
                              typeof $steps["updateBankAccountList"] ===
                                "object" &&
                              typeof $steps["updateBankAccountList"].then ===
                                "function"
                            ) {
                              $steps["updateBankAccountList"] = await $steps[
                                "updateBankAccountList"
                              ];
                            }

                            $steps["updateWaiting"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["waiting"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateWaiting"] != null &&
                              typeof $steps["updateWaiting"] === "object" &&
                              typeof $steps["updateWaiting"].then === "function"
                            ) {
                              $steps["updateWaiting"] = await $steps[
                                "updateWaiting"
                              ];
                            }

                            $steps["runCode2"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        return ($state.dialogSettlement.open =
                                          true);
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["runCode2"] != null &&
                              typeof $steps["runCode2"] === "object" &&
                              typeof $steps["runCode2"].then === "function"
                            ) {
                              $steps["runCode2"] = await $steps["runCode2"];
                            }
                          }}
                          size={"compact"}
                        />
                      ) : null}
                      <Dialog2
                        data-plasmic-name={"dialogSettlement"}
                        data-plasmic-override={overrides.dialogSettlement}
                        body={
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.btnRegisterSettlementShow;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__nCo7G
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (
                                        "طلب شما: " +
                                        $state.txtReminderValue +
                                        " ریال"
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "\u0645\u0648\u062c\u0648\u062f\u06cc \u062d\u0633\u0627\u0628:";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            ) : null}
                            {(() => {
                              try {
                                return $state.btnRegisterSettlementShow;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__x2Yq8
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__qW9Wk
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__ff3Za
                                    )}
                                  >
                                    {"\u0645\u0628\u0644\u063a:"}
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__gbCvw
                                  )}
                                >
                                  <TabContent
                                    data-plasmic-name={"tabContent"}
                                    data-plasmic-override={overrides.tabContent}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.tabContent
                                    )}
                                  >
                                    <TextInput
                                      data-plasmic-name={"txtSettlemenAmount"}
                                      data-plasmic-override={
                                        overrides.txtSettlemenAmount
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.txtSettlemenAmount
                                      )}
                                      onChange={async (...eventArgs: any) => {
                                        ((...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "txtSettlemenAmount",
                                            "value"
                                          ])(
                                            (e => e.target?.value).apply(
                                              null,
                                              eventArgs
                                            )
                                          );
                                        }).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }

                                        (async event => {
                                          const $steps = {};

                                          $steps["runCode"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  customFunction: async () => {
                                                    return (() => {
                                                      if (
                                                        parseInt(
                                                          $state
                                                            .txtSettlemenAmount
                                                            .value
                                                        ) >
                                                        $state.reminderWallet
                                                      ) {
                                                        return ($state.txtSettlemenAmount.value =
                                                          $state.reminderWallet.toString());
                                                      }
                                                    })();
                                                  }
                                                };
                                                return (({
                                                  customFunction
                                                }) => {
                                                  return customFunction();
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["runCode"] != null &&
                                            typeof $steps["runCode"] ===
                                              "object" &&
                                            typeof $steps["runCode"].then ===
                                              "function"
                                          ) {
                                            $steps["runCode"] = await $steps[
                                              "runCode"
                                            ];
                                          }
                                        }).apply(null, eventArgs);
                                      }}
                                      placeholder={
                                        "\u0645\u0628\u0644\u063a \u0645\u0648\u0631\u062f \u0646\u0638\u0631 \u0628\u0647 \u0631\u06cc\u0627\u0644"
                                      }
                                      type={
                                        hasVariant(
                                          globalVariants,
                                          "screen",
                                          "mobileOnly"
                                        )
                                          ? "number"
                                          : undefined
                                      }
                                      value={
                                        generateStateValueProp($state, [
                                          "txtSettlemenAmount",
                                          "value"
                                        ]) ?? ""
                                      }
                                    />
                                  </TabContent>
                                </div>
                              </div>
                            ) : null}
                            {(() => {
                              try {
                                return $state.btnRegisterSettlementShow;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___3EGp1
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__epZNt
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__nnq4E
                                    )}
                                  >
                                    {"\u062d\u0633\u0627\u0628:"}
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__mR8O4
                                    )}
                                  >
                                    <Dialog2
                                      data-plasmic-name={
                                        "dialogRegisterAccount"
                                      }
                                      data-plasmic-override={
                                        overrides.dialogRegisterAccount
                                      }
                                      body={
                                        <React.Fragment>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__bULnu
                                            )}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__rxJiu
                                              )}
                                            >
                                              <TextInput
                                                data-plasmic-name={"txtCardId"}
                                                data-plasmic-override={
                                                  overrides.txtCardId
                                                }
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.txtCardId
                                                )}
                                                onChange={async (
                                                  ...eventArgs: any
                                                ) => {
                                                  ((...eventArgs) => {
                                                    generateStateOnChangeProp(
                                                      $state,
                                                      ["txtCardId", "value"]
                                                    )(
                                                      (e =>
                                                        e.target?.value).apply(
                                                        null,
                                                        eventArgs
                                                      )
                                                    );
                                                  }).apply(null, eventArgs);

                                                  if (
                                                    eventArgs.length > 1 &&
                                                    eventArgs[1] &&
                                                    eventArgs[1]
                                                      ._plasmic_state_init_
                                                  ) {
                                                    return;
                                                  }

                                                  (async event => {
                                                    const $steps = {};

                                                    $steps["runCode"] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            customFunction:
                                                              async () => {
                                                                return (() => {
                                                                  return ($state.cardInquiry =
                                                                    {});
                                                                })();
                                                              }
                                                          };
                                                          return (({
                                                            customFunction
                                                          }) => {
                                                            return customFunction();
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps["runCode"] !=
                                                        null &&
                                                      typeof $steps[
                                                        "runCode"
                                                      ] === "object" &&
                                                      typeof $steps["runCode"]
                                                        .then === "function"
                                                    ) {
                                                      $steps["runCode"] =
                                                        await $steps["runCode"];
                                                    }
                                                  }).apply(null, eventArgs);
                                                }}
                                                placeholder={
                                                  hasVariant(
                                                    globalVariants,
                                                    "screen",
                                                    "mobileOnly"
                                                  )
                                                    ? "\u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a"
                                                    : "\u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f"
                                                }
                                                type={
                                                  hasVariant(
                                                    globalVariants,
                                                    "screen",
                                                    "mobileOnly"
                                                  )
                                                    ? "number"
                                                    : undefined
                                                }
                                                value={
                                                  generateStateValueProp(
                                                    $state,
                                                    ["txtCardId", "value"]
                                                  ) ?? ""
                                                }
                                              />
                                            </div>
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__ne3S
                                              )}
                                            >
                                              {(() => {
                                                try {
                                                  return !(
                                                    $state.cardInquiry &&
                                                    $state.cardInquiry.IBAN &&
                                                    $state.cardInquiry.IBAN
                                                      .length > 0
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return true;
                                                  }
                                                  throw e;
                                                }
                                              })() ? (
                                                <Button2
                                                  children2={
                                                    <div
                                                      className={classNames(
                                                        projectcss.all,
                                                        projectcss.__wab_text,
                                                        sty.text__qrThP
                                                      )}
                                                    >
                                                      {
                                                        "\u0627\u0633\u062a\u0639\u0644\u0627\u0645"
                                                      }
                                                    </div>
                                                  }
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.button__o41Sn
                                                  )}
                                                  color={"green"}
                                                  onClick={async event => {
                                                    const $steps = {};

                                                    $steps["runCode"] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            customFunction:
                                                              async () => {
                                                                return (() => {
                                                                  $state.waitingAccount =
                                                                    true;
                                                                  return ($state.cardInquiry =
                                                                    {});
                                                                })();
                                                              }
                                                          };
                                                          return (({
                                                            customFunction
                                                          }) => {
                                                            return customFunction();
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps["runCode"] !=
                                                        null &&
                                                      typeof $steps[
                                                        "runCode"
                                                      ] === "object" &&
                                                      typeof $steps["runCode"]
                                                        .then === "function"
                                                    ) {
                                                      $steps["runCode"] =
                                                        await $steps["runCode"];
                                                    }

                                                    $steps["getCardInquiry"] =
                                                      true
                                                        ? (() => {
                                                            const actionArgs = {
                                                              args: [
                                                                undefined,
                                                                (() => {
                                                                  try {
                                                                    return (
                                                                      "https://api.paziresh24.com/V1/doctor/payments/iban-inquiry/?card_number=" +
                                                                      $state
                                                                        .txtCardId
                                                                        .value
                                                                    );
                                                                  } catch (e) {
                                                                    if (
                                                                      e instanceof
                                                                        TypeError ||
                                                                      e?.plasmicType ===
                                                                        "PlasmicUndefinedDataError"
                                                                    ) {
                                                                      return undefined;
                                                                    }
                                                                    throw e;
                                                                  }
                                                                })()
                                                              ]
                                                            };
                                                            return $globalActions[
                                                              "Fragment.apiRequest"
                                                            ]?.apply(null, [
                                                              ...actionArgs.args
                                                            ]);
                                                          })()
                                                        : undefined;
                                                    if (
                                                      $steps[
                                                        "getCardInquiry"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "getCardInquiry"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "getCardInquiry"
                                                      ].then === "function"
                                                    ) {
                                                      $steps["getCardInquiry"] =
                                                        await $steps[
                                                          "getCardInquiry"
                                                        ];
                                                    }

                                                    $steps[
                                                      "updateCardInquiry"
                                                    ] =
                                                      $steps.getCardInquiry
                                                        .status == 200
                                                        ? (() => {
                                                            const actionArgs = {
                                                              variable: {
                                                                objRoot: $state,
                                                                variablePath: [
                                                                  "cardInquiry"
                                                                ]
                                                              },
                                                              operation: 0,
                                                              value:
                                                                $steps
                                                                  .getCardInquiry
                                                                  .data
                                                            };
                                                            return (({
                                                              variable,
                                                              value,
                                                              startIndex,
                                                              deleteCount
                                                            }) => {
                                                              if (!variable) {
                                                                return;
                                                              }
                                                              const {
                                                                objRoot,
                                                                variablePath
                                                              } = variable;

                                                              $stateSet(
                                                                objRoot,
                                                                variablePath,
                                                                value
                                                              );
                                                              return value;
                                                            })?.apply(null, [
                                                              actionArgs
                                                            ]);
                                                          })()
                                                        : undefined;
                                                    if (
                                                      $steps[
                                                        "updateCardInquiry"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "updateCardInquiry"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "updateCardInquiry"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "updateCardInquiry"
                                                      ] = await $steps[
                                                        "updateCardInquiry"
                                                      ];
                                                    }

                                                    $steps[
                                                      "invokeGlobalAction"
                                                    ] =
                                                      $steps.getCardInquiry
                                                        .status != 200
                                                        ? (() => {
                                                            const actionArgs = {
                                                              args: [
                                                                "error",
                                                                (() => {
                                                                  try {
                                                                    return "خطا در عملیات استعلام. لطفا شماره کارت را بررسی کرده و مجددا تلاش نمایید";
                                                                  } catch (e) {
                                                                    if (
                                                                      e instanceof
                                                                        TypeError ||
                                                                      e?.plasmicType ===
                                                                        "PlasmicUndefinedDataError"
                                                                    ) {
                                                                      return undefined;
                                                                    }
                                                                    throw e;
                                                                  }
                                                                })()
                                                              ]
                                                            };
                                                            return $globalActions[
                                                              "Fragment.showToast"
                                                            ]?.apply(null, [
                                                              ...actionArgs.args
                                                            ]);
                                                          })()
                                                        : undefined;
                                                    if (
                                                      $steps[
                                                        "invokeGlobalAction"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "invokeGlobalAction"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "invokeGlobalAction"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "invokeGlobalAction"
                                                      ] = await $steps[
                                                        "invokeGlobalAction"
                                                      ];
                                                    }

                                                    $steps["runCode2"] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            customFunction:
                                                              async () => {
                                                                return ($state.waitingAccount =
                                                                  false);
                                                              }
                                                          };
                                                          return (({
                                                            customFunction
                                                          }) => {
                                                            return customFunction();
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps["runCode2"] !=
                                                        null &&
                                                      typeof $steps[
                                                        "runCode2"
                                                      ] === "object" &&
                                                      typeof $steps["runCode2"]
                                                        .then === "function"
                                                    ) {
                                                      $steps["runCode2"] =
                                                        await $steps[
                                                          "runCode2"
                                                        ];
                                                    }
                                                  }}
                                                  size={"compact"}
                                                />
                                              ) : null}
                                            </div>
                                          </div>
                                          {(() => {
                                            try {
                                              return (
                                                $state.cardInquiry &&
                                                $state.cardInquiry.IBAN &&
                                                $state.cardInquiry.IBAN.length >
                                                  0
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return true;
                                              }
                                              throw e;
                                            }
                                          })() ? (
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__m3GUc
                                              )}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__js61N
                                                )}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text___1VCg
                                                  )}
                                                >
                                                  {
                                                    "\u0646\u0627\u0645 \u0635\u0627\u062d\u0628 \u062d\u0633\u0627\u0628:"
                                                  }
                                                </div>
                                              </div>
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__oSncB
                                                )}
                                              >
                                                <TextInput
                                                  data-plasmic-name={
                                                    "txtCardOwner"
                                                  }
                                                  data-plasmic-override={
                                                    overrides.txtCardOwner
                                                  }
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.txtCardOwner
                                                  )}
                                                  isDisabled={true}
                                                  onChange={async (
                                                    ...eventArgs: any
                                                  ) => {
                                                    ((...eventArgs) => {
                                                      generateStateOnChangeProp(
                                                        $state,
                                                        [
                                                          "txtCardOwner",
                                                          "value"
                                                        ]
                                                      )(
                                                        (e =>
                                                          e.target
                                                            ?.value).apply(
                                                          null,
                                                          eventArgs
                                                        )
                                                      );
                                                    }).apply(null, eventArgs);

                                                    if (
                                                      eventArgs.length > 1 &&
                                                      eventArgs[1] &&
                                                      eventArgs[1]
                                                        ._plasmic_state_init_
                                                    ) {
                                                      return;
                                                    }
                                                  }}
                                                  placeholder={``}
                                                  value={
                                                    generateStateValueProp(
                                                      $state,
                                                      ["txtCardOwner", "value"]
                                                    ) ?? ""
                                                  }
                                                />
                                              </div>
                                            </div>
                                          ) : null}
                                          {(() => {
                                            try {
                                              return (
                                                $state.cardInquiry &&
                                                $state.cardInquiry.IBAN &&
                                                $state.cardInquiry.IBAN.length >
                                                  0
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return true;
                                              }
                                              throw e;
                                            }
                                          })() ? (
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__u9XZr
                                              )}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__ekXj
                                                )}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__a1Psi
                                                  )}
                                                >
                                                  {
                                                    "\u0634\u0645\u0627\u0631\u0647 \u0634\u0628\u0627:"
                                                  }
                                                </div>
                                              </div>
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__rO3Zc
                                                )}
                                              >
                                                <TextInput
                                                  data-plasmic-name={
                                                    "txtCardIban"
                                                  }
                                                  data-plasmic-override={
                                                    overrides.txtCardIban
                                                  }
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.txtCardIban
                                                  )}
                                                  isDisabled={true}
                                                  onChange={async (
                                                    ...eventArgs: any
                                                  ) => {
                                                    ((...eventArgs) => {
                                                      generateStateOnChangeProp(
                                                        $state,
                                                        ["txtCardIban", "value"]
                                                      )(
                                                        (e =>
                                                          e.target
                                                            ?.value).apply(
                                                          null,
                                                          eventArgs
                                                        )
                                                      );
                                                    }).apply(null, eventArgs);

                                                    if (
                                                      eventArgs.length > 1 &&
                                                      eventArgs[1] &&
                                                      eventArgs[1]
                                                        ._plasmic_state_init_
                                                    ) {
                                                      return;
                                                    }
                                                  }}
                                                  placeholder={``}
                                                  value={
                                                    generateStateValueProp(
                                                      $state,
                                                      ["txtCardIban", "value"]
                                                    ) ?? ""
                                                  }
                                                />
                                              </div>
                                            </div>
                                          ) : null}
                                          {(() => {
                                            try {
                                              return (
                                                $state.cardInquiry &&
                                                $state.cardInquiry.IBAN &&
                                                $state.cardInquiry.IBAN.length >
                                                  0
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return true;
                                              }
                                              throw e;
                                            }
                                          })() ? (
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__nS430
                                              )}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__qvLCi
                                                )}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__gQhTe
                                                  )}
                                                >
                                                  {"\u0628\u0627\u0646\u06a9:"}
                                                </div>
                                              </div>
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox___2P68Y
                                                )}
                                              >
                                                <TextInput
                                                  data-plasmic-name={
                                                    "txtCardBankName"
                                                  }
                                                  data-plasmic-override={
                                                    overrides.txtCardBankName
                                                  }
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.txtCardBankName
                                                  )}
                                                  isDisabled={true}
                                                  onChange={async (
                                                    ...eventArgs: any
                                                  ) => {
                                                    ((...eventArgs) => {
                                                      generateStateOnChangeProp(
                                                        $state,
                                                        [
                                                          "txtCardBankName",
                                                          "value"
                                                        ]
                                                      )(
                                                        (e =>
                                                          e.target
                                                            ?.value).apply(
                                                          null,
                                                          eventArgs
                                                        )
                                                      );
                                                    }).apply(null, eventArgs);

                                                    if (
                                                      eventArgs.length > 1 &&
                                                      eventArgs[1] &&
                                                      eventArgs[1]
                                                        ._plasmic_state_init_
                                                    ) {
                                                      return;
                                                    }
                                                  }}
                                                  placeholder={``}
                                                  value={
                                                    generateStateValueProp(
                                                      $state,
                                                      [
                                                        "txtCardBankName",
                                                        "value"
                                                      ]
                                                    ) ?? ""
                                                  }
                                                />
                                              </div>
                                            </div>
                                          ) : null}
                                          {(() => {
                                            try {
                                              return (
                                                $state.cardInquiry &&
                                                $state.cardInquiry.IBAN &&
                                                $state.cardInquiry.IBAN.length >
                                                  0
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return true;
                                              }
                                              throw e;
                                            }
                                          })() ? (
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__s5Shf
                                              )}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__vo2Ra
                                                )}
                                              >
                                                <Button2
                                                  children2={
                                                    "\u062b\u0628\u062a \u062d\u0633\u0627\u0628"
                                                  }
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.button__vqkR3
                                                  )}
                                                  onClick={async event => {
                                                    const $steps = {};

                                                    $steps["runCode"] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            customFunction:
                                                              async () => {
                                                                return ($state.waitingAccount =
                                                                  true);
                                                              }
                                                          };
                                                          return (({
                                                            customFunction
                                                          }) => {
                                                            return customFunction();
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps["runCode"] !=
                                                        null &&
                                                      typeof $steps[
                                                        "runCode"
                                                      ] === "object" &&
                                                      typeof $steps["runCode"]
                                                        .then === "function"
                                                    ) {
                                                      $steps["runCode"] =
                                                        await $steps["runCode"];
                                                    }

                                                    $steps["registerAccount"] =
                                                      true
                                                        ? (() => {
                                                            const actionArgs = {
                                                              args: [
                                                                "POST",
                                                                (() => {
                                                                  try {
                                                                    return "https://apigw.paziresh24.com/ganjname/v1/useraccountbycardid";
                                                                  } catch (e) {
                                                                    if (
                                                                      e instanceof
                                                                        TypeError ||
                                                                      e?.plasmicType ===
                                                                        "PlasmicUndefinedDataError"
                                                                    ) {
                                                                      return undefined;
                                                                    }
                                                                    throw e;
                                                                  }
                                                                })(),
                                                                undefined,
                                                                (() => {
                                                                  try {
                                                                    return {
                                                                      cardid:
                                                                        $state
                                                                          .txtCardId
                                                                          .value
                                                                    };
                                                                  } catch (e) {
                                                                    if (
                                                                      e instanceof
                                                                        TypeError ||
                                                                      e?.plasmicType ===
                                                                        "PlasmicUndefinedDataError"
                                                                    ) {
                                                                      return [];
                                                                    }
                                                                    throw e;
                                                                  }
                                                                })()
                                                              ]
                                                            };
                                                            return $globalActions[
                                                              "Fragment.apiRequest"
                                                            ]?.apply(null, [
                                                              ...actionArgs.args
                                                            ]);
                                                          })()
                                                        : undefined;
                                                    if (
                                                      $steps[
                                                        "registerAccount"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "registerAccount"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "registerAccount"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "registerAccount"
                                                      ] = await $steps[
                                                        "registerAccount"
                                                      ];
                                                    }

                                                    $steps[
                                                      "updateInsertAccountErrorText"
                                                    ] =
                                                      $steps.registerAccount
                                                        .status != 200
                                                        ? (() => {
                                                            const actionArgs = {
                                                              variable: {
                                                                objRoot: $state,
                                                                variablePath: [
                                                                  "insertAccountErrorText"
                                                                ]
                                                              },
                                                              operation: 0,
                                                              value:
                                                                $steps
                                                                  .registerAccount
                                                                  .data.message
                                                            };
                                                            return (({
                                                              variable,
                                                              value,
                                                              startIndex,
                                                              deleteCount
                                                            }) => {
                                                              if (!variable) {
                                                                return;
                                                              }
                                                              const {
                                                                objRoot,
                                                                variablePath
                                                              } = variable;

                                                              $stateSet(
                                                                objRoot,
                                                                variablePath,
                                                                value
                                                              );
                                                              return value;
                                                            })?.apply(null, [
                                                              actionArgs
                                                            ]);
                                                          })()
                                                        : undefined;
                                                    if (
                                                      $steps[
                                                        "updateInsertAccountErrorText"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "updateInsertAccountErrorText"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "updateInsertAccountErrorText"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "updateInsertAccountErrorText"
                                                      ] = await $steps[
                                                        "updateInsertAccountErrorText"
                                                      ];
                                                    }

                                                    $steps["errorAlert"] =
                                                      $steps.registerAccount
                                                        .status != 200
                                                        ? (() => {
                                                            const actionArgs = {
                                                              args: [
                                                                "error",
                                                                (() => {
                                                                  try {
                                                                    return (
                                                                      "خطا در ثبت اطلاعات حساب" +
                                                                      ": " +
                                                                      $state.insertAccountErrorText
                                                                    ).replaceAll(
                                                                      "undefined",
                                                                      ""
                                                                    );
                                                                  } catch (e) {
                                                                    if (
                                                                      e instanceof
                                                                        TypeError ||
                                                                      e?.plasmicType ===
                                                                        "PlasmicUndefinedDataError"
                                                                    ) {
                                                                      return undefined;
                                                                    }
                                                                    throw e;
                                                                  }
                                                                })()
                                                              ]
                                                            };
                                                            return $globalActions[
                                                              "Fragment.showToast"
                                                            ]?.apply(null, [
                                                              ...actionArgs.args
                                                            ]);
                                                          })()
                                                        : undefined;
                                                    if (
                                                      $steps["errorAlert"] !=
                                                        null &&
                                                      typeof $steps[
                                                        "errorAlert"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "errorAlert"
                                                      ].then === "function"
                                                    ) {
                                                      $steps["errorAlert"] =
                                                        await $steps[
                                                          "errorAlert"
                                                        ];
                                                    }

                                                    $steps["successAlert"] =
                                                      $steps.registerAccount
                                                        .status == 200
                                                        ? (() => {
                                                            const actionArgs = {
                                                              args: [
                                                                undefined,
                                                                (() => {
                                                                  try {
                                                                    return "اطلاعات حساب با موفقیت ثبت گردید";
                                                                  } catch (e) {
                                                                    if (
                                                                      e instanceof
                                                                        TypeError ||
                                                                      e?.plasmicType ===
                                                                        "PlasmicUndefinedDataError"
                                                                    ) {
                                                                      return undefined;
                                                                    }
                                                                    throw e;
                                                                  }
                                                                })()
                                                              ]
                                                            };
                                                            return $globalActions[
                                                              "Fragment.showToast"
                                                            ]?.apply(null, [
                                                              ...actionArgs.args
                                                            ]);
                                                          })()
                                                        : undefined;
                                                    if (
                                                      $steps["successAlert"] !=
                                                        null &&
                                                      typeof $steps[
                                                        "successAlert"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "successAlert"
                                                      ].then === "function"
                                                    ) {
                                                      $steps["successAlert"] =
                                                        await $steps[
                                                          "successAlert"
                                                        ];
                                                    }

                                                    $steps["getUserAccounts"] =
                                                      true
                                                        ? (() => {
                                                            const actionArgs = {
                                                              args: [
                                                                undefined,
                                                                "https://apigw.paziresh24.com/ganjname/v1/useraccounts"
                                                              ]
                                                            };
                                                            return $globalActions[
                                                              "Fragment.apiRequest"
                                                            ]?.apply(null, [
                                                              ...actionArgs.args
                                                            ]);
                                                          })()
                                                        : undefined;
                                                    if (
                                                      $steps[
                                                        "getUserAccounts"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "getUserAccounts"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "getUserAccounts"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "getUserAccounts"
                                                      ] = await $steps[
                                                        "getUserAccounts"
                                                      ];
                                                    }

                                                    $steps[
                                                      "updateBankAccountList"
                                                    ] =
                                                      $steps.getUserAccounts
                                                        .status == 200
                                                        ? (() => {
                                                            const actionArgs = {
                                                              variable: {
                                                                objRoot: $state,
                                                                variablePath: [
                                                                  "bankAccountList"
                                                                ]
                                                              },
                                                              operation: 0,
                                                              value:
                                                                $steps
                                                                  .getUserAccounts
                                                                  .data.data
                                                            };
                                                            return (({
                                                              variable,
                                                              value,
                                                              startIndex,
                                                              deleteCount
                                                            }) => {
                                                              if (!variable) {
                                                                return;
                                                              }
                                                              const {
                                                                objRoot,
                                                                variablePath
                                                              } = variable;

                                                              $stateSet(
                                                                objRoot,
                                                                variablePath,
                                                                value
                                                              );
                                                              return value;
                                                            })?.apply(null, [
                                                              actionArgs
                                                            ]);
                                                          })()
                                                        : undefined;
                                                    if (
                                                      $steps[
                                                        "updateBankAccountList"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "updateBankAccountList"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "updateBankAccountList"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "updateBankAccountList"
                                                      ] = await $steps[
                                                        "updateBankAccountList"
                                                      ];
                                                    }

                                                    $steps[
                                                      "hideWaitingAccount"
                                                    ] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            variable: {
                                                              objRoot: $state,
                                                              variablePath: [
                                                                "waitingAccount"
                                                              ]
                                                            },
                                                            operation: 0,
                                                            value: false
                                                          };
                                                          return (({
                                                            variable,
                                                            value,
                                                            startIndex,
                                                            deleteCount
                                                          }) => {
                                                            if (!variable) {
                                                              return;
                                                            }
                                                            const {
                                                              objRoot,
                                                              variablePath
                                                            } = variable;

                                                            $stateSet(
                                                              objRoot,
                                                              variablePath,
                                                              value
                                                            );
                                                            return value;
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps[
                                                        "hideWaitingAccount"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "hideWaitingAccount"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "hideWaitingAccount"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "hideWaitingAccount"
                                                      ] = await $steps[
                                                        "hideWaitingAccount"
                                                      ];
                                                    }

                                                    $steps["runCode2"] =
                                                      $steps.registerAccount
                                                        .status == 200
                                                        ? (() => {
                                                            const actionArgs = {
                                                              customFunction:
                                                                async () => {
                                                                  return (() => {
                                                                    $state.dialogRegisterAccount.open =
                                                                      false;
                                                                    return ($state.cardInquiry =
                                                                      {});
                                                                  })();
                                                                }
                                                            };
                                                            return (({
                                                              customFunction
                                                            }) => {
                                                              return customFunction();
                                                            })?.apply(null, [
                                                              actionArgs
                                                            ]);
                                                          })()
                                                        : undefined;
                                                    if (
                                                      $steps["runCode2"] !=
                                                        null &&
                                                      typeof $steps[
                                                        "runCode2"
                                                      ] === "object" &&
                                                      typeof $steps["runCode2"]
                                                        .then === "function"
                                                    ) {
                                                      $steps["runCode2"] =
                                                        await $steps[
                                                          "runCode2"
                                                        ];
                                                    }
                                                  }}
                                                />
                                              </div>
                                            </div>
                                          ) : null}
                                        </React.Fragment>
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.dialogRegisterAccount
                                      )}
                                      onOpenChange={async (
                                        ...eventArgs: any
                                      ) => {
                                        generateStateOnChangeProp($state, [
                                          "dialogRegisterAccount",
                                          "open"
                                        ]).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      }}
                                      open={generateStateValueProp($state, [
                                        "dialogRegisterAccount",
                                        "open"
                                      ])}
                                      title={
                                        <React.Fragment>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text___3CpJl
                                            )}
                                          >
                                            {
                                              "\u062b\u0628\u062a \u062d\u0633\u0627\u0628"
                                            }
                                          </div>
                                          {(() => {
                                            try {
                                              return $state.waitingAccount;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return true;
                                              }
                                              throw e;
                                            }
                                          })() ? (
                                            <Icon2Icon
                                              className={classNames(
                                                projectcss.all,
                                                sty.svg__wjaJ2
                                              )}
                                              role={"img"}
                                            />
                                          ) : null}
                                        </React.Fragment>
                                      }
                                      trigger={
                                        <Button2
                                          children2={
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__p1Dd
                                              )}
                                            >
                                              {
                                                "\u062d\u0633\u0627\u0628 \u062c\u062f\u06cc\u062f"
                                              }
                                            </div>
                                          }
                                          className={classNames(
                                            "__wab_instance",
                                            sty.button__rze6H
                                          )}
                                          color={"blue"}
                                          size={"minimal"}
                                        />
                                      }
                                    />
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__qefNx
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__g4QzE
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__jCvni
                                      )}
                                    >
                                      <AntdRadioGroup
                                        data-plasmic-name={"radioAccounts"}
                                        data-plasmic-override={
                                          overrides.radioAccounts
                                        }
                                        children={null}
                                        className={classNames(
                                          "__wab_instance",
                                          sty.radioAccounts
                                        )}
                                        onChange={async (...eventArgs: any) => {
                                          generateStateOnChangeProp($state, [
                                            "radioAccounts",
                                            "value"
                                          ]).apply(null, eventArgs);
                                        }}
                                        options={(() => {
                                          try {
                                            return $state.bankAccountList.map(
                                              account => ({
                                                label:
                                                  account.name +
                                                  "-" +
                                                  account.cardid,
                                                value: account.accountid
                                              })
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return [];
                                            }
                                            throw e;
                                          }
                                        })()}
                                        value={generateStateValueProp($state, [
                                          "radioAccounts",
                                          "value"
                                        ])}
                                      />

                                      {(() => {
                                        try {
                                          return (
                                            $state.bankAccountList.length == 0
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___95OZt
                                          )}
                                        >
                                          {
                                            "\u0644\u0637\u0641\u0627 \u06cc\u06a9 \u062d\u0633\u0627\u0628 \u0628\u0627\u0646\u06a9\u06cc \u062b\u0628\u062a \u0646\u0645\u0627\u06cc\u06cc\u062f."
                                          }
                                        </div>
                                      ) : null}
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__fl8M7
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__yahJ
                                        )}
                                        onClick={async event => {
                                          const $steps = {};

                                          $steps["invokeGlobalAction"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  args: [
                                                    "https://www.paziresh24.com/dashboard/apps/katibe/account/"
                                                  ]
                                                };
                                                return $globalActions[
                                                  "Hamdast.openLink"
                                                ]?.apply(null, [
                                                  ...actionArgs.args
                                                ]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["invokeGlobalAction"] !=
                                              null &&
                                            typeof $steps[
                                              "invokeGlobalAction"
                                            ] === "object" &&
                                            typeof $steps["invokeGlobalAction"]
                                              .then === "function"
                                          ) {
                                            $steps["invokeGlobalAction"] =
                                              await $steps[
                                                "invokeGlobalAction"
                                              ];
                                          }
                                        }}
                                      >
                                        <React.Fragment>
                                          <React.Fragment>{""}</React.Fragment>
                                          {
                                            <span
                                              data-plasmic-name={"span"}
                                              data-plasmic-override={
                                                overrides.span
                                              }
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.span,
                                                projectcss.__wab_text,
                                                projectcss.plasmic_default__inline,
                                                sty.span
                                              )}
                                            >
                                              {
                                                "\u0645\u062f\u06cc\u0631\u06cc\u062a \u062d\u0633\u0627\u0628\u200c"
                                              }
                                            </span>
                                          }
                                          <React.Fragment>{""}</React.Fragment>
                                        </React.Fragment>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            ) : null}
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__kicI
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__kmZYg
                                )}
                              >
                                {(() => {
                                  try {
                                    return $state.btnRegisterSettlementShow;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <Button2
                                    children2={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__elJqz
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return (
                                                new Intl.NumberFormat(
                                                  "fa-IR"
                                                ).format(
                                                  $state.txtSettlemenAmount
                                                    .value
                                                ) +
                                                " ریال" +
                                                " - ثبت درخواست"
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "\u062b\u0628\u062a \u062f\u0631\u062e\u0648\u0627\u0633\u062a";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.button__xHrRe
                                    )}
                                    onClick={async event => {
                                      const $steps = {};

                                      $steps["alertSelectAccount"] =
                                        $state.radioAccounts.value < 1 ||
                                        $state.radioAccounts.value == undefined
                                          ? (() => {
                                              const actionArgs = {
                                                args: [
                                                  "error",
                                                  "\u0644\u0637\u0641\u0627 \u06cc\u06a9 \u062d\u0633\u0627\u0628 \u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0631\u062f\u0647 \u06cc\u0627 \u062d\u0633\u0627\u0628 \u062c\u062f\u06cc\u062f\u06cc \u062b\u0628\u062a \u0646\u0645\u0627\u06cc\u06cc\u062f."
                                                ]
                                              };
                                              return $globalActions[
                                                "Fragment.showToast"
                                              ]?.apply(null, [
                                                ...actionArgs.args
                                              ]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["alertSelectAccount"] != null &&
                                        typeof $steps["alertSelectAccount"] ===
                                          "object" &&
                                        typeof $steps["alertSelectAccount"]
                                          .then === "function"
                                      ) {
                                        $steps["alertSelectAccount"] =
                                          await $steps["alertSelectAccount"];
                                      }

                                      $steps["updateWaitingSettlement"] =
                                        $state.radioAccounts.value > 0
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "waitingSettlement"
                                                  ]
                                                },
                                                operation: 0,
                                                value: true
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["updateWaitingSettlement"] !=
                                          null &&
                                        typeof $steps[
                                          "updateWaitingSettlement"
                                        ] === "object" &&
                                        typeof $steps["updateWaitingSettlement"]
                                          .then === "function"
                                      ) {
                                        $steps["updateWaitingSettlement"] =
                                          await $steps[
                                            "updateWaitingSettlement"
                                          ];
                                      }

                                      $steps["requestSettlement"] =
                                        $state.radioAccounts.value > 0
                                          ? (() => {
                                              const actionArgs = {
                                                args: [
                                                  "POST",
                                                  "https://apigw.paziresh24.com/ganjname/v1/settlement",
                                                  undefined,
                                                  (() => {
                                                    try {
                                                      return {
                                                        accountid: parseInt(
                                                          $state.radioAccounts
                                                            .value
                                                        ),
                                                        amount: parseInt(
                                                          $state
                                                            .txtSettlemenAmount
                                                            .value
                                                        ),
                                                        productid: parseInt(
                                                          $state.cbProductlist
                                                            .value
                                                        )
                                                      };
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })()
                                                ]
                                              };
                                              return $globalActions[
                                                "Fragment.apiRequest"
                                              ]?.apply(null, [
                                                ...actionArgs.args
                                              ]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["requestSettlement"] != null &&
                                        typeof $steps["requestSettlement"] ===
                                          "object" &&
                                        typeof $steps["requestSettlement"]
                                          .then === "function"
                                      ) {
                                        $steps["requestSettlement"] =
                                          await $steps["requestSettlement"];
                                      }

                                      $steps["setSettlementMeessage"] =
                                        $steps.requestSettlement.status != 200
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "requestSettlementMessage"
                                                  ]
                                                },
                                                operation: 0,
                                                value:
                                                  $steps.requestSettlement.data
                                                    .message
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["setSettlementMeessage"] !=
                                          null &&
                                        typeof $steps[
                                          "setSettlementMeessage"
                                        ] === "object" &&
                                        typeof $steps["setSettlementMeessage"]
                                          .then === "function"
                                      ) {
                                        $steps["setSettlementMeessage"] =
                                          await $steps["setSettlementMeessage"];
                                      }

                                      $steps["alertOk"] = false
                                        ? (() => {
                                            const actionArgs = {
                                              args: [
                                                undefined,
                                                "\u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0634\u0645\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062b\u0628\u062a \u0634\u062f."
                                              ]
                                            };
                                            return $globalActions[
                                              "Fragment.showToast"
                                            ]?.apply(null, [
                                              ...actionArgs.args
                                            ]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["alertOk"] != null &&
                                        typeof $steps["alertOk"] === "object" &&
                                        typeof $steps["alertOk"].then ===
                                          "function"
                                      ) {
                                        $steps["alertOk"] = await $steps[
                                          "alertOk"
                                        ];
                                      }

                                      $steps["alertError"] =
                                        $steps.requestSettlement.status != 200
                                          ? (() => {
                                              const actionArgs = {
                                                args: [
                                                  "error",
                                                  (() => {
                                                    try {
                                                      return (
                                                        "خطا در ثبت درخواست. " +
                                                        $state.requestSettlementMessage
                                                      ).replaceAll(
                                                        "undefined",
                                                        ""
                                                      );
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })()
                                                ]
                                              };
                                              return $globalActions[
                                                "Fragment.showToast"
                                              ]?.apply(null, [
                                                ...actionArgs.args
                                              ]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["alertError"] != null &&
                                        typeof $steps["alertError"] ===
                                          "object" &&
                                        typeof $steps["alertError"].then ===
                                          "function"
                                      ) {
                                        $steps["alertError"] = await $steps[
                                          "alertError"
                                        ];
                                      }

                                      $steps["updateWaitingSettlement2"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: [
                                                  "waitingSettlement"
                                                ]
                                              },
                                              operation: 0,
                                              value: false
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateWaitingSettlement2"] !=
                                          null &&
                                        typeof $steps[
                                          "updateWaitingSettlement2"
                                        ] === "object" &&
                                        typeof $steps[
                                          "updateWaitingSettlement2"
                                        ].then === "function"
                                      ) {
                                        $steps["updateWaitingSettlement2"] =
                                          await $steps[
                                            "updateWaitingSettlement2"
                                          ];
                                      }

                                      $steps["refresh"] =
                                        $steps.requestSettlement.status == 200
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "firstRequestCount"
                                                  ]
                                                },
                                                operation: 2
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                const oldValue = $stateGet(
                                                  objRoot,
                                                  variablePath
                                                );
                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  oldValue + 1
                                                );
                                                return oldValue + 1;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["refresh"] != null &&
                                        typeof $steps["refresh"] === "object" &&
                                        typeof $steps["refresh"].then ===
                                          "function"
                                      ) {
                                        $steps["refresh"] = await $steps[
                                          "refresh"
                                        ];
                                      }

                                      $steps["ok"] =
                                        $steps.requestSettlement.status == 200
                                          ? (() => {
                                              const actionArgs = {
                                                customFunction: async () => {
                                                  return (() => {
                                                    $state.settlementResultShow =
                                                      true;
                                                    return ($state.btnRegisterSettlementShow =
                                                      false);
                                                  })();
                                                }
                                              };
                                              return (({ customFunction }) => {
                                                return customFunction();
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["ok"] != null &&
                                        typeof $steps["ok"] === "object" &&
                                        typeof $steps["ok"].then === "function"
                                      ) {
                                        $steps["ok"] = await $steps["ok"];
                                      }

                                      $steps["closeModal"] =
                                        $steps.requestSettlement.status == 200
                                          ? (() => {
                                              const actionArgs = {
                                                customFunction: async () => {
                                                  return (() => {})();
                                                }
                                              };
                                              return (({ customFunction }) => {
                                                return customFunction();
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["closeModal"] != null &&
                                        typeof $steps["closeModal"] ===
                                          "object" &&
                                        typeof $steps["closeModal"].then ===
                                          "function"
                                      ) {
                                        $steps["closeModal"] = await $steps[
                                          "closeModal"
                                        ];
                                      }
                                    }}
                                    size={
                                      hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? "compact"
                                        : undefined
                                    }
                                  />
                                ) : null}
                                {(() => {
                                  try {
                                    return $state.settlementResultShow;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <div
                                    data-plasmic-name={"txtSettlementResult"}
                                    data-plasmic-override={
                                      overrides.txtSettlementResult
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.txtSettlementResult
                                    )}
                                  >
                                    {
                                      "\u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0634\u0645\u0627 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062b\u0628\u062a \u0634\u062f \u0648 \u067e\u0633 \u0627\u0632 \u0628\u0631\u0631\u0633\u06cc\u060c \u0628\u0647 \u062d\u0633\u0627\u0628 \u0634\u0645\u0627 \u0648\u0627\u0631\u06cc\u0632 \u0645\u06cc\u200c\u0634\u0648\u062f."
                                    }
                                  </div>
                                ) : null}
                              </div>
                            </div>
                          </React.Fragment>
                        }
                        className={classNames(
                          "__wab_instance",
                          sty.dialogSettlement
                        )}
                        onOpenChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "dialogSettlement",
                            "open"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        open={generateStateValueProp($state, [
                          "dialogSettlement",
                          "open"
                        ])}
                        title={
                          <React.Fragment>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__jruSy
                              )}
                            >
                              {
                                "\u062f\u0631\u062e\u0648\u0627\u0633\u062a \u062a\u0633\u0648\u06cc\u0647 \u062d\u0633\u0627\u0628"
                              }
                            </div>
                            {(() => {
                              try {
                                return $state.waitingSettlement;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <Icon2Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__jGoAg
                                )}
                                role={"img"}
                              />
                            ) : null}
                          </React.Fragment>
                        }
                        trigger={null}
                      />
                    </div>
                  </div>
                </div>
              </div>
              <div
                data-plasmic-name={"gridInvoice1"}
                data-plasmic-override={overrides.gridInvoice1}
                className={classNames(projectcss.all, sty.gridInvoice1)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__nwsmg,
                    "grid_calculator"
                  )}
                  id={"grid_calculator"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ecZ3V
                    )}
                  >
                    {"\u0631\u062f\u06cc\u0641"}
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox___2NkoK,
                    "grid_calculator"
                  )}
                  id={"grid_calculator"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__spZ98
                    )}
                  >
                    {"\u062a\u0627\u0631\u06cc\u062e"}
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__e7Ml0,
                    "grid_calculator"
                  )}
                  id={"grid_calculator"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gmjpK
                    )}
                  >
                    {"\u0639\u0646\u0648\u0627\u0646"}
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__piKZ,
                    "grid_calculator"
                  )}
                  id={"grid_calculator"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__wbpoa)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__fJFoH)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cj3GE
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "\u0642\u06cc\u0645\u062a "
                          : "\u0642\u06cc\u0645\u062a (\u0631\u06cc\u0627\u0644)"}
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___0LFr5
                      )}
                    />
                  </div>
                </div>
              </div>
              {(() => {
                try {
                  return (() => {
                    return $state.invoicelist.length == 0 ? true : false;
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  data-plasmic-name={"gridNoData"}
                  data-plasmic-override={overrides.gridNoData}
                  className={classNames(projectcss.all, sty.gridNoData)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__jr5Zj,
                      "grid_calculator"
                    )}
                    id={"grid_calculator"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dztzd
                      )}
                    >
                      {
                        "\u0645\u062d\u062a\u0648\u0627\u06cc\u06cc \u062c\u0647\u062a \u0646\u0645\u0627\u06cc\u0634 \u0648\u062c\u0648\u062f \u0646\u062f\u0627\u0631\u062f"
                      }
                    </div>
                  </div>
                </div>
              ) : null}
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.invoicelist;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    data-plasmic-name={"gridInvoice12"}
                    data-plasmic-override={overrides.gridInvoice12}
                    className={classNames(projectcss.all, sty.gridInvoice12)}
                    key={currentIndex}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___7L5Fd,
                        "grid_calculator"
                      )}
                      id={"grid_calculator"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__b9TAi
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                $state.invoicelist.findIndex(
                                  item =>
                                    item.invoiceid ===
                                    $state.invoicelist[currentIndex].invoiceid
                                ) + 1
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "1";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__yy3L,
                        "grid_calculator"
                      )}
                      id={"grid_calculator"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__k5RNe
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                "" +
                                (() => {
                                  const gregorianDate = new Date(
                                    $state.invoicelist[
                                      currentIndex
                                    ].registerdate
                                  );
                                  const persianDate = new Intl.DateTimeFormat(
                                    "fa-IR"
                                  ).format(gregorianDate);
                                  return persianDate;
                                })()
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "1403/05/01";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___5KBuV,
                        "grid_calculator"
                      )}
                      id={"grid_calculator"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mS8Qi
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.invoicelist[currentIndex].title;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0635\u0648\u0631\u062a \u062d\u0633\u0627\u0628 \u0647\u0632\u06cc\u0646\u0647 \u0646\u0648\u0628\u062a \u062f\u0647\u06cc \u062a\u06cc\u0631 \u0645\u0627\u0647 1403";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__kPny5,
                        "grid_calculator"
                      )}
                      id={"grid_calculator"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__i8OpB
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___0AoPo
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___07T8
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return new Intl.NumberFormat("fa-IR").format(
                                    $state.invoicelist[currentIndex].finalprice
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "25.300.000";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          {(() => {
                            try {
                              return currentItem.type == "purchase";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <Icon29Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__qo8JO
                              )}
                              role={"img"}
                            />
                          ) : null}
                          {(() => {
                            try {
                              return currentItem.type == "sale";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <Icon30Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__hOxl
                              )}
                              role={"img"}
                            />
                          ) : null}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__wtNVh
                          )}
                        >
                          {(() => {
                            const child$Props = {
                              body: (
                                <ApiRequest
                                  data-plasmic-name={"detailsDataApiRequest"}
                                  data-plasmic-override={
                                    overrides.detailsDataApiRequest
                                  }
                                  className={classNames(
                                    "__wab_instance",
                                    sty.detailsDataApiRequest
                                  )}
                                  errorDisplay={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__swIuy
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return "خطا در دریافت اطلاعات، لطفا دوباره تلاش نمایید.";
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "Error fetching data";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  }
                                  loadingDisplay={
                                    <Icon2Icon
                                      data-plasmic-name={"waitingIcon3"}
                                      data-plasmic-override={
                                        overrides.waitingIcon3
                                      }
                                      className={classNames(
                                        projectcss.all,
                                        sty.waitingIcon3
                                      )}
                                      role={"img"}
                                    />
                                  }
                                  method={"GET"}
                                  onError={async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "detailsDataApiRequest",
                                      __plasmic_idx_0,
                                      "error"
                                    ]).apply(null, eventArgs);
                                  }}
                                  onLoading={async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "detailsDataApiRequest",
                                      __plasmic_idx_0,
                                      "loading"
                                    ]).apply(null, eventArgs);
                                  }}
                                  onSuccess={async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "detailsDataApiRequest",
                                      __plasmic_idx_0,
                                      "data"
                                    ]).apply(null, eventArgs);
                                  }}
                                  params={(() => {
                                    try {
                                      return {
                                        invoiceid:
                                          $state.invoicelist[currentIndex]
                                            .invoiceid
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()}
                                  url={
                                    "https://apigw.paziresh24.com/transaction/v1/userinvoicedetails"
                                  }
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__jJVpt
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__wZcVi
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text___5Gu3E
                                        )}
                                      >
                                        {"\u0639\u0646\u0648\u0627\u0646:"}
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__sk6S5
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__d1Gv
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return $state
                                                .detailsDataApiRequest[
                                                currentIndex
                                              ].data.data.title;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__xycHd
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__ba427
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__pu2Qg
                                        )}
                                      >
                                        {hasVariant(
                                          globalVariants,
                                          "screen",
                                          "mobileOnly"
                                        )
                                          ? "\u062a\u0648\u0636\u06cc\u062d\u0627\u062a:"
                                          : "\u062a\u0648\u0636\u06cc\u062d\u0627\u062a:"}
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__tifBh
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text___47K52
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return $state
                                                .detailsDataApiRequest[
                                                currentIndex
                                              ].data.data.description;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__rKIq
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__aXhmd
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__bNh34
                                        )}
                                      >
                                        {hasVariant(
                                          globalVariants,
                                          "screen",
                                          "mobileOnly"
                                        )
                                          ? "\u06a9\u062f:"
                                          : "\u06a9\u062f:"}
                                      </div>
                                    </div>
                                    <Stack__
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox___1RA6
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__s0Qjd
                                        )}
                                      >
                                        {hasVariant(
                                          globalVariants,
                                          "screen",
                                          "mobileOnly"
                                        ) ? (
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return $state
                                                  .detailsDataApiRequest[
                                                  currentIndex
                                                ].data.data.invoiceid;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        ) : (
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return $state
                                                  .detailsDataApiRequest[
                                                  currentIndex
                                                ].data.data.invoiceid;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        )}
                                      </div>
                                    </Stack__>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox___24IJv
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__kdMkN
                                        )}
                                      >
                                        {"\u0632\u0645\u0627\u0646:"}
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__pHZty
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__nUycE
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return (
                                                $state.detailsDataApiRequest[
                                                  currentIndex
                                                ].data.data.registertime +
                                                " " +
                                                (() => {
                                                  const gregorianDate =
                                                    new Date(
                                                      $state.detailsDataApiRequest[
                                                        currentIndex
                                                      ].data.data.registerdate
                                                    );
                                                  const persianDate =
                                                    new Intl.DateTimeFormat(
                                                      "fa-IR"
                                                    ).format(gregorianDate);
                                                  return persianDate;
                                                })()
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </div>
                                  </div>
                                  {(_par =>
                                    !_par
                                      ? []
                                      : Array.isArray(_par)
                                      ? _par
                                      : [_par])(
                                    (() => {
                                      try {
                                        return $state.detailsDataApiRequest[
                                          currentIndex
                                        ].data.data.services;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()
                                  ).map((__plasmic_item_1, __plasmic_idx_1) => {
                                    const currentItem = __plasmic_item_1;
                                    const currentIndex = __plasmic_idx_1;
                                    return (
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__amb7W
                                        )}
                                        dir={"rtl"}
                                        key={currentIndex}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox___5Jx9M
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__aAhD9
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return "جزئیات:";
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "\u062c\u0632\u0626\u06cc\u0627\u062a:";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox___9Cmgi
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__oy01Q
                                            )}
                                            dir={"rtl"}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return (() => {
                                                    return currentItem.count > 1
                                                      ? currentItem.service +
                                                          " - " +
                                                          new Intl.NumberFormat(
                                                            "fa-IR"
                                                          ).format(
                                                            currentItem.count
                                                          ) +
                                                          "عدد"
                                                      : currentItem.service;
                                                  })();
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                        <Stack__
                                          as={"div"}
                                          hasGap={true}
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__rYlDt
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__qgcDj
                                            )}
                                          >
                                            {"\u0645\u0628\u0644\u063a:"}
                                          </div>
                                        </Stack__>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox___4OguS
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__x0Jd5
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return (
                                                    new Intl.NumberFormat(
                                                      "fa-IR"
                                                    ).format(
                                                      currentItem.price *
                                                        currentItem.count
                                                    ) +
                                                    " " +
                                                    "ریال"
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      </div>
                                    );
                                  })}
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__wo8Eh
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__j9YOk
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__mbCx9
                                        )}
                                      >
                                        {"\u062c\u0645\u0639 \u06a9\u0644:"}
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__xEwtY
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__pmdYd
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return (
                                                new Intl.NumberFormat(
                                                  "fa-IR"
                                                ).format(
                                                  $state.detailsDataApiRequest[
                                                    currentIndex
                                                  ].data.data.sumprice
                                                ) + " ریال"
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__mEt1U
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__mnF3G
                                        )}
                                      >
                                        {"\u062a\u062e\u0641\u06cc\u0641:"}
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__vnFe2
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__tHRyt
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return (
                                                new Intl.NumberFormat(
                                                  "fa-IR"
                                                ).format(
                                                  $state.detailsDataApiRequest[
                                                    currentIndex
                                                  ].data.data.discountprice
                                                ) + " ریال"
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__davqt
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__vG0Br
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__pQwpw
                                        )}
                                      >
                                        {
                                          "\u0645\u0627\u0644\u06cc\u0627\u062a:"
                                        }
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__gdivy
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__tpCDx
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return (
                                                new Intl.NumberFormat(
                                                  "fa-IR"
                                                ).format(
                                                  $state.detailsDataApiRequest[
                                                    currentIndex
                                                  ].data.data.vatprice
                                                ) + " ریال"
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox___3WqYi
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__zE0LU
                                        )}
                                      >
                                        {
                                          "\u0645\u0628\u0644\u063a \u0646\u0647\u0627\u06cc\u06cc:"
                                        }
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__vLtSm
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__vLUn7
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return (
                                                new Intl.NumberFormat(
                                                  "fa-IR"
                                                ).format(
                                                  $state.detailsDataApiRequest[
                                                    currentIndex
                                                  ].data.data.finalprice
                                                ) + " ریال"
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </div>
                                  </div>
                                  {(() => {
                                    try {
                                      return $state.detailsDataApiRequest[
                                        currentIndex
                                      ].data.data !== undefined &&
                                        $state.detailsDataApiRequest[
                                          currentIndex
                                        ].data.data.meta !== undefined &&
                                        $state.detailsDataApiRequest[
                                          currentIndex
                                        ].data.data.meta.RefNum !== undefined
                                        ? true
                                        : false;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__nff6P
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__oOwV
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__pIwk
                                          )}
                                        >
                                          {
                                            "\u0634\u0646\u0627\u0633\u0647 \u067e\u0631\u062f\u0627\u062e\u062a:"
                                          }
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__gdg0Y
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__uDFqv
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return $state
                                                  .detailsDataApiRequest[
                                                  currentIndex
                                                ].data.data.meta.RefNum;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                    </div>
                                  ) : null}
                                </ApiRequest>
                              ),
                              className: classNames(
                                "__wab_instance",
                                sty.dialogNewInvoiceDetails
                              ),
                              onOpenChange: async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "dialogNewInvoiceDetails",
                                  __plasmic_idx_0,
                                  "open"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              },
                              open: generateStateValueProp($state, [
                                "dialogNewInvoiceDetails",
                                __plasmic_idx_0,
                                "open"
                              ]),
                              title: (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__p5X29
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__x1UV0,
                                      ``
                                    )}
                                    dir={"rtl"}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___4Dsuo
                                      )}
                                    >
                                      {
                                        "\u062c\u0632\u0626\u06cc\u0627\u062a \u0635\u0648\u0631\u062a \u062d\u0633\u0627\u0628"
                                      }
                                    </div>
                                  </div>
                                </div>
                              ),
                              trigger: (
                                <Button
                                  data-plasmic-name={"btnInvoiceInfo"}
                                  data-plasmic-override={
                                    overrides.btnInvoiceInfo
                                  }
                                  children2={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__vV1ET
                                      )}
                                    >
                                      {"..."}
                                    </div>
                                  }
                                  className={classNames(
                                    "__wab_instance",
                                    sty.btnInvoiceInfo
                                  )}
                                  color={"softGreen"}
                                  onClick={async event => {
                                    const $steps = {};
                                  }}
                                />
                              )
                            };

                            initializePlasmicStates(
                              $state,
                              [
                                {
                                  name: "dialogNewInvoiceDetails[].open",
                                  initFunc: ({ $props, $state, $queries }) =>
                                    false
                                }
                              ],
                              [__plasmic_idx_0]
                            );
                            return (
                              <Dialog
                                data-plasmic-name={"dialogNewInvoiceDetails"}
                                data-plasmic-override={
                                  overrides.dialogNewInvoiceDetails
                                }
                                {...child$Props}
                              />
                            );
                          })()}
                        </div>
                      </div>
                    </div>
                  </div>
                );
              })}
              <div
                data-plasmic-name={"gridNoData2"}
                data-plasmic-override={overrides.gridNoData2}
                className={classNames(projectcss.all, sty.gridNoData2)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__arWe,
                    "grid_calculator"
                  )}
                  id={"grid_calculator"}
                >
                  {(() => {
                    try {
                      return (
                        !$state.waiting &&
                        $state.invoicelist.length > 0 &&
                        !$state.waitingLoading &&
                        $state.showMoreBtn
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Button2
                      children2={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tK1Qg
                          )}
                        >
                          {
                            "\u0646\u0645\u0627\u06cc\u0634 \u0628\u06cc\u0634\u062a\u0631..."
                          }
                        </div>
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.button__ifhZc
                      )}
                      color={"softBlue"}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateWaitingLoading"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["waitingLoading"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateWaitingLoading"] != null &&
                          typeof $steps["updateWaitingLoading"] === "object" &&
                          typeof $steps["updateWaitingLoading"].then ===
                            "function"
                        ) {
                          $steps["updateWaitingLoading"] = await $steps[
                            "updateWaitingLoading"
                          ];
                        }

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return ($state.offset += 20);
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }

                        $steps["getInvoiceList"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  undefined,
                                  (() => {
                                    try {
                                      return (
                                        "https://apigw.paziresh24.com/transaction/v1/userinvoicelist?productid=" +
                                        $state.cbProductlist.value +
                                        "&limit=" +
                                        $state.limit +
                                        "&offset=" +
                                        $state.offset
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["getInvoiceList"] != null &&
                          typeof $steps["getInvoiceList"] === "object" &&
                          typeof $steps["getInvoiceList"].then === "function"
                        ) {
                          $steps["getInvoiceList"] = await $steps[
                            "getInvoiceList"
                          ];
                        }

                        $steps["runCode2"] =
                          $steps.getInvoiceList.status == 200 &&
                          $steps.getInvoiceList.data.status == true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      return ($state.invoicelist = [
                                        ...$state.invoicelist,
                                        ...$steps.getInvoiceList.data.data
                                      ]);
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["runCode2"] != null &&
                          typeof $steps["runCode2"] === "object" &&
                          typeof $steps["runCode2"].then === "function"
                        ) {
                          $steps["runCode2"] = await $steps["runCode2"];
                        }

                        $steps["updateWaitingLoading2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["waitingLoading"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateWaitingLoading2"] != null &&
                          typeof $steps["updateWaitingLoading2"] === "object" &&
                          typeof $steps["updateWaitingLoading2"].then ===
                            "function"
                        ) {
                          $steps["updateWaitingLoading2"] = await $steps[
                            "updateWaitingLoading2"
                          ];
                        }

                        $steps["showMoreBtn"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    if (
                                      $steps.getInvoiceList.status != 200 ||
                                      $steps.getInvoiceList.data.data.length !=
                                        $state.limit
                                    )
                                      return ($state.showMoreBtn = false);
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["showMoreBtn"] != null &&
                          typeof $steps["showMoreBtn"] === "object" &&
                          typeof $steps["showMoreBtn"].then === "function"
                        ) {
                          $steps["showMoreBtn"] = await $steps["showMoreBtn"];
                        }
                      }}
                    />
                  ) : null}
                  {(() => {
                    try {
                      return $state.waitingLoading;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Icon2Icon
                      className={classNames(projectcss.all, sty.svg___9Eqty)}
                      role={"img"}
                    />
                  ) : null}
                </div>
              </div>
            </section>
            <SideEffect
              data-plasmic-name={"sideEffectPageLoad"}
              data-plasmic-override={overrides.sideEffectPageLoad}
              className={classNames("__wab_instance", sty.sideEffectPageLoad)}
              onMount={async () => {
                const $steps = {};

                $steps["showWaiting"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["waiting"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["showWaiting"] != null &&
                  typeof $steps["showWaiting"] === "object" &&
                  typeof $steps["showWaiting"].then === "function"
                ) {
                  $steps["showWaiting"] = await $steps["showWaiting"];
                }

                $steps["getUserAccounts"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          undefined,
                          "https://apigw.paziresh24.com/transaction/v1/useraccounts"
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["getUserAccounts"] != null &&
                  typeof $steps["getUserAccounts"] === "object" &&
                  typeof $steps["getUserAccounts"].then === "function"
                ) {
                  $steps["getUserAccounts"] = await $steps["getUserAccounts"];
                }

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            if ($steps.getUserAccounts.status == 200) {
                              return ($state.accounts =
                                $steps.getUserAccounts.data.data);
                            }
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }

                $steps["runCode2"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            if ($state.accounts.length > 0)
                              return ($state.cbAccounts.value =
                                $state.accounts[$state.accounts.length - 1].id);
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode2"] != null &&
                  typeof $steps["runCode2"] === "object" &&
                  typeof $steps["runCode2"].then === "function"
                ) {
                  $steps["runCode2"] = await $steps["runCode2"];
                }

                $steps["getProductList"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          undefined,
                          (() => {
                            try {
                              return "https://apigw.paziresh24.com/transaction/v1/userproductlist";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["getProductList"] != null &&
                  typeof $steps["getProductList"] === "object" &&
                  typeof $steps["getProductList"].then === "function"
                ) {
                  $steps["getProductList"] = await $steps["getProductList"];
                }

                $steps["setProductListVariable2"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return $steps.getProductList.status == 200 &&
                            $steps.getProductList.data.status == true
                            ? ($state.productList = [
                                {
                                  productid: 0,
                                  name: "همه"
                                },
                                ...$steps.getProductList.data.data
                              ])
                            : ($state.productList = []);
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["setProductListVariable2"] != null &&
                  typeof $steps["setProductListVariable2"] === "object" &&
                  typeof $steps["setProductListVariable2"].then === "function"
                ) {
                  $steps["setProductListVariable2"] = await $steps[
                    "setProductListVariable2"
                  ];
                }

                $steps["isLoadAccountTrue"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["isLoadAccount"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["isLoadAccountTrue"] != null &&
                  typeof $steps["isLoadAccountTrue"] === "object" &&
                  typeof $steps["isLoadAccountTrue"].then === "function"
                ) {
                  $steps["isLoadAccountTrue"] = await $steps[
                    "isLoadAccountTrue"
                  ];
                }

                $steps["updateFirstRequestCount"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["firstRequestCount"]
                        },
                        operation: 2
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, oldValue + 1);
                        return oldValue + 1;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateFirstRequestCount"] != null &&
                  typeof $steps["updateFirstRequestCount"] === "object" &&
                  typeof $steps["updateFirstRequestCount"].then === "function"
                ) {
                  $steps["updateFirstRequestCount"] = await $steps[
                    "updateFirstRequestCount"
                  ];
                }
              }}
            />

            <SideEffect
              data-plasmic-name={"sideEffectRefresh"}
              data-plasmic-override={overrides.sideEffectRefresh}
              className={classNames("__wab_instance", sty.sideEffectRefresh)}
              deps={(() => {
                try {
                  return [$state.firstRequestCount];
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              onMount={async () => {
                const $steps = {};

                $steps["runCode"] = $state.isLoadAccount
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            $state.waiting = true;
                            if ($state.updatewallet) {
                              $state.txtReminderTextValue = "";
                              $state.reminderWallet = 0;
                              $state.txtReminderValue = "";
                            }
                            $state.offset = 0;
                            $state.invoicelist = [];
                            $state.invoiceDetials = {};
                            return $state.accounts.forEach(account => {
                              if (account.id == $state.cbAccounts.value) {
                                if (account.type == "userid") {
                                  $state.currentAccountType = "userid";
                                  $state.requestInvoiceUrl =
                                    "https://apigw.paziresh24.com/transaction/v1/userinvoicelist?productid=" +
                                    $state.cbProductlist.value +
                                    "&limit=" +
                                    $state.limit +
                                    "&offset=" +
                                    $state.offset;
                                  $state.currentCenterid = "";
                                  $state.requestWalletUrl =
                                    "https://apigw.paziresh24.com/transaction/v1/productwallet?productid=" +
                                    $state.cbProductlist.value;
                                }
                                if (account.type == "centerid") {
                                  $state.currentAccountType = "centerid";
                                  $state.currentCenterid =
                                    $state.cbAccounts.value;
                                  $state.requestInvoiceUrl =
                                    "https://apigw.paziresh24.com/transaction/v1/userinvoicelist?productid=0&limit=" +
                                    $state.limit +
                                    "&offset=" +
                                    $state.offset +
                                    "&centerid=" +
                                    $state.cbAccounts.value;
                                  $state.requestWalletUrl =
                                    "https://apigw.paziresh24.com/transaction/v1/productwallet?productid=7&centerid=" +
                                    $state.cbAccounts.value;
                                }
                              }
                            });
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }

                $steps["getInvoiceList"] = $state.isLoadAccount
                  ? (() => {
                      const actionArgs = {
                        args: [
                          undefined,
                          (() => {
                            try {
                              return $state.requestInvoiceUrl;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["getInvoiceList"] != null &&
                  typeof $steps["getInvoiceList"] === "object" &&
                  typeof $steps["getInvoiceList"].then === "function"
                ) {
                  $steps["getInvoiceList"] = await $steps["getInvoiceList"];
                }

                $steps["updateInvoicelist"] =
                  $steps.getInvoiceList.status == 200 &&
                  $steps.getInvoiceList.data.status == true &&
                  $state.isLoadAccount
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["invoicelist"]
                          },
                          operation: 0,
                          value: $steps.getInvoiceList.data.data
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["updateInvoicelist"] != null &&
                  typeof $steps["updateInvoicelist"] === "object" &&
                  typeof $steps["updateInvoicelist"].then === "function"
                ) {
                  $steps["updateInvoicelist"] = await $steps[
                    "updateInvoicelist"
                  ];
                }

                $steps["runCode2"] = $state.isLoadAccount
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            if (
                              $steps.getInvoiceList.status == 200 &&
                              $steps.getInvoiceList.data.data !== undefined &&
                              $steps.getInvoiceList.data.data.length ==
                                $state.limit
                            )
                              return ($state.showMoreBtn = true);
                            else return ($state.showMoreBtn = false);
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode2"] != null &&
                  typeof $steps["runCode2"] === "object" &&
                  typeof $steps["runCode2"].then === "function"
                ) {
                  $steps["runCode2"] = await $steps["runCode2"];
                }

                $steps["updateWaiting"] =
                  $state.updatewallet == false && $state.isLoadAccount
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["waiting"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["updateWaiting"] != null &&
                  typeof $steps["updateWaiting"] === "object" &&
                  typeof $steps["updateWaiting"].then === "function"
                ) {
                  $steps["updateWaiting"] = await $steps["updateWaiting"];
                }

                $steps["getProductWallet"] =
                  $state.updatewallet && $state.isLoadAccount
                    ? (() => {
                        const actionArgs = {
                          args: [
                            undefined,
                            (() => {
                              try {
                                return $state.requestWalletUrl;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                if (
                  $steps["getProductWallet"] != null &&
                  typeof $steps["getProductWallet"] === "object" &&
                  typeof $steps["getProductWallet"].then === "function"
                ) {
                  $steps["getProductWallet"] = await $steps["getProductWallet"];
                }

                $steps["txtReminderText"] =
                  $steps.getProductWallet.status == 200 &&
                  $steps.getProductWallet.data.status == true &&
                  $state.updatewallet == true &&
                  $state.isLoadAccount
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              if ($steps.getProductWallet.data.data.balance > 0)
                                $state.txtReminderTextValue = "طلب شما: ";
                              else if (
                                $steps.getProductWallet.data.data.balance == 0
                              )
                                $state.txtReminderTextValue = "بدهی/طلب شما: ";
                              else $state.txtReminderTextValue = "بدهی شما: ";
                              return $steps.getProductWallet.data.data
                                .balance >= 0
                                ? ($state.txtPaymentText = "پرداخت")
                                : ($state.txtPaymentText = "پرداخت بدهی");
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["txtReminderText"] != null &&
                  typeof $steps["txtReminderText"] === "object" &&
                  typeof $steps["txtReminderText"].then === "function"
                ) {
                  $steps["txtReminderText"] = await $steps["txtReminderText"];
                }

                $steps["txtReminderValue"] =
                  $steps.getProductWallet.status == 200 &&
                  $steps.getProductWallet.data.status == true &&
                  $state.updatewallet == true &&
                  $state.isLoadAccount
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return ($state.txtReminderValue =
                              new Intl.NumberFormat("fa-IR").format(
                                $steps.getProductWallet.data.data.balance
                              ));
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["txtReminderValue"] != null &&
                  typeof $steps["txtReminderValue"] === "object" &&
                  typeof $steps["txtReminderValue"].then === "function"
                ) {
                  $steps["txtReminderValue"] = await $steps["txtReminderValue"];
                }

                $steps["updateReminderWallet"] =
                  $steps.getProductWallet.status == 200 &&
                  $steps.getProductWallet.data.status == true &&
                  $state.updatewallet == true &&
                  $state.isLoadAccount
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["reminderWallet"]
                          },
                          operation: 0,
                          value: $steps.getProductWallet.data.data.balance
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["updateReminderWallet"] != null &&
                  typeof $steps["updateReminderWallet"] === "object" &&
                  typeof $steps["updateReminderWallet"].then === "function"
                ) {
                  $steps["updateReminderWallet"] = await $steps[
                    "updateReminderWallet"
                  ];
                }

                $steps["runCode3"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return ($state.waiting =
                            false && $state.isLoadAccount);
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode3"] != null &&
                  typeof $steps["runCode3"] === "object" &&
                  typeof $steps["runCode3"].then === "function"
                ) {
                  $steps["runCode3"] = await $steps["runCode3"];
                }
              }}
            />
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "h1",
    "btnDashboard3",
    "lblUser",
    "btnLogout",
    "btnLogin",
    "section",
    "cbAccounts",
    "gridCalculator2",
    "cbProductlist",
    "txtRemainingText",
    "txtRemainingValue",
    "dialogIncreaseRemaining",
    "btnPay",
    "gridSelectprice",
    "btnSelectAmount",
    "gridMyAmount",
    "txtNewPaymentAmount",
    "btnSettlement",
    "dialogSettlement",
    "tabContent",
    "txtSettlemenAmount",
    "dialogRegisterAccount",
    "txtCardId",
    "txtCardOwner",
    "txtCardIban",
    "txtCardBankName",
    "radioAccounts",
    "span",
    "txtSettlementResult",
    "gridInvoice1",
    "gridNoData",
    "gridInvoice12",
    "dialogNewInvoiceDetails",
    "btnInvoiceInfo",
    "detailsDataApiRequest",
    "waitingIcon3",
    "gridNoData2",
    "sideEffectPageLoad",
    "sideEffectRefresh"
  ],
  h1: ["h1"],
  btnDashboard3: ["btnDashboard3"],
  lblUser: ["lblUser"],
  btnLogout: ["btnLogout"],
  btnLogin: ["btnLogin"],
  section: [
    "section",
    "cbAccounts",
    "gridCalculator2",
    "cbProductlist",
    "txtRemainingText",
    "txtRemainingValue",
    "dialogIncreaseRemaining",
    "btnPay",
    "gridSelectprice",
    "btnSelectAmount",
    "gridMyAmount",
    "txtNewPaymentAmount",
    "btnSettlement",
    "dialogSettlement",
    "tabContent",
    "txtSettlemenAmount",
    "dialogRegisterAccount",
    "txtCardId",
    "txtCardOwner",
    "txtCardIban",
    "txtCardBankName",
    "radioAccounts",
    "span",
    "txtSettlementResult",
    "gridInvoice1",
    "gridNoData",
    "gridInvoice12",
    "dialogNewInvoiceDetails",
    "btnInvoiceInfo",
    "detailsDataApiRequest",
    "waitingIcon3",
    "gridNoData2"
  ],
  cbAccounts: ["cbAccounts"],
  gridCalculator2: [
    "gridCalculator2",
    "cbProductlist",
    "txtRemainingText",
    "txtRemainingValue",
    "dialogIncreaseRemaining",
    "btnPay",
    "gridSelectprice",
    "btnSelectAmount",
    "gridMyAmount",
    "txtNewPaymentAmount",
    "btnSettlement",
    "dialogSettlement",
    "tabContent",
    "txtSettlemenAmount",
    "dialogRegisterAccount",
    "txtCardId",
    "txtCardOwner",
    "txtCardIban",
    "txtCardBankName",
    "radioAccounts",
    "span",
    "txtSettlementResult"
  ],
  cbProductlist: ["cbProductlist"],
  txtRemainingText: ["txtRemainingText"],
  txtRemainingValue: ["txtRemainingValue"],
  dialogIncreaseRemaining: [
    "dialogIncreaseRemaining",
    "btnPay",
    "gridSelectprice",
    "btnSelectAmount",
    "gridMyAmount",
    "txtNewPaymentAmount"
  ],
  btnPay: ["btnPay"],
  gridSelectprice: ["gridSelectprice", "btnSelectAmount"],
  btnSelectAmount: ["btnSelectAmount"],
  gridMyAmount: ["gridMyAmount", "txtNewPaymentAmount"],
  txtNewPaymentAmount: ["txtNewPaymentAmount"],
  btnSettlement: ["btnSettlement"],
  dialogSettlement: [
    "dialogSettlement",
    "tabContent",
    "txtSettlemenAmount",
    "dialogRegisterAccount",
    "txtCardId",
    "txtCardOwner",
    "txtCardIban",
    "txtCardBankName",
    "radioAccounts",
    "span",
    "txtSettlementResult"
  ],
  tabContent: ["tabContent", "txtSettlemenAmount"],
  txtSettlemenAmount: ["txtSettlemenAmount"],
  dialogRegisterAccount: [
    "dialogRegisterAccount",
    "txtCardId",
    "txtCardOwner",
    "txtCardIban",
    "txtCardBankName"
  ],
  txtCardId: ["txtCardId"],
  txtCardOwner: ["txtCardOwner"],
  txtCardIban: ["txtCardIban"],
  txtCardBankName: ["txtCardBankName"],
  radioAccounts: ["radioAccounts"],
  span: ["span"],
  txtSettlementResult: ["txtSettlementResult"],
  gridInvoice1: ["gridInvoice1"],
  gridNoData: ["gridNoData"],
  gridInvoice12: [
    "gridInvoice12",
    "dialogNewInvoiceDetails",
    "btnInvoiceInfo",
    "detailsDataApiRequest",
    "waitingIcon3"
  ],
  dialogNewInvoiceDetails: [
    "dialogNewInvoiceDetails",
    "btnInvoiceInfo",
    "detailsDataApiRequest",
    "waitingIcon3"
  ],
  btnInvoiceInfo: ["btnInvoiceInfo"],
  detailsDataApiRequest: ["detailsDataApiRequest", "waitingIcon3"],
  waitingIcon3: ["waitingIcon3"],
  gridNoData2: ["gridNoData2"],
  sideEffectPageLoad: ["sideEffectPageLoad"],
  sideEffectRefresh: ["sideEffectRefresh"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h1: "h1";
  btnDashboard3: "div";
  lblUser: "div";
  btnLogout: "a";
  btnLogin: typeof Button;
  section: "section";
  cbAccounts: typeof Select;
  gridCalculator2: "div";
  cbProductlist: typeof Select;
  txtRemainingText: "div";
  txtRemainingValue: "div";
  dialogIncreaseRemaining: typeof Dialog;
  btnPay: typeof Button;
  gridSelectprice: "div";
  btnSelectAmount: typeof Button;
  gridMyAmount: "div";
  txtNewPaymentAmount: typeof TextInput;
  btnSettlement: typeof Button2;
  dialogSettlement: typeof Dialog2;
  tabContent: typeof TabContent;
  txtSettlemenAmount: typeof TextInput;
  dialogRegisterAccount: typeof Dialog2;
  txtCardId: typeof TextInput;
  txtCardOwner: typeof TextInput;
  txtCardIban: typeof TextInput;
  txtCardBankName: typeof TextInput;
  radioAccounts: typeof AntdRadioGroup;
  span: "span";
  txtSettlementResult: "div";
  gridInvoice1: "div";
  gridNoData: "div";
  gridInvoice12: "div";
  dialogNewInvoiceDetails: typeof Dialog;
  btnInvoiceInfo: typeof Button;
  detailsDataApiRequest: typeof ApiRequest;
  waitingIcon3: "svg";
  gridNoData2: "div";
  sideEffectPageLoad: typeof SideEffect;
  sideEffectRefresh: typeof SideEffect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    btnDashboard3: makeNodeComponent("btnDashboard3"),
    lblUser: makeNodeComponent("lblUser"),
    btnLogout: makeNodeComponent("btnLogout"),
    btnLogin: makeNodeComponent("btnLogin"),
    section: makeNodeComponent("section"),
    cbAccounts: makeNodeComponent("cbAccounts"),
    gridCalculator2: makeNodeComponent("gridCalculator2"),
    cbProductlist: makeNodeComponent("cbProductlist"),
    txtRemainingText: makeNodeComponent("txtRemainingText"),
    txtRemainingValue: makeNodeComponent("txtRemainingValue"),
    dialogIncreaseRemaining: makeNodeComponent("dialogIncreaseRemaining"),
    btnPay: makeNodeComponent("btnPay"),
    gridSelectprice: makeNodeComponent("gridSelectprice"),
    btnSelectAmount: makeNodeComponent("btnSelectAmount"),
    gridMyAmount: makeNodeComponent("gridMyAmount"),
    txtNewPaymentAmount: makeNodeComponent("txtNewPaymentAmount"),
    btnSettlement: makeNodeComponent("btnSettlement"),
    dialogSettlement: makeNodeComponent("dialogSettlement"),
    tabContent: makeNodeComponent("tabContent"),
    txtSettlemenAmount: makeNodeComponent("txtSettlemenAmount"),
    dialogRegisterAccount: makeNodeComponent("dialogRegisterAccount"),
    txtCardId: makeNodeComponent("txtCardId"),
    txtCardOwner: makeNodeComponent("txtCardOwner"),
    txtCardIban: makeNodeComponent("txtCardIban"),
    txtCardBankName: makeNodeComponent("txtCardBankName"),
    radioAccounts: makeNodeComponent("radioAccounts"),
    span: makeNodeComponent("span"),
    txtSettlementResult: makeNodeComponent("txtSettlementResult"),
    gridInvoice1: makeNodeComponent("gridInvoice1"),
    gridNoData: makeNodeComponent("gridNoData"),
    gridInvoice12: makeNodeComponent("gridInvoice12"),
    dialogNewInvoiceDetails: makeNodeComponent("dialogNewInvoiceDetails"),
    btnInvoiceInfo: makeNodeComponent("btnInvoiceInfo"),
    detailsDataApiRequest: makeNodeComponent("detailsDataApiRequest"),
    waitingIcon3: makeNodeComponent("waitingIcon3"),
    gridNoData2: makeNodeComponent("gridNoData2"),
    sideEffectPageLoad: makeNodeComponent("sideEffectPageLoad"),
    sideEffectRefresh: makeNodeComponent("sideEffectRefresh"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "کتیبه، مدیریت امور مالی",
      description: "ماژول ها وشیوه قیمت گذاری محصولات پذیرش24",
      ogImageSrc:
        "https://site-assets.plasmic.app/49b5e4e62d4fd1407285906a0f5e6382.svg",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
