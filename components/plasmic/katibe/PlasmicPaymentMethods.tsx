/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: afXULSfGYmou2jFpEc2QWJ
// Component: BF9WF06JkxeV

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { AntdAccordion } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { accordionHelpers as AntdAccordion_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdAccordionItem } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import TextInput from "../../TextInput"; // plasmic-import: SePhlRlvEn3n/component
import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component

import { useScreenVariants as useScreenVariantsbr2UhI7UlpvR } from "../fragment_icons/PlasmicGlobalVariant__Screen"; // plasmic-import: BR2UhI7ulpvR/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "../chortke/plasmic.module.css"; // plasmic-import: afXULSfGYmou2jFpEc2QWJ/projectcss
import sty from "./PlasmicPaymentMethods.module.css"; // plasmic-import: BF9WF06JkxeV/css

import Icon49Icon from "./icons/PlasmicIcon__Icon49"; // plasmic-import: iAW7s13VGmu9/icon
import Icon2Icon from "../chortke/icons/PlasmicIcon__Icon2"; // plasmic-import: eeiQdsLura6L/icon
import Icon50Icon from "./icons/PlasmicIcon__Icon50"; // plasmic-import: xtxGD9pXGJw4/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import Icon51Icon from "./icons/PlasmicIcon__Icon51"; // plasmic-import: 72UEWeMBzzpH/icon
import SearchSvgIcon from "../chortke/icons/PlasmicIcon__SearchSvg"; // plasmic-import: fjupp6w2fUeo/icon
import CheckSvgIcon from "../chortke/icons/PlasmicIcon__CheckSvg"; // plasmic-import: VZ6Vl-sB0jLM/icon
import Icon48Icon from "./icons/PlasmicIcon__Icon48"; // plasmic-import: ApzBD_j9CWGg/icon

import __lib_copyToClipboard from "copy-to-clipboard";

createPlasmicElementProxy;

export type PlasmicPaymentMethods__VariantMembers = {};
export type PlasmicPaymentMethods__VariantsArgs = {};
type VariantPropType = keyof PlasmicPaymentMethods__VariantsArgs;
export const PlasmicPaymentMethods__VariantProps = new Array<VariantPropType>();

export type PlasmicPaymentMethods__ArgsType = {};
type ArgPropType = keyof PlasmicPaymentMethods__ArgsType;
export const PlasmicPaymentMethods__ArgProps = new Array<ArgPropType>();

export type PlasmicPaymentMethods__OverridesType = {
  root?: Flex__<"div">;
  embedHtml?: Flex__<typeof Embed>;
  sideEffectPageLoad?: Flex__<typeof SideEffect>;
  section?: Flex__<"section">;
  accordion?: Flex__<typeof AntdAccordion>;
  txtShowRpey2?: Flex__<typeof TextInput>;
  txtShowRpey3?: Flex__<typeof TextInput>;
  textShowIban?: Flex__<typeof TextInput>;
  txtShowRpey?: Flex__<typeof TextInput>;
  txtShowAmount?: Flex__<typeof TextInput>;
  dialog?: Flex__<typeof Dialog>;
  txtPayaRpey?: Flex__<typeof TextInput>;
  sideEffect?: Flex__<typeof SideEffect>;
  sideEffectAutoverify?: Flex__<typeof SideEffect>;
};

export interface DefaultPaymentMethodsProps {}

const $$ = {
  copyToClipboard: __lib_copyToClipboard
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPaymentMethods__RenderFunc(props: {
  variants: PlasmicPaymentMethods__VariantsArgs;
  args: PlasmicPaymentMethods__ArgsType;
  overrides: PlasmicPaymentMethods__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "waiting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "balance",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "paymentLink",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "accordion.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.balance >= $ctx.query.amount ? 0 : 1;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      },
      {
        path: "me",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "verifyResponse",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "textShowIban.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "340600481979808994170001"
      },
      {
        path: "txtShowRpey.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.me.users[0].id;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "dialog.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "txtPayaRpey.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "txtShowAmount.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return $ctx.query.amount - $state.balance > 0
                  ? $ctx.query.amount - $state.balance
                  : 0;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "iplocation",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "cardToCardRequest",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "waitingcardtocard",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "txtShowRpey2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.cardToCardRequest.new_price;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "txtShowRpey3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.cardToCardRequest.cardid;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "hasCardToCardRequest",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "cardToCardVerify",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "cardToCardHasVerify",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "cardToCardAutoCheck",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbr2UhI7UlpvR()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            plasmic_fragment_design_system_css.plasmic_tokens,
            sty.root
          )}
        >
          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml)}
            code={
              '<script type="text/javascript">\r\n    (function(c,l,a,r,i,t,y){\r\n        c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};\r\n        t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;\r\n        y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);\r\n    })(window, document, "clarity", "script", "rhalf4bl44");\r\n</script>'
            }
          />

          <SideEffect
            data-plasmic-name={"sideEffectPageLoad"}
            data-plasmic-override={overrides.sideEffectPageLoad}
            className={classNames("__wab_instance", sty.sideEffectPageLoad)}
            onMount={async () => {
              const $steps = {};

              $steps["updateWaiting"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["waiting"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateWaiting"] != null &&
                typeof $steps["updateWaiting"] === "object" &&
                typeof $steps["updateWaiting"].then === "function"
              ) {
                $steps["updateWaiting"] = await $steps["updateWaiting"];
              }

              $steps["me"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://apigw.paziresh24.com/v1/auth/me"
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["me"] != null &&
                typeof $steps["me"] === "object" &&
                typeof $steps["me"].then === "function"
              ) {
                $steps["me"] = await $steps["me"];
              }

              $steps["updateMe"] =
                $steps.me.status == 200
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["me"]
                        },
                        operation: 0,
                        value: $steps.me.data
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateMe"] != null &&
                typeof $steps["updateMe"] === "object" &&
                typeof $steps["updateMe"].then === "function"
              ) {
                $steps["updateMe"] = await $steps["updateMe"];
              }

              $steps["getBalance"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://apigw.paziresh24.com/katibe/v1/transactions/balance/p24"
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["getBalance"] != null &&
                typeof $steps["getBalance"] === "object" &&
                typeof $steps["getBalance"].then === "function"
              ) {
                $steps["getBalance"] = await $steps["getBalance"];
              }

              $steps["updateBalance"] =
                $steps.getBalance.status == 200
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["balance"]
                        },
                        operation: 0,
                        value: $steps.getBalance.data.data.balance
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateBalance"] != null &&
                typeof $steps["updateBalance"] === "object" &&
                typeof $steps["updateBalance"].then === "function"
              ) {
                $steps["updateBalance"] = await $steps["updateBalance"];
              }

              $steps["n8NSplunk"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        "GET",
                        "https://apigw.paziresh24.com/katibe/v1/payment/methods/load?type=load",
                        undefined,
                        undefined,
                        undefined
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["n8NSplunk"] != null &&
                typeof $steps["n8NSplunk"] === "object" &&
                typeof $steps["n8NSplunk"].then === "function"
              ) {
                $steps["n8NSplunk"] = await $steps["n8NSplunk"];
              }

              $steps["updateWaiting2"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["waiting"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateWaiting2"] != null &&
                typeof $steps["updateWaiting2"] === "object" &&
                typeof $steps["updateWaiting2"].then === "function"
              ) {
                $steps["updateWaiting2"] = await $steps["updateWaiting2"];
              }

              $steps["ipLocation"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://apigw.paziresh24.com/katibe/v1/ip-location"
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["ipLocation"] != null &&
                typeof $steps["ipLocation"] === "object" &&
                typeof $steps["ipLocation"].then === "function"
              ) {
                $steps["ipLocation"] = await $steps["ipLocation"];
              }

              $steps["updateIplocation"] =
                $steps.ipLocation.status == 200
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["iplocation"]
                        },
                        operation: 0,
                        value: $steps.ipLocation.data
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateIplocation"] != null &&
                typeof $steps["updateIplocation"] === "object" &&
                typeof $steps["updateIplocation"].then === "function"
              ) {
                $steps["updateIplocation"] = await $steps["updateIplocation"];
              }
            }}
          />

          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__wADcr)}>
              {(() => {
                const child$Props = {
                  activeKey: generateStateValueProp($state, [
                    "accordion",
                    "activePanelId"
                  ]),
                  bordered: false,
                  className: classNames("__wab_instance", sty.accordion),
                  defaultActiveKey: (() => {
                    try {
                      return $state.balance >= $ctx.query.amount ? 0 : 1;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })(),
                  expandIconPosition: "end",
                  ghost: false,
                  items: (
                    <React.Fragment>
                      <AntdAccordionItem
                        className={classNames(
                          "__wab_instance",
                          sty.accordionItem___8Gjun
                        )}
                        id={1}
                        label2={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__v5Xy
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__hPiUq
                              )}
                            >
                              <Icon49Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__fw30M
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__k4Fll
                                )}
                              >
                                {
                                  "\u067e\u0631\u062f\u0627\u062e\u062a \u0628\u0627 \u062f\u0631\u06af\u0627\u0647 \u067e\u0631\u062f\u0627\u062e\u062a"
                                }
                              </div>
                              {(() => {
                                try {
                                  return $state.waiting;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <Icon2Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__mqalF
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                            </div>
                          </div>
                        }
                        showArrow={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__hK6S5
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__iqfWt
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__eKwF3
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return $ctx.query.title || "عملیات پرداخت";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__xTKzb
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__gdSfj
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__zwUJe
                              )}
                            >
                              {"\u0645\u0628\u0644\u063a:"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__yseFz
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      new Intl.NumberFormat("fa-IR").format(
                                        $ctx.query.amount || 0
                                      ) + " ریال"
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__x99T1
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__jh3Bs
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__fOhSv
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "screen",
                                "mobileOnly"
                              )
                                ? "\u0645\u0648\u062c\u0648\u062f\u06cc \u06a9\u06cc\u0641 \u067e\u0648\u0644:"
                                : "\u0645\u0648\u062c\u0648\u062f\u06cc \u06a9\u06cc\u0641 \u067e\u0648\u0644:"}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__uUoCy
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      new Intl.NumberFormat("fa-IR").format(
                                        $state.balance || 0
                                      ) + " ریال"
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__au6T8
                          )}
                        >
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__sfTyP
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__bm6Te
                              )}
                            >
                              {
                                "\u0642\u0627\u0628\u0644 \u067e\u0631\u062f\u0627\u062e\u062a:"
                              }
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__aG9R2
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (() => {
                                      return $ctx.query.amount -
                                        $state.balance >
                                        0
                                        ? new Intl.NumberFormat("fa-IR").format(
                                            $ctx.query.amount -
                                              $state.balance || 0
                                          ) + " ریال"
                                        : "0 ریال";
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                          </Stack__>
                        </div>
                        {(() => {
                          try {
                            return (
                              $state.iplocation.length > 0 &&
                              $state.iplocation.toLowerCase().trim() != "iran"
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__x2KwW
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__eWHpU
                              )}
                            >
                              <Icon50Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__bW8Gj
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__bfbye
                                )}
                              >
                                {
                                  "\u06a9\u0627\u0631\u0628\u0631 \u06af\u0631\u0627\u0645\u06cc\u060c \u0628\u0647\u200c\u0646\u0638\u0631 \u0645\u06cc\u200c\u0631\u0633\u062f \u0641\u06cc\u0644\u062a\u0631\u0634\u06a9\u0646 \u06cc\u0627 VPN \u0634\u0645\u0627 \u0641\u0639\u0627\u0644 \u0627\u0633\u062a. \u0644\u0637\u0641\u0627\u064b \u0622\u0646 \u0631\u0627 \u062e\u0627\u0645\u0648\u0634 \u06a9\u0631\u062f\u0647 \u0648 \u0633\u067e\u0633 \u062f\u06a9\u0645\u0647 \u201c\u0627\u0631\u0633\u0627\u0644 \u0628\u0647 \u062f\u0631\u06af\u0627\u0647 \u067e\u0631\u062f\u0627\u062e\u062a\u201d \u0631\u0627 \u0628\u0632\u0646\u06cc\u062f."
                                }
                              </div>
                            </div>
                          </div>
                        ) : null}
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__vHu42
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__pc9Ej
                            )}
                          >
                            <Button
                              children2={
                                "\u0627\u0631\u0633\u0627\u0644 \u0628\u0647 \u062f\u0631\u06af\u0627\u0647 \u067e\u0631\u062f\u0627\u062e\u062a"
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.button__rYgx
                              )}
                              isDisabled={(() => {
                                try {
                                  return $state.waiting;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateWaiting"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["waiting"]
                                        },
                                        operation: 0,
                                        value: true
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateWaiting"] != null &&
                                  typeof $steps["updateWaiting"] === "object" &&
                                  typeof $steps["updateWaiting"].then ===
                                    "function"
                                ) {
                                  $steps["updateWaiting"] = await $steps[
                                    "updateWaiting"
                                  ];
                                }

                                $steps["paymentRequest"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          "POST",
                                          "https://apigw.paziresh24.com/katibe/v1/paymentlink/p24",
                                          (() => {
                                            try {
                                              return {
                                                productid: 1,
                                                returnlink:
                                                  $ctx.query.returnlink,
                                                cancel_returnlink:
                                                  globalThis.btoa(
                                                    "https://www.paziresh24.com/_/katibe/payments/?amount=" +
                                                      $ctx.query.amount +
                                                      "&returnlink=" +
                                                      $ctx.query.returnlink +
                                                      "&cancel_returnlink=" +
                                                      $ctx.query
                                                        .cancel_returnlink
                                                  ),
                                                title: "افزایش موجودی",
                                                amount:
                                                  $ctx.query.amount -
                                                  $state.balance,
                                                receipt_id: $ctx.query
                                                  .receipt_id
                                                  ? $ctx.query.receipt_id
                                                  : ""
                                              };
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.apiRequest"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["paymentRequest"] != null &&
                                  typeof $steps["paymentRequest"] ===
                                    "object" &&
                                  typeof $steps["paymentRequest"].then ===
                                    "function"
                                ) {
                                  $steps["paymentRequest"] = await $steps[
                                    "paymentRequest"
                                  ];
                                }

                                $steps["updatePaymentLink"] =
                                  $steps.paymentRequest.status == 200 &&
                                  $steps.paymentRequest.data.status == true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["paymentLink"]
                                          },
                                          operation: 0,
                                          value:
                                            $steps.paymentRequest.data.data.link
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["updatePaymentLink"] != null &&
                                  typeof $steps["updatePaymentLink"] ===
                                    "object" &&
                                  typeof $steps["updatePaymentLink"].then ===
                                    "function"
                                ) {
                                  $steps["updatePaymentLink"] = await $steps[
                                    "updatePaymentLink"
                                  ];
                                }

                                $steps["redirectUser"] =
                                  $steps.paymentRequest.status == 200 &&
                                  $steps.paymentRequest.data.status == true
                                    ? (() => {
                                        const actionArgs = {
                                          args: [
                                            (() => {
                                              try {
                                                return $state.paymentLink;
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()
                                          ]
                                        };
                                        return $globalActions[
                                          "Hamdast.openLink"
                                        ]?.apply(null, [...actionArgs.args]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["redirectUser"] != null &&
                                  typeof $steps["redirectUser"] === "object" &&
                                  typeof $steps["redirectUser"].then ===
                                    "function"
                                ) {
                                  $steps["redirectUser"] = await $steps[
                                    "redirectUser"
                                  ];
                                }

                                $steps["updateWaiting2"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["waiting"]
                                        },
                                        operation: 0,
                                        value: false
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateWaiting2"] != null &&
                                  typeof $steps["updateWaiting2"] ===
                                    "object" &&
                                  typeof $steps["updateWaiting2"].then ===
                                    "function"
                                ) {
                                  $steps["updateWaiting2"] = await $steps[
                                    "updateWaiting2"
                                  ];
                                }
                              }}
                              size={"compact"}
                            />
                          </div>
                        </div>
                      </AntdAccordionItem>
                      <AntdAccordionItem
                        className={classNames(
                          "__wab_instance",
                          sty.accordionItem__u9Sgw
                        )}
                        destroyInactivePanel={false}
                        forceRender={false}
                        headerClass={classNames({
                          [sty["pcls_-RFVdqtXGKe3"]]: true
                        })}
                        id={2}
                        label2={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__zwLuL
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___2Bhd6
                              )}
                            >
                              <Icon51Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___6RAGg
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__chiep
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return "پرداخت کارت به کارت";
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "\u067e\u0631\u062f\u0627\u062e\u062a \u06a9\u0627\u0631\u062a \u0628\u0647 \u06a9\u0627\u0631\u062a";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              {(() => {
                                try {
                                  return $state.waitingcardtocard;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <Icon2Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg___1CiFe
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                            </div>
                          </div>
                        }
                        showArrow={true}
                      >
                        {(() => {
                          try {
                            return $state.cardToCardRequest?.factorid;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__p6G2K
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__yZtl
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__cZn4Q
                                )}
                              >
                                {
                                  "\u062f\u0631 \u0635\u0648\u0631\u062a\u06cc \u06a9\u0647 \u0627\u0645\u06a9\u0627\u0646 \u067e\u0631\u062f\u0627\u062e\u062a \u0628\u0627 \u062f\u0631\u06af\u0627\u0647\u200c\u067e\u0631\u062f\u0627\u062e\u062a \u0646\u062f\u0627\u0631\u06cc\u062f\u060c \u0645\u06cc\u200c\u062a\u0648\u0627\u0646\u06cc\u062f \u0645\u0628\u0644\u063a \u0645\u0634\u062e\u0635 \u0634\u062f\u0647 \u0632\u06cc\u0631 \u0631\u0627 \u06a9\u0627\u0631\u062a \u0628\u0647 \u06a9\u0627\u0631\u062a \u06a9\u0631\u062f\u0647 \u0648 \u0633\u067e\u0633 \u062f\u06a9\u0645\u0647 \u0628\u0631\u0631\u0633\u06cc \u0631\u0627 \u0628\u0632\u0646\u06cc\u062f."
                                }
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__wYe6N
                              )}
                            >
                              <Icon50Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___0ZGaE
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___9ZY1T
                                )}
                              >
                                {hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                ) ? (
                                  <React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{
                                        color: "var(--token-fDNuFs9Skt3p)",
                                        fontWeight: 700
                                      }}
                                    >
                                      {
                                        "\u062f\u0642\u06cc\u0642\u0627 \u0645\u0628\u0644\u063a \u0632\u06cc\u0631 \u0631\u0627 \u06a9\u0627\u0631\u062a \u0628\u0647 \u06a9\u0627\u0631\u062a \u06a9\u0646\u06cc\u062f."
                                      }
                                    </span>
                                    <React.Fragment>{"\n"}</React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{
                                        color: "var(--token-HEGGDBNcnkKS)",
                                        fontWeight: 300
                                      }}
                                    >
                                      {
                                        "\u00a0\u062f\u0631 \u063a\u06cc\u0631 \u0627\u06cc\u0646\u0635\u0648\u0631\u062a (\u062d\u062a\u06cc \u06cc\u06a9 \u0631\u06cc\u0627\u0644 \u06a9\u0645\u062a\u0631 \u06cc\u0627 \u0628\u06cc\u0634\u062a\u0631)\u060c \u0646\u0648\u0628\u062a \u0634\u0645\u0627 \u062a\u0627\u06cc\u06cc\u062f \u0646\u062e\u0648\u0627\u0647\u062f \u0634\u062f."
                                      }
                                    </span>
                                  </React.Fragment>
                                ) : (
                                  <React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{
                                        color: "var(--token-fDNuFs9Skt3p)",
                                        fontWeight: 700
                                      }}
                                    >
                                      {
                                        "\u062f\u0642\u06cc\u0642\u0627 \u0645\u0628\u0644\u063a \u0632\u06cc\u0631 \u0631\u0627 \u06a9\u0627\u0631\u062a \u0628\u0647 \u06a9\u0627\u0631\u062a \u06a9\u0646\u06cc\u062f."
                                      }
                                    </span>
                                    <React.Fragment>{""}</React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{
                                        color: "var(--token-HEGGDBNcnkKS)"
                                      }}
                                    >
                                      {
                                        " \u062f\u0631 \u063a\u06cc\u0631 \u0627\u06cc\u0646\u0635\u0648\u0631\u062a (\u062d\u062a\u06cc \u06cc\u06a9 \u0631\u06cc\u0627\u0644 \u06a9\u0645\u062a\u0631 \u06cc\u0627 \u0628\u06cc\u0634\u062a\u0631)\u060c \u0646\u0648\u0628\u062a \u0634\u0645\u0627 \u062a\u0627\u06cc\u06cc\u062f \u0646\u062e\u0648\u0627\u0647\u062f \u0634\u062f."
                                      }
                                    </span>
                                  </React.Fragment>
                                )}
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__fuvW4
                              )}
                            >
                              <Icon50Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__txqH
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__qjHm
                                )}
                              >
                                {hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                ) ? (
                                  <React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{
                                        color: "var(--token-HEGGDBNcnkKS)"
                                      }}
                                    >
                                      {
                                        "\u06a9\u0627\u0631\u0628\u0631 \u06af\u0631\u0627\u0645\u06cc\u060c \u0628\u0631\u0631\u0633\u06cc \u0635\u062d\u062a \u062a\u0631\u0627\u06a9\u0646\u0634 \u0628\u0647\u200c\u0635\u0648\u0631\u062a \u062e\u0648\u062f\u06a9\u0627\u0631 \u0627\u0646\u062c\u0627\u0645 \u0645\u06cc\u200c\u0634\u0648\u062f \u0648 \u0645\u06cc\u0632\u0627\u0646 \u067e\u0631\u062f\u0627\u062e\u062a\u06cc \u0628\u0627\u06cc\u062f "
                                      }
                                    </span>
                                    <React.Fragment>{""}</React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{
                                        color: "var(--token--ypw6enySR1T)"
                                      }}
                                    >
                                      {
                                        "\u062f\u0642\u06cc\u0642\u0627\u064b \u0628\u0631\u0627\u0628\u0631 \u0628\u0627 \u0645\u0628\u0644\u063a \u06a9\u0627\u0631\u062a \u0628\u0647 \u06a9\u0627\u0631\u062a"
                                      }
                                    </span>
                                    <React.Fragment>{""}</React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{
                                        color: "var(--token-HEGGDBNcnkKS)"
                                      }}
                                    >
                                      {
                                        "\u00a0\u00a0 \u0628\u0627\u0634\u062f. \u062f\u0631 \u0635\u0648\u0631\u062a \u0645\u063a\u0627\u06cc\u0631\u062a (\u06cc\u06a9 \u0631\u06cc\u0627\u0644 \u06a9\u0645\u062a\u0631 \u06cc\u0627 \u0628\u06cc\u0634\u062a\u0631)\u060c \u062a\u0627\u06cc\u06cc\u062f \u0627\u0646\u062c\u0627\u0645 \u0646\u062e\u0648\u0627\u0647\u062f \u0634\u062f."
                                      }
                                    </span>
                                  </React.Fragment>
                                ) : (
                                  <React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{
                                        color: "var(--token-HEGGDBNcnkKS)"
                                      }}
                                    >
                                      {
                                        "\u06a9\u0627\u0631\u0628\u0631 \u06af\u0631\u0627\u0645\u06cc\u060c \u062a\u0627\u06cc\u06cc\u062f \u06a9\u0627\u0631\u062a \u0628\u0647 \u06a9\u0627\u0631\u062a \u0628\u0647\u200c\u0635\u0648\u0631\u062a \u062e\u0648\u062f\u06a9\u0627\u0631 \u0627\u0646\u062c\u0627\u0645 \u0645\u06cc\u200c\u0634\u0648\u062f \u0648 \u0645\u06cc\u0632\u0627\u0646 \u067e\u0631\u062f\u0627\u062e\u062a\u06cc \u0628\u0627\u06cc\u062f "
                                      }
                                    </span>
                                    <React.Fragment>{""}</React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{
                                        color: "var(--token--ypw6enySR1T)"
                                      }}
                                    >
                                      {
                                        "\u062f\u0642\u06cc\u0642\u0627\u064b \u0628\u0631\u0627\u0628\u0631 \u0628\u0627 \u0645\u0628\u0644\u063a \u0632\u06cc\u0631"
                                      }
                                    </span>
                                    <React.Fragment>{""}</React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{
                                        color: "var(--token-HEGGDBNcnkKS)"
                                      }}
                                    >
                                      {
                                        " \u0628\u0627\u0634\u062f. \u062f\u0631 \u0635\u0648\u0631\u062a \u0645\u063a\u0627\u06cc\u0631\u062a (\u06cc\u06a9 \u0631\u06cc\u0627\u0644 \u06a9\u0645\u062a\u0631 \u06cc\u0627 \u0628\u06cc\u0634\u062a\u0631)\u060c \u062a\u0627\u06cc\u06cc\u062f \u0627\u0646\u062c\u0627\u0645 \u0646\u062e\u0648\u0627\u0647\u062f \u0634\u062f."
                                      }
                                    </span>
                                  </React.Fragment>
                                )}
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__aJ4Co
                              )}
                            >
                              <Icon50Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___4Iz1W
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__fdjuw
                                )}
                              >
                                {hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                ) ? (
                                  <React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{
                                        color: "var(--token-HEGGDBNcnkKS)"
                                      }}
                                    >
                                      {
                                        "\u0646\u0648\u0628\u062a \u0634\u0645\u0627 \u067e\u0633 \u0627\u0632 \u062a\u0627\u06cc\u06cc\u062f \u06a9\u0627\u0631\u062a \u0628\u0647 \u06a9\u0627\u0631\u062a \u062b\u0628\u062a \u062e\u0648\u0627\u0647\u062f \u0634\u062f."
                                      }
                                    </span>
                                  </React.Fragment>
                                ) : (
                                  <React.Fragment>
                                    <span
                                      className={
                                        "plasmic_default__all plasmic_default__span"
                                      }
                                      style={{
                                        color: "var(--token-HEGGDBNcnkKS)"
                                      }}
                                    >
                                      {
                                        "\u0646\u0648\u0628\u062a \u0634\u0645\u0627 \u067e\u0633 \u0627\u0632 \u062a\u0627\u06cc\u06cc\u062f \u06a9\u0627\u0631\u062a \u0628\u0647 \u06a9\u0627\u0631\u062a \u062b\u0628\u062a \u062e\u0648\u0627\u0647\u062f \u0634\u062f."
                                      }
                                    </span>
                                  </React.Fragment>
                                )}
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__nRvg
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__js6Vg
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__slmnb
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__mOr6T
                                    )}
                                  >
                                    {"\u0645\u0628\u0644\u063a:"}
                                  </div>
                                  <TextInput
                                    data-plasmic-name={"txtShowRpey2"}
                                    data-plasmic-override={
                                      overrides.txtShowRpey2
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.txtShowRpey2
                                    )}
                                    isDisabled={true}
                                    onChange={async (...eventArgs: any) => {
                                      ((...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "txtShowRpey2",
                                          "value"
                                        ])(
                                          (e => e.target?.value).apply(
                                            null,
                                            eventArgs
                                          )
                                        );
                                      }).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    }}
                                    placeholder={``}
                                    value={
                                      generateStateValueProp($state, [
                                        "txtShowRpey2",
                                        "value"
                                      ]) ?? ""
                                    }
                                  />

                                  <Icon48Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__qXp0I
                                    )}
                                    onClick={async event => {
                                      const $steps = {};

                                      $steps["runCode"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              customFunction: async () => {
                                                return $$.copyToClipboard(
                                                  $state.cardToCardRequest
                                                    .new_price
                                                );
                                              }
                                            };
                                            return (({ customFunction }) => {
                                              return customFunction();
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["runCode"] != null &&
                                        typeof $steps["runCode"] === "object" &&
                                        typeof $steps["runCode"].then ===
                                          "function"
                                      ) {
                                        $steps["runCode"] = await $steps[
                                          "runCode"
                                        ];
                                      }

                                      $steps["invokeGlobalAction"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              args: [
                                                undefined,
                                                "\u0645\u0628\u0644\u063a \u06a9\u067e\u06cc \u0634\u062f."
                                              ]
                                            };
                                            return $globalActions[
                                              "Fragment.showToast"
                                            ]?.apply(null, [
                                              ...actionArgs.args
                                            ]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["invokeGlobalAction"] != null &&
                                        typeof $steps["invokeGlobalAction"] ===
                                          "object" &&
                                        typeof $steps["invokeGlobalAction"]
                                          .then === "function"
                                      ) {
                                        $steps["invokeGlobalAction"] =
                                          await $steps["invokeGlobalAction"];
                                      }
                                    }}
                                    role={"img"}
                                  />
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___9ZCsp
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__gyNYl
                                    )}
                                  >
                                    {
                                      "\u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a:"
                                    }
                                  </div>
                                  <TextInput
                                    data-plasmic-name={"txtShowRpey3"}
                                    data-plasmic-override={
                                      overrides.txtShowRpey3
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.txtShowRpey3
                                    )}
                                    isDisabled={true}
                                    onChange={async (...eventArgs: any) => {
                                      ((...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "txtShowRpey3",
                                          "value"
                                        ])(
                                          (e => e.target?.value).apply(
                                            null,
                                            eventArgs
                                          )
                                        );
                                      }).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    }}
                                    placeholder={``}
                                    value={
                                      generateStateValueProp($state, [
                                        "txtShowRpey3",
                                        "value"
                                      ]) ?? ""
                                    }
                                  />

                                  <Icon48Icon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__mkkEg
                                    )}
                                    onClick={async event => {
                                      const $steps = {};

                                      $steps["runCode"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              customFunction: async () => {
                                                return $$.copyToClipboard(
                                                  $state.cardToCardRequest
                                                    .cardid
                                                );
                                              }
                                            };
                                            return (({ customFunction }) => {
                                              return customFunction();
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["runCode"] != null &&
                                        typeof $steps["runCode"] === "object" &&
                                        typeof $steps["runCode"].then ===
                                          "function"
                                      ) {
                                        $steps["runCode"] = await $steps[
                                          "runCode"
                                        ];
                                      }

                                      $steps["invokeGlobalAction"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              args: [
                                                undefined,
                                                "\u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a \u06a9\u067e\u06cc \u0634\u062f."
                                              ]
                                            };
                                            return $globalActions[
                                              "Fragment.showToast"
                                            ]?.apply(null, [
                                              ...actionArgs.args
                                            ]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["invokeGlobalAction"] != null &&
                                        typeof $steps["invokeGlobalAction"] ===
                                          "object" &&
                                        typeof $steps["invokeGlobalAction"]
                                          .then === "function"
                                      ) {
                                        $steps["invokeGlobalAction"] =
                                          await $steps["invokeGlobalAction"];
                                      }
                                    }}
                                    role={"img"}
                                  />
                                </div>
                              </div>
                            </div>
                          </div>
                        ) : null}
                        {(() => {
                          try {
                            return $state.cardToCardRequest?.factorid;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__dAfm
                            )}
                          >
                            {(() => {
                              try {
                                return (
                                  $state.cardToCardHasVerify &&
                                  $state.cardToCardVerify.status == false
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__nKrse
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___1S9Tj
                                  )}
                                >
                                  <React.Fragment>
                                    <React.Fragment>
                                      {
                                        "\u0647\u0646\u0648\u0632 \u0645\u0628\u0644\u063a \u0645\u0648\u0631\u062f \u0646\u0638\u0631 \u067e\u0631\u062f\u0627\u062e\u062a \u0646\u0634\u062f\u0647 \u0627\u0633\u062a. \u0627\u06af\u0631 \u067e\u0631\u062f\u0627\u062e\u062a \u062e\u0648\u062f \u0631\u0627 \u0627\u0646\u062c\u0627\u0645 \u062f\u0627\u062f\u0647\u200c\u0627\u06cc\u062f\u060c \u0644\u0637\u0641\u0627\u064b \u062f\u0648\u0628\u0627\u0631\u0647 \u062f\u06a9\u0645\u0647 \u201c\u0628\u0631\u0631\u0633\u06cc \u06a9\u0627\u0631\u062a \u0628\u0647 \u06a9\u0627\u0631\u062a\u201d \u0631\u0627 \u0628\u0632\u0646\u06cc\u062f \u06cc\u0627 \u0631\u0633\u06cc\u062f \u067e\u0631\u062f\u0627\u062e\u062a \u0631\u0627 \u0628\u0647 \u0634\u0645\u0627\u0631\u0647  "
                                      }
                                    </React.Fragment>
                                    {
                                      <PlasmicLink__
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.a,
                                          projectcss.__wab_text,
                                          projectcss.plasmic_default__inline,
                                          sty.link__uNn13
                                        )}
                                        component={Link}
                                        href={"tel:09384487404"}
                                        platform={"nextjs"}
                                      >
                                        {"09384487404"}
                                      </PlasmicLink__>
                                    }
                                    <React.Fragment>
                                      {
                                        " \u062f\u0631 \u0648\u0627\u062a\u0633\u0627\u067e \u0627\u0631\u0633\u0627\u0644 \u06a9\u0646\u06cc\u062f."
                                      }
                                    </React.Fragment>
                                  </React.Fragment>
                                </div>
                              </div>
                            ) : null}
                            {(() => {
                              try {
                                return (
                                  $state.cardToCardHasVerify &&
                                  $state.cardToCardVerify.status == true
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__iJfeu
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__qWjmB
                                  )}
                                >
                                  {
                                    "\u067e\u0631\u062f\u0627\u062e\u062a \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0627\u0646\u062c\u0627\u0645 \u0634\u062f."
                                  }
                                </div>
                              </div>
                            ) : null}
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__j2J4Y
                              )}
                            >
                              <Button
                                children2={
                                  "\u0628\u0631\u0631\u0633\u06cc \u06a9\u0627\u0631\u062a \u0628\u0647 \u06a9\u0627\u0631\u062a"
                                }
                                className={classNames(
                                  "__wab_instance",
                                  sty.button__psvuj
                                )}
                                isDisabled={(() => {
                                  try {
                                    return $state.waitingcardtocard;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["cardToCardVerifyNull"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["cardToCardVerify"]
                                          },
                                          operation: 0,
                                          value: {}
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["cardToCardVerifyNull"] != null &&
                                    typeof $steps["cardToCardVerifyNull"] ===
                                      "object" &&
                                    typeof $steps["cardToCardVerifyNull"]
                                      .then === "function"
                                  ) {
                                    $steps["cardToCardVerifyNull"] =
                                      await $steps["cardToCardVerifyNull"];
                                  }

                                  $steps["updateWaitingcardtocard"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["waitingcardtocard"]
                                          },
                                          operation: 0,
                                          value: true
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateWaitingcardtocard"] != null &&
                                    typeof $steps["updateWaitingcardtocard"] ===
                                      "object" &&
                                    typeof $steps["updateWaitingcardtocard"]
                                      .then === "function"
                                  ) {
                                    $steps["updateWaitingcardtocard"] =
                                      await $steps["updateWaitingcardtocard"];
                                  }

                                  $steps["verify"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          args: [
                                            undefined,
                                            "https://apigw.paziresh24.com/katibe/v1/payment/p24/cardtocard/verify",
                                            (() => {
                                              try {
                                                return {
                                                  factorid:
                                                    $state.cardToCardRequest
                                                      .factorid,
                                                  number:
                                                    $state.cardToCardAutoCheck +
                                                    "" +
                                                    Math.floor(
                                                      Math.random() * 1000
                                                    )
                                                };
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()
                                          ]
                                        };
                                        return $globalActions[
                                          "Fragment.apiRequest"
                                        ]?.apply(null, [...actionArgs.args]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["verify"] != null &&
                                    typeof $steps["verify"] === "object" &&
                                    typeof $steps["verify"].then === "function"
                                  ) {
                                    $steps["verify"] = await $steps["verify"];
                                  }

                                  $steps["updateCardToCardVerify"] =
                                    $steps.verify.status == 200
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["cardToCardVerify"]
                                            },
                                            operation: 0,
                                            value: $steps.verify.data
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["updateCardToCardVerify"] != null &&
                                    typeof $steps["updateCardToCardVerify"] ===
                                      "object" &&
                                    typeof $steps["updateCardToCardVerify"]
                                      .then === "function"
                                  ) {
                                    $steps["updateCardToCardVerify"] =
                                      await $steps["updateCardToCardVerify"];
                                  }

                                  $steps["updateCardToCardHasVerify"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: [
                                              "cardToCardHasVerify"
                                            ]
                                          },
                                          operation: 0,
                                          value: true
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateCardToCardHasVerify"] !=
                                      null &&
                                    typeof $steps[
                                      "updateCardToCardHasVerify"
                                    ] === "object" &&
                                    typeof $steps["updateCardToCardHasVerify"]
                                      .then === "function"
                                  ) {
                                    $steps["updateCardToCardHasVerify"] =
                                      await $steps["updateCardToCardHasVerify"];
                                  }

                                  $steps["updateWaitingcardtocard2"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["waitingcardtocard"]
                                          },
                                          operation: 0,
                                          value: false
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["updateWaitingcardtocard2"] !=
                                      null &&
                                    typeof $steps[
                                      "updateWaitingcardtocard2"
                                    ] === "object" &&
                                    typeof $steps["updateWaitingcardtocard2"]
                                      .then === "function"
                                  ) {
                                    $steps["updateWaitingcardtocard2"] =
                                      await $steps["updateWaitingcardtocard2"];
                                  }

                                  $steps["redirect"] =
                                    $state.cardToCardVerify.status == true
                                      ? (() => {
                                          const actionArgs = {
                                            args: [
                                              (() => {
                                                try {
                                                  return $ctx.query.returnlink
                                                    ? globalThis
                                                        .atob(
                                                          $ctx.query.returnlink
                                                        )
                                                        .includes("?")
                                                      ? globalThis.atob(
                                                          $ctx.query.returnlink
                                                        ) + "&status=true"
                                                      : globalThis.atob(
                                                          $ctx.query.returnlink
                                                        ) + "?status=true"
                                                    : "https://www.paziresh24.com/dashboard/appointments/";
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()
                                            ]
                                          };
                                          return $globalActions[
                                            "Hamdast.openLink"
                                          ]?.apply(null, [...actionArgs.args]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["redirect"] != null &&
                                    typeof $steps["redirect"] === "object" &&
                                    typeof $steps["redirect"].then ===
                                      "function"
                                  ) {
                                    $steps["redirect"] = await $steps[
                                      "redirect"
                                    ];
                                  }
                                }}
                                size={"compact"}
                              />
                            </div>
                          </div>
                        ) : null}
                      </AntdAccordionItem>
                      <AntdAccordionItem
                        className={classNames(
                          "__wab_instance",
                          sty.accordionItem__gAtO
                        )}
                        id={"3"}
                        label2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__cR8FC
                            )}
                          >
                            {
                              "\u067e\u0631\u062f\u0627\u062e\u062a \u067e\u0627\u06cc\u0627/\u067e\u064f\u0644"
                            }
                          </div>
                        }
                        showArrow={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__abHoO
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ttcF
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__hBa52
                              )}
                            >
                              {
                                "\u062f\u0631\u0635\u0648\u0631\u062a\u06cc \u06a9\u0647 \u0627\u0645\u06a9\u0627\u0646 \u067e\u0631\u062f\u0627\u062e\u062a \u0628\u0627 \u062f\u0631\u06af\u0627\u0647 \u067e\u0631\u062f\u0627\u062e\u062a \u0631\u0627 \u0646\u062f\u0627\u0631\u06cc\u062f\u060c \u0644\u0637\u0641\u0627 \u0645\u0628\u0644\u063a \u0642\u0627\u0628\u0644 \u067e\u0631\u062f\u0627\u062e\u062a \u0631\u0627 \u0628\u0647 \u0634\u0628\u0627 \u0632\u06cc\u0631 \u0628\u0647\u200c\u0635\u0648\u0631\u062a \u067e\u0627\u06cc\u0627/\u067e\u064f\u0644 \u0628\u0627 \u0634\u0646\u0627\u0633\u0647 \u067e\u0631\u062f\u0627\u062e\u062a \u0648\u0627\u0631\u06cc\u0632 \u06a9\u0631\u062f\u0647 \u0648 \u0633\u067e\u0633 \u062f\u06a9\u0645\u0647 \u0628\u0631\u0631\u0633\u06cc \u067e\u0631\u062f\u0627\u062e\u062a \u0631\u0627 \u06a9\u0644\u06cc\u06a9 \u0646\u0645\u0627\u06cc\u06cc\u062f."
                              }
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__fkxfa
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {
                                    "\u0644\u0637\u0641\u0627\u064b \u062a\u0648\u062c\u0647 \u062f\u0627\u0634\u062a\u0647 \u0628\u0627\u0634\u06cc\u062f \u06a9\u0647 \u062a\u0627\u06cc\u06cc\u062f \u067e\u0631\u062f\u0627\u062e\u062a\u060c \u0645\u0642\u062f\u0627\u0631\u06cc \u0632\u0645\u0627\u0646\u200c\u0628\u0631 \u062e\u0648\u0627\u0647\u062f \u0628\u0648\u062f."
                                  }
                                </span>
                              </React.Fragment>
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__j6U
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___0Gopl
                              )}
                            >
                              {
                                "\u0634\u0645\u0627\u0631\u0647 \u0634\u0628\u0627:"
                              }
                            </div>
                            <TextInput
                              data-plasmic-name={"textShowIban"}
                              data-plasmic-override={overrides.textShowIban}
                              className={classNames(
                                "__wab_instance",
                                sty.textShowIban
                              )}
                              isDisabled={true}
                              onChange={async (...eventArgs: any) => {
                                ((...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "textShowIban",
                                    "value"
                                  ])(
                                    (e => e.target?.value).apply(
                                      null,
                                      eventArgs
                                    )
                                  );
                                }).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                              placeholder={``}
                              value={
                                generateStateValueProp($state, [
                                  "textShowIban",
                                  "value"
                                ]) ?? ""
                              }
                            />

                            <Icon48Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__zx7YB
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["runCode"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return $$.copyToClipboard(
                                            $state.textShowIban.value
                                          );
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["runCode"] != null &&
                                  typeof $steps["runCode"] === "object" &&
                                  typeof $steps["runCode"].then === "function"
                                ) {
                                  $steps["runCode"] = await $steps["runCode"];
                                }

                                $steps["invokeGlobalAction"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          undefined,
                                          "\u0634\u0645\u0627\u0631\u0647 \u0634\u0628\u0627 \u06a9\u067e\u06cc \u0634\u062f."
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.showToast"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["invokeGlobalAction"] != null &&
                                  typeof $steps["invokeGlobalAction"] ===
                                    "object" &&
                                  typeof $steps["invokeGlobalAction"].then ===
                                    "function"
                                ) {
                                  $steps["invokeGlobalAction"] = await $steps[
                                    "invokeGlobalAction"
                                  ];
                                }
                              }}
                              role={"img"}
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__c63Bw
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__yrJg
                              )}
                            >
                              {
                                "\u0634\u0646\u0627\u0633\u0647 \u067e\u0631\u062f\u0627\u062e\u062a:"
                              }
                            </div>
                            <TextInput
                              data-plasmic-name={"txtShowRpey"}
                              data-plasmic-override={overrides.txtShowRpey}
                              className={classNames(
                                "__wab_instance",
                                sty.txtShowRpey
                              )}
                              isDisabled={true}
                              onChange={async (...eventArgs: any) => {
                                ((...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "txtShowRpey",
                                    "value"
                                  ])(
                                    (e => e.target?.value).apply(
                                      null,
                                      eventArgs
                                    )
                                  );
                                }).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                              placeholder={``}
                              value={
                                generateStateValueProp($state, [
                                  "txtShowRpey",
                                  "value"
                                ]) ?? ""
                              }
                            />

                            <Icon48Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___1Oe0X
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["runCode"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return $$.copyToClipboard(
                                            $state.txtShowRpey.value
                                          );
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["runCode"] != null &&
                                  typeof $steps["runCode"] === "object" &&
                                  typeof $steps["runCode"].then === "function"
                                ) {
                                  $steps["runCode"] = await $steps["runCode"];
                                }

                                $steps["invokeGlobalAction"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          undefined,
                                          "\u0634\u0646\u0627\u0633\u0647 \u067e\u0631\u062f\u0627\u062e\u062a \u06a9\u067e\u06cc \u0634\u062f."
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.showToast"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["invokeGlobalAction"] != null &&
                                  typeof $steps["invokeGlobalAction"] ===
                                    "object" &&
                                  typeof $steps["invokeGlobalAction"].then ===
                                    "function"
                                ) {
                                  $steps["invokeGlobalAction"] = await $steps[
                                    "invokeGlobalAction"
                                  ];
                                }
                              }}
                              role={"img"}
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__leDkh
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___2Ha0Y
                              )}
                            >
                              {"\u0645\u0628\u0644\u063a:"}
                            </div>
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  "__wab_instance",
                                  sty.txtShowAmount
                                ),
                                isDisabled: true,
                                onChange: async (...eventArgs: any) => {
                                  ((...eventArgs) => {
                                    generateStateOnChangeProp($state, [
                                      "txtShowAmount",
                                      "value"
                                    ])(
                                      (e => e.target?.value).apply(
                                        null,
                                        eventArgs
                                      )
                                    );
                                  }).apply(null, eventArgs);

                                  if (
                                    eventArgs.length > 1 &&
                                    eventArgs[1] &&
                                    eventArgs[1]._plasmic_state_init_
                                  ) {
                                    return;
                                  }
                                },
                                placeholder: ``,
                                value:
                                  generateStateValueProp($state, [
                                    "txtShowAmount",
                                    "value"
                                  ]) ?? ""
                              };

                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "txtShowAmount.value",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      (() => {
                                        try {
                                          return (() => {
                                            return $ctx.query.amount -
                                              $state.balance >
                                              0
                                              ? $ctx.query.amount -
                                                  $state.balance
                                              : 0;
                                          })();
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                  }
                                ],
                                []
                              );
                              return (
                                <TextInput
                                  data-plasmic-name={"txtShowAmount"}
                                  data-plasmic-override={
                                    overrides.txtShowAmount
                                  }
                                  {...child$Props}
                                />
                              );
                            })()}
                            <Icon48Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___0Dq3G
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["runCode"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return $$.copyToClipboard(
                                            $state.txtShowAmount.value
                                          );
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["runCode"] != null &&
                                  typeof $steps["runCode"] === "object" &&
                                  typeof $steps["runCode"].then === "function"
                                ) {
                                  $steps["runCode"] = await $steps["runCode"];
                                }

                                $steps["invokeGlobalAction"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          undefined,
                                          "\u0645\u0628\u0644\u063a \u06a9\u067e\u06cc \u0634\u062f."
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.showToast"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["invokeGlobalAction"] != null &&
                                  typeof $steps["invokeGlobalAction"] ===
                                    "object" &&
                                  typeof $steps["invokeGlobalAction"].then ===
                                    "function"
                                ) {
                                  $steps["invokeGlobalAction"] = await $steps[
                                    "invokeGlobalAction"
                                  ];
                                }
                              }}
                              role={"img"}
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__mj9Bp
                            )}
                          >
                            <Dialog
                              data-plasmic-name={"dialog"}
                              data-plasmic-override={overrides.dialog}
                              body={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__ndTvO
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox___4Qy0P
                                    )}
                                  >
                                    <TextInput
                                      data-plasmic-name={"txtPayaRpey"}
                                      data-plasmic-override={
                                        overrides.txtPayaRpey
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.txtPayaRpey
                                      )}
                                      onChange={async (...eventArgs: any) => {
                                        ((...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "txtPayaRpey",
                                            "value"
                                          ])(
                                            (e => e.target?.value).apply(
                                              null,
                                              eventArgs
                                            )
                                          );
                                        }).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      }}
                                      placeholder={
                                        "\u0644\u0637\u0641\u0627 \u0634\u0646\u0627\u0633\u0647 \u067e\u06cc\u06af\u06cc\u0631\u06cc \u067e\u0631\u062f\u0627\u062e\u062a \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
                                      }
                                      value={
                                        generateStateValueProp($state, [
                                          "txtPayaRpey",
                                          "value"
                                        ]) ?? ""
                                      }
                                    />
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__td780
                                    )}
                                  >
                                    <Button
                                      children2={
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__uftoF
                                          )}
                                        >
                                          {
                                            "\u0628\u0631\u0631\u0633\u06cc \u067e\u0631\u062f\u0627\u062e\u062a"
                                          }
                                        </div>
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button__fdn28
                                      )}
                                      isDisabled={(() => {
                                        try {
                                          return (
                                            $state.txtPayaRpey.value.length == 0
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [];
                                          }
                                          throw e;
                                        }
                                      })()}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps["updateWaiting"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["waiting"]
                                                },
                                                operation: 0,
                                                value: true
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateWaiting"] != null &&
                                          typeof $steps["updateWaiting"] ===
                                            "object" &&
                                          typeof $steps["updateWaiting"]
                                            .then === "function"
                                        ) {
                                          $steps["updateWaiting"] =
                                            await $steps["updateWaiting"];
                                        }

                                        $steps["requestVerify"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                args: [
                                                  "POST",
                                                  "https://apigw.paziresh24.com/katibe/v1/payment/methods/verify",
                                                  undefined,
                                                  (() => {
                                                    try {
                                                      return {
                                                        method: "paya",
                                                        rpey: $state.txtPayaRpey
                                                          .value
                                                      };
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return {
                                                          method: "paya"
                                                        };
                                                      }
                                                      throw e;
                                                    }
                                                  })()
                                                ]
                                              };
                                              return $globalActions[
                                                "Fragment.apiRequest"
                                              ]?.apply(null, [
                                                ...actionArgs.args
                                              ]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["requestVerify"] != null &&
                                          typeof $steps["requestVerify"] ===
                                            "object" &&
                                          typeof $steps["requestVerify"]
                                            .then === "function"
                                        ) {
                                          $steps["requestVerify"] =
                                            await $steps["requestVerify"];
                                        }

                                        $steps["verifyResponse"] =
                                          $steps.requestVerify.status == 200
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "verifyResponse"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value:
                                                    $steps.requestVerify.data
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps["verifyResponse"] != null &&
                                          typeof $steps["verifyResponse"] ===
                                            "object" &&
                                          typeof $steps["verifyResponse"]
                                            .then === "function"
                                        ) {
                                          $steps["verifyResponse"] =
                                            await $steps["verifyResponse"];
                                        }

                                        $steps["updateWaiting2"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["waiting"]
                                                },
                                                operation: 0,
                                                value: false
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateWaiting2"] != null &&
                                          typeof $steps["updateWaiting2"] ===
                                            "object" &&
                                          typeof $steps["updateWaiting2"]
                                            .then === "function"
                                        ) {
                                          $steps["updateWaiting2"] =
                                            await $steps["updateWaiting2"];
                                        }

                                        $steps["alertSuccess"] =
                                          $steps.requestVerify.status == 200
                                            ? (() => {
                                                const actionArgs = {
                                                  args: [
                                                    undefined,
                                                    (() => {
                                                      try {
                                                        return $state
                                                          .verifyResponse
                                                          .message;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })()
                                                  ]
                                                };
                                                return $globalActions[
                                                  "Fragment.showToast"
                                                ]?.apply(null, [
                                                  ...actionArgs.args
                                                ]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps["alertSuccess"] != null &&
                                          typeof $steps["alertSuccess"] ===
                                            "object" &&
                                          typeof $steps["alertSuccess"].then ===
                                            "function"
                                        ) {
                                          $steps["alertSuccess"] = await $steps[
                                            "alertSuccess"
                                          ];
                                        }

                                        $steps["alertError"] =
                                          $steps.requestVerify.status !== 200
                                            ? (() => {
                                                const actionArgs = {
                                                  args: [
                                                    "error",
                                                    (() => {
                                                      try {
                                                        return (
                                                          $state.verifyResponse
                                                            .message ||
                                                          "خطا در بررسی پرداخت\u060C لطفا دوباره تلاش نمایید"
                                                        );
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })()
                                                  ]
                                                };
                                                return $globalActions[
                                                  "Fragment.showToast"
                                                ]?.apply(null, [
                                                  ...actionArgs.args
                                                ]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps["alertError"] != null &&
                                          typeof $steps["alertError"] ===
                                            "object" &&
                                          typeof $steps["alertError"].then ===
                                            "function"
                                        ) {
                                          $steps["alertError"] = await $steps[
                                            "alertError"
                                          ];
                                        }

                                        $steps["updateWaiting3"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                customFunction: async () => {
                                                  return (() => {
                                                    $state.txtPayaRpey.value =
                                                      "";
                                                    return ($state.dialog.open =
                                                      false);
                                                  })();
                                                }
                                              };
                                              return (({ customFunction }) => {
                                                return customFunction();
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updateWaiting3"] != null &&
                                          typeof $steps["updateWaiting3"] ===
                                            "object" &&
                                          typeof $steps["updateWaiting3"]
                                            .then === "function"
                                        ) {
                                          $steps["updateWaiting3"] =
                                            await $steps["updateWaiting3"];
                                        }
                                      }}
                                      size={
                                        hasVariant(
                                          globalVariants,
                                          "screen",
                                          "mobileOnly"
                                        )
                                          ? "compact"
                                          : undefined
                                      }
                                    />
                                  </div>
                                </div>
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.dialog
                              )}
                              onOpenChange={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "dialog",
                                  "open"
                                ]).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                              open={generateStateValueProp($state, [
                                "dialog",
                                "open"
                              ])}
                              title={
                                "\u0628\u0631\u0631\u0633\u06cc \u067e\u0631\u062f\u0627\u062e\u062a \u0628\u0647\u200c\u0635\u0648\u0631\u062a \u067e\u0627\u06cc\u0627/\u067e\u0644"
                              }
                              trigger={
                                <Button
                                  children2={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__fAf9C
                                      )}
                                    >
                                      {
                                        "\u0628\u0631\u0631\u0633\u06cc \u067e\u0631\u062f\u0627\u062e\u062a"
                                      }
                                    </div>
                                  }
                                  endIcon={
                                    <ChevronLeftIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__lT0I
                                      )}
                                      role={"img"}
                                    />
                                  }
                                  size={
                                    hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? "compact"
                                      : undefined
                                  }
                                  startIcon={
                                    <ChevronRightIcon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__eaU9V
                                      )}
                                      role={"img"}
                                    />
                                  }
                                />
                              }
                            />
                          </div>
                        </div>
                      </AntdAccordionItem>
                    </React.Fragment>
                  ),
                  onChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "activePanelId",
                      ["accordion", "activePanelId"],
                      AntdAccordion_Helpers
                    ).apply(null, eventArgs);

                    (async activeIds => {
                      const $steps = {};

                      $steps["updateWaitingcardtocard"] =
                        $state.hasCardToCardRequest == false
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["waitingcardtocard"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateWaitingcardtocard"] != null &&
                        typeof $steps["updateWaitingcardtocard"] === "object" &&
                        typeof $steps["updateWaitingcardtocard"].then ===
                          "function"
                      ) {
                        $steps["updateWaitingcardtocard"] = await $steps[
                          "updateWaitingcardtocard"
                        ];
                      }

                      $steps["requestCardToCard"] =
                        $state.hasCardToCardRequest == false
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://apigw.paziresh24.com/katibe/v1/payment/p24/cardtocard",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        amount:
                                          $ctx.query.amount - $state.balance
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["requestCardToCard"] != null &&
                        typeof $steps["requestCardToCard"] === "object" &&
                        typeof $steps["requestCardToCard"].then === "function"
                      ) {
                        $steps["requestCardToCard"] = await $steps[
                          "requestCardToCard"
                        ];
                      }

                      $steps["runCode"] =
                        $steps.requestCardToCard.status == 200 &&
                        $state.hasCardToCardRequest == false
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    $state.cardToCardRequest =
                                      $steps.requestCardToCard.data.data;
                                    return ($state.hasCardToCardRequest = true);
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }

                      $steps["updateWaitingcardtocard2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["waitingcardtocard"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateWaitingcardtocard2"] != null &&
                        typeof $steps["updateWaitingcardtocard2"] ===
                          "object" &&
                        typeof $steps["updateWaitingcardtocard2"].then ===
                          "function"
                      ) {
                        $steps["updateWaitingcardtocard2"] = await $steps[
                          "updateWaitingcardtocard2"
                        ];
                      }
                    }).apply(null, eventArgs);
                  },
                  size: "middle"
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "activePanelId",
                      plasmicStateName: "accordion.activePanelId"
                    }
                  ],
                  [],
                  AntdAccordion_Helpers ?? {},
                  child$Props
                );
                initializePlasmicStates(
                  $state,
                  [
                    {
                      name: "accordion.activePanelId",
                      initFunc: ({ $props, $state, $queries }) =>
                        (() => {
                          try {
                            return $state.balance >= $ctx.query.amount ? 0 : 1;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                    }
                  ],
                  []
                );
                return (
                  <AntdAccordion
                    data-plasmic-name={"accordion"}
                    data-plasmic-override={overrides.accordion}
                    {...child$Props}
                  />
                );
              })()}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___8TYz)}>
              <div className={classNames(projectcss.all, sty.freeBox__fume2)}>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__oh8Vp
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  <Button
                    children2={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jkj2Q
                        )}
                      >
                        {"\u0628\u0627\u0632\u06af\u0634\u062a"}
                      </div>
                    }
                    className={classNames("__wab_instance", sty.button___1HrS)}
                    color={"softBlue"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                (() => {
                                  try {
                                    return $ctx.query.returnlink
                                      ? globalThis
                                          .atob($ctx.query.returnlink)
                                          .includes("?")
                                        ? globalThis.atob(
                                            $ctx.query.cancel_returnlink
                                          ) + "&status=false"
                                        : globalThis.atob(
                                            $ctx.query.cancel_returnlink
                                          ) + "?status=false"
                                      : "https://www.paziresh24.com";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Hamdast.openLink"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }
                    }}
                    size={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "compact"
                        : "compact"
                    }
                  />
                </PlasmicLink__>
              </div>
            </div>
          </section>
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return setInterval(() => {
                          if ($state.hasCardToCardRequest) {
                            $state.cardToCardAutoCheck += 1;
                          }
                        }, 15000);
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
            }}
          />

          <SideEffect
            data-plasmic-name={"sideEffectAutoverify"}
            data-plasmic-override={overrides.sideEffectAutoverify}
            className={classNames("__wab_instance", sty.sideEffectAutoverify)}
            deps={(() => {
              try {
                return [$state.cardToCardAutoCheck];
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            onMount={async () => {
              const $steps = {};

              $steps["paymentP24CardtocardVerify"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://apigw.paziresh24.com/katibe/v1/payment/p24/cardtocard/verify",
                        (() => {
                          try {
                            return {
                              factorid: $state.cardToCardRequest.factorid
                            };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["paymentP24CardtocardVerify"] != null &&
                typeof $steps["paymentP24CardtocardVerify"] === "object" &&
                typeof $steps["paymentP24CardtocardVerify"].then === "function"
              ) {
                $steps["paymentP24CardtocardVerify"] = await $steps[
                  "paymentP24CardtocardVerify"
                ];
              }

              $steps["updateWaiting2"] =
                $steps.paymentP24CardtocardVerify.status == 200
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["cardToCardVerify"]
                        },
                        operation: 0,
                        value: $steps.paymentP24CardtocardVerify.data
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateWaiting2"] != null &&
                typeof $steps["updateWaiting2"] === "object" &&
                typeof $steps["updateWaiting2"].then === "function"
              ) {
                $steps["updateWaiting2"] = await $steps["updateWaiting2"];
              }

              $steps["getBalance"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://apigw.paziresh24.com/katibe/v1/transactions/balance/p24"
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["getBalance"] != null &&
                typeof $steps["getBalance"] === "object" &&
                typeof $steps["getBalance"].then === "function"
              ) {
                $steps["getBalance"] = await $steps["getBalance"];
              }

              $steps["updateBalance"] =
                $steps.getBalance.status == 200
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["balance"]
                        },
                        operation: 0,
                        value: $steps.getBalance.data.data.balance
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateBalance"] != null &&
                typeof $steps["updateBalance"] === "object" &&
                typeof $steps["updateBalance"].then === "function"
              ) {
                $steps["updateBalance"] = await $steps["updateBalance"];
              }

              $steps["redirect"] =
                $state.cardToCardVerify.status == 200 ||
                $state.balance >= $ctx.query.amount
                  ? (() => {
                      const actionArgs = {
                        args: [
                          (() => {
                            try {
                              return $ctx.query.returnlink
                                ? globalThis
                                    .atob($ctx.query.returnlink)
                                    .includes("?")
                                  ? globalThis.atob($ctx.query.returnlink) +
                                    "&status=true"
                                  : globalThis.atob($ctx.query.returnlink) +
                                    "?status=true"
                                : "https://www.paziresh24.com/dashboard/appointments/";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Hamdast.openLink"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
              if (
                $steps["redirect"] != null &&
                typeof $steps["redirect"] === "object" &&
                typeof $steps["redirect"].then === "function"
              ) {
                $steps["redirect"] = await $steps["redirect"];
              }
            }}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "embedHtml",
    "sideEffectPageLoad",
    "section",
    "accordion",
    "txtShowRpey2",
    "txtShowRpey3",
    "textShowIban",
    "txtShowRpey",
    "txtShowAmount",
    "dialog",
    "txtPayaRpey",
    "sideEffect",
    "sideEffectAutoverify"
  ],
  embedHtml: ["embedHtml"],
  sideEffectPageLoad: ["sideEffectPageLoad"],
  section: [
    "section",
    "accordion",
    "txtShowRpey2",
    "txtShowRpey3",
    "textShowIban",
    "txtShowRpey",
    "txtShowAmount",
    "dialog",
    "txtPayaRpey"
  ],
  accordion: [
    "accordion",
    "txtShowRpey2",
    "txtShowRpey3",
    "textShowIban",
    "txtShowRpey",
    "txtShowAmount",
    "dialog",
    "txtPayaRpey"
  ],
  txtShowRpey2: ["txtShowRpey2"],
  txtShowRpey3: ["txtShowRpey3"],
  textShowIban: ["textShowIban"],
  txtShowRpey: ["txtShowRpey"],
  txtShowAmount: ["txtShowAmount"],
  dialog: ["dialog", "txtPayaRpey"],
  txtPayaRpey: ["txtPayaRpey"],
  sideEffect: ["sideEffect"],
  sideEffectAutoverify: ["sideEffectAutoverify"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  embedHtml: typeof Embed;
  sideEffectPageLoad: typeof SideEffect;
  section: "section";
  accordion: typeof AntdAccordion;
  txtShowRpey2: typeof TextInput;
  txtShowRpey3: typeof TextInput;
  textShowIban: typeof TextInput;
  txtShowRpey: typeof TextInput;
  txtShowAmount: typeof TextInput;
  dialog: typeof Dialog;
  txtPayaRpey: typeof TextInput;
  sideEffect: typeof SideEffect;
  sideEffectAutoverify: typeof SideEffect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPaymentMethods__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPaymentMethods__VariantsArgs;
    args?: PlasmicPaymentMethods__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPaymentMethods__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPaymentMethods__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPaymentMethods__ArgProps,
          internalVariantPropNames: PlasmicPaymentMethods__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPaymentMethods__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPaymentMethods";
  } else {
    func.displayName = `PlasmicPaymentMethods.${nodeName}`;
  }
  return func;
}

export const PlasmicPaymentMethods = Object.assign(
  // Top-level PlasmicPaymentMethods renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    embedHtml: makeNodeComponent("embedHtml"),
    sideEffectPageLoad: makeNodeComponent("sideEffectPageLoad"),
    section: makeNodeComponent("section"),
    accordion: makeNodeComponent("accordion"),
    txtShowRpey2: makeNodeComponent("txtShowRpey2"),
    txtShowRpey3: makeNodeComponent("txtShowRpey3"),
    textShowIban: makeNodeComponent("textShowIban"),
    txtShowRpey: makeNodeComponent("txtShowRpey"),
    txtShowAmount: makeNodeComponent("txtShowAmount"),
    dialog: makeNodeComponent("dialog"),
    txtPayaRpey: makeNodeComponent("txtPayaRpey"),
    sideEffect: makeNodeComponent("sideEffect"),
    sideEffectAutoverify: makeNodeComponent("sideEffectAutoverify"),

    // Metadata about props expected for PlasmicPaymentMethods
    internalVariantProps: PlasmicPaymentMethods__VariantProps,
    internalArgProps: PlasmicPaymentMethods__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPaymentMethods;
/* prettier-ignore-end */
