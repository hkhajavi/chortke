/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: afXULSfGYmou2jFpEc2QWJ
// Component: BF9WF06JkxeV

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "../chortke/plasmic.module.css"; // plasmic-import: afXULSfGYmou2jFpEc2QWJ/projectcss
import sty from "./PlasmicPaymentMethods.module.css"; // plasmic-import: BF9WF06JkxeV/css

import Icon2Icon from "../chortke/icons/PlasmicIcon__Icon2"; // plasmic-import: eeiQdsLura6L/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicPaymentMethods__VariantMembers = {};
export type PlasmicPaymentMethods__VariantsArgs = {};
type VariantPropType = keyof PlasmicPaymentMethods__VariantsArgs;
export const PlasmicPaymentMethods__VariantProps = new Array<VariantPropType>();

export type PlasmicPaymentMethods__ArgsType = {};
type ArgPropType = keyof PlasmicPaymentMethods__ArgsType;
export const PlasmicPaymentMethods__ArgProps = new Array<ArgPropType>();

export type PlasmicPaymentMethods__OverridesType = {
  root?: Flex__<"div">;
  section?: Flex__<"section">;
  svg?: Flex__<"svg">;
  link?: Flex__<"a"> & Partial<LinkProps>;
  embedHtml?: Flex__<typeof Embed>;
  sideEffect?: Flex__<typeof SideEffect>;
};

export interface DefaultPaymentMethodsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPaymentMethods__RenderFunc(props: {
  variants: PlasmicPaymentMethods__VariantsArgs;
  args: PlasmicPaymentMethods__ArgsType;
  overrides: PlasmicPaymentMethods__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "waiting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "balance",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "paymentLink",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            plasmic_fragment_design_system_css.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__hK6S5)}>
              <div className={classNames(projectcss.all, sty.freeBox__iqfWt)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__eKwF3
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.query.title || "عملیات پرداخت";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                {(() => {
                  try {
                    return $state.waiting;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Icon2Icon
                    data-plasmic-name={"svg"}
                    data-plasmic-override={overrides.svg}
                    className={classNames(projectcss.all, sty.svg)}
                    role={"img"}
                  />
                ) : null}
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__xTKzb)}>
              <div className={classNames(projectcss.all, sty.freeBox__gdSfj)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zwUJe
                  )}
                >
                  {
                    "\u0634\u0627\u0631\u0698 \u06a9\u06cc\u0641 \u067e\u0648\u0644:"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yseFz
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (
                          new Intl.NumberFormat("fa-IR").format(
                            $state.balance || 0
                          ) + " ریال"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__au6T8)}>
              <div className={classNames(projectcss.all, sty.freeBox__sfTyP)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bm6Te
                  )}
                >
                  {
                    "\u0645\u0628\u0644\u063a \u0642\u0627\u0628\u0644 \u067e\u0631\u062f\u0627\u062e\u062a:"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__aG9R2
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (
                          new Intl.NumberFormat("fa-IR").format(
                            $ctx.query.amount - $state.balance || 0
                          ) + " ریال"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__zv6Q)}>
              <div className={classNames(projectcss.all, sty.freeBox__yowNc)}>
                <Button
                  children2={
                    "\u0627\u0631\u0633\u0627\u0644 \u0628\u0647 \u062f\u0631\u06af\u0627\u0647 \u067e\u0631\u062f\u0627\u062e\u062a"
                  }
                  className={classNames("__wab_instance", sty.button__rYgx)}
                  isDisabled={(() => {
                    try {
                      return $state.waiting;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateWaiting"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["waiting"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateWaiting"] != null &&
                      typeof $steps["updateWaiting"] === "object" &&
                      typeof $steps["updateWaiting"].then === "function"
                    ) {
                      $steps["updateWaiting"] = await $steps["updateWaiting"];
                    }

                    $steps["paymentRequest"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://apigw.paziresh24.com/katibe/v1/paymentlink/p24",
                              (() => {
                                try {
                                  return {
                                    productid: 1,
                                    returnlink: $ctx.query.returnlink,
                                    cancel_returnlink:
                                      $ctx.query.cancel_returnlink,
                                    title: "افزایش موجودی",
                                    amount: $ctx.query.amount - $state.balance
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["paymentRequest"] != null &&
                      typeof $steps["paymentRequest"] === "object" &&
                      typeof $steps["paymentRequest"].then === "function"
                    ) {
                      $steps["paymentRequest"] = await $steps["paymentRequest"];
                    }

                    $steps["updatePaymentLink"] =
                      $steps.paymentRequest.status == 200 &&
                      $steps.paymentRequest.data.status == true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["paymentLink"]
                              },
                              operation: 0,
                              value: $steps.paymentRequest.data.data.link
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updatePaymentLink"] != null &&
                      typeof $steps["updatePaymentLink"] === "object" &&
                      typeof $steps["updatePaymentLink"].then === "function"
                    ) {
                      $steps["updatePaymentLink"] = await $steps[
                        "updatePaymentLink"
                      ];
                    }

                    $steps["redirectUser"] =
                      $steps.paymentRequest.status == 200 &&
                      $steps.paymentRequest.data.status == true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                (() => {
                                  try {
                                    return $state.paymentLink;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Hamdast.openLink"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                    if (
                      $steps["redirectUser"] != null &&
                      typeof $steps["redirectUser"] === "object" &&
                      typeof $steps["redirectUser"].then === "function"
                    ) {
                      $steps["redirectUser"] = await $steps["redirectUser"];
                    }

                    $steps["updateWaiting2"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["waiting"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateWaiting2"] != null &&
                      typeof $steps["updateWaiting2"] === "object" &&
                      typeof $steps["updateWaiting2"].then === "function"
                    ) {
                      $steps["updateWaiting2"] = await $steps["updateWaiting2"];
                    }
                  }}
                />

                <PlasmicLink__
                  data-plasmic-name={"link"}
                  data-plasmic-override={overrides.link}
                  className={classNames(projectcss.all, projectcss.a, sty.link)}
                  component={Link}
                  platform={"nextjs"}
                >
                  <Button
                    children2={"\u0628\u0627\u0632\u06af\u0634\u062a"}
                    className={classNames("__wab_instance", sty.button___1HrS)}
                    color={"softBlue"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                (() => {
                                  try {
                                    return $ctx.query.cancel_returnlink
                                      ? globalThis.atob(
                                          $ctx.query.cancel_returnlink
                                        )
                                      : "https://www.paziresh24.com";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Hamdast.openLink"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }
                    }}
                  />
                </PlasmicLink__>
              </div>
            </div>
          </section>
          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml)}
            code={
              '<script type="text/javascript">\r\n    (function(c,l,a,r,i,t,y){\r\n        c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};\r\n        t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;\r\n        y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);\r\n    })(window, document, "clarity", "script", "rhalf4bl44");\r\n</script>'
            }
          />

          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["getBalance"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://apigw.paziresh24.com/katibe/v1/transactions/balance/p24"
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["getBalance"] != null &&
                typeof $steps["getBalance"] === "object" &&
                typeof $steps["getBalance"].then === "function"
              ) {
                $steps["getBalance"] = await $steps["getBalance"];
              }

              $steps["updateBalance"] =
                $steps.getBalance.status == 200
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["balance"]
                        },
                        operation: 0,
                        value: $steps.getBalance.data.data.balance
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateBalance"] != null &&
                typeof $steps["updateBalance"] === "object" &&
                typeof $steps["updateBalance"].then === "function"
              ) {
                $steps["updateBalance"] = await $steps["updateBalance"];
              }
            }}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "section", "svg", "link", "embedHtml", "sideEffect"],
  section: ["section", "svg", "link"],
  svg: ["svg"],
  link: ["link"],
  embedHtml: ["embedHtml"],
  sideEffect: ["sideEffect"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
  svg: "svg";
  link: "a";
  embedHtml: typeof Embed;
  sideEffect: typeof SideEffect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPaymentMethods__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPaymentMethods__VariantsArgs;
    args?: PlasmicPaymentMethods__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPaymentMethods__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPaymentMethods__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPaymentMethods__ArgProps,
          internalVariantPropNames: PlasmicPaymentMethods__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPaymentMethods__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPaymentMethods";
  } else {
    func.displayName = `PlasmicPaymentMethods.${nodeName}`;
  }
  return func;
}

export const PlasmicPaymentMethods = Object.assign(
  // Top-level PlasmicPaymentMethods renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    svg: makeNodeComponent("svg"),
    link: makeNodeComponent("link"),
    embedHtml: makeNodeComponent("embedHtml"),
    sideEffect: makeNodeComponent("sideEffect"),

    // Metadata about props expected for PlasmicPaymentMethods
    internalVariantProps: PlasmicPaymentMethods__VariantProps,
    internalArgProps: PlasmicPaymentMethods__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPaymentMethods;
/* prettier-ignore-end */
