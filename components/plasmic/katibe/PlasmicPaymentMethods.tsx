/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: afXULSfGYmou2jFpEc2QWJ
// Component: BF9WF06JkxeV

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { AntdAccordion } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { accordionHelpers as AntdAccordion_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdAccordionItem } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import TextInput from "../../TextInput"; // plasmic-import: SePhlRlvEn3n/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "../chortke/plasmic.module.css"; // plasmic-import: afXULSfGYmou2jFpEc2QWJ/projectcss
import sty from "./PlasmicPaymentMethods.module.css"; // plasmic-import: BF9WF06JkxeV/css

import Icon2Icon from "../chortke/icons/PlasmicIcon__Icon2"; // plasmic-import: eeiQdsLura6L/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import SearchSvgIcon from "../chortke/icons/PlasmicIcon__SearchSvg"; // plasmic-import: fjupp6w2fUeo/icon
import CheckSvgIcon from "../chortke/icons/PlasmicIcon__CheckSvg"; // plasmic-import: VZ6Vl-sB0jLM/icon

createPlasmicElementProxy;

export type PlasmicPaymentMethods__VariantMembers = {};
export type PlasmicPaymentMethods__VariantsArgs = {};
type VariantPropType = keyof PlasmicPaymentMethods__VariantsArgs;
export const PlasmicPaymentMethods__VariantProps = new Array<VariantPropType>();

export type PlasmicPaymentMethods__ArgsType = {};
type ArgPropType = keyof PlasmicPaymentMethods__ArgsType;
export const PlasmicPaymentMethods__ArgProps = new Array<ArgPropType>();

export type PlasmicPaymentMethods__OverridesType = {
  root?: Flex__<"div">;
  section?: Flex__<"section">;
  svg?: Flex__<"svg">;
  accordion?: Flex__<typeof AntdAccordion>;
  textInput?: Flex__<typeof TextInput>;
  textInput2?: Flex__<typeof TextInput>;
  embedHtml?: Flex__<typeof Embed>;
  sideEffectPageLoad?: Flex__<typeof SideEffect>;
};

export interface DefaultPaymentMethodsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPaymentMethods__RenderFunc(props: {
  variants: PlasmicPaymentMethods__VariantsArgs;
  args: PlasmicPaymentMethods__ArgsType;
  overrides: PlasmicPaymentMethods__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "waiting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "balance",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "paymentLink",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "accordion.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.balance >= $ctx.query.amount ? 0 : 1;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })(),

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      },
      {
        path: "me",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "verifyResponse",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "340600481979808994170001"
      },
      {
        path: "textInput2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.me.users[0].id;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            plasmic_fragment_design_system_css.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__hK6S5)}>
              <div className={classNames(projectcss.all, sty.freeBox__iqfWt)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__eKwF3
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $ctx.query.title || "عملیات پرداخت";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                {(() => {
                  try {
                    return $state.waiting;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Icon2Icon
                    data-plasmic-name={"svg"}
                    data-plasmic-override={overrides.svg}
                    className={classNames(projectcss.all, sty.svg)}
                    role={"img"}
                  />
                ) : null}
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__xTKzb)}>
              <div className={classNames(projectcss.all, sty.freeBox__gdSfj)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zwUJe
                  )}
                >
                  {
                    "\u0634\u0627\u0631\u0698 \u06a9\u06cc\u0641 \u067e\u0648\u0644:"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yseFz
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (
                          new Intl.NumberFormat("fa-IR").format(
                            $state.balance || 0
                          ) + " ریال"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__au6T8)}>
              <div className={classNames(projectcss.all, sty.freeBox__sfTyP)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bm6Te
                  )}
                >
                  {
                    "\u0645\u0628\u0644\u063a \u0642\u0627\u0628\u0644 \u067e\u0631\u062f\u0627\u062e\u062a:"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__aG9R2
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (() => {
                          return $ctx.query.amount - $state.balance > 0
                            ? new Intl.NumberFormat("fa-IR").format(
                                $ctx.query.amount - $state.balance || 0
                              ) + " ریال"
                            : "0 ریال";
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__wADcr)}>
              {(() => {
                const child$Props = {
                  activeKey: generateStateValueProp($state, [
                    "accordion",
                    "activePanelId"
                  ]),
                  bordered: true,
                  className: classNames("__wab_instance", sty.accordion),
                  defaultActiveKey: (() => {
                    try {
                      return $state.balance >= $ctx.query.amount ? 0 : 1;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })(),
                  expandIconPosition: "end",
                  ghost: false,
                  items: (
                    <React.Fragment>
                      <AntdAccordionItem
                        className={classNames(
                          "__wab_instance",
                          sty.accordionItem___8Gjun
                        )}
                        id={1}
                        label2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__k4Fll
                            )}
                          >
                            {
                              "\u067e\u0631\u062f\u0627\u062e\u062a \u0628\u0627 \u062f\u0631\u06af\u0627\u0647 \u067e\u0631\u062f\u0627\u062e\u062a"
                            }
                          </div>
                        }
                        showArrow={true}
                      >
                        <Button
                          children2={
                            "\u0627\u0631\u0633\u0627\u0644 \u0628\u0647 \u062f\u0631\u06af\u0627\u0647 \u067e\u0631\u062f\u0627\u062e\u062a"
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.button__rYgx
                          )}
                          isDisabled={(() => {
                            try {
                              return $state.waiting;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateWaiting"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["waiting"]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateWaiting"] != null &&
                              typeof $steps["updateWaiting"] === "object" &&
                              typeof $steps["updateWaiting"].then === "function"
                            ) {
                              $steps["updateWaiting"] = await $steps[
                                "updateWaiting"
                              ];
                            }

                            $steps["paymentRequest"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "POST",
                                      "https://apigw.paziresh24.com/katibe/v1/paymentlink/p24",
                                      (() => {
                                        try {
                                          return {
                                            productid: 1,
                                            returnlink: $ctx.query.returnlink,
                                            cancel_returnlink: globalThis.btoa(
                                              "https://www.paziresh24.com/_/katibe/payments/?amount=" +
                                                $ctx.query.amount +
                                                "&returnlink=" +
                                                $ctx.query.returnlink +
                                                "&cancel_returnlink=" +
                                                $ctx.query.cancel_returnlink
                                            ),
                                            title: "افزایش موجودی",
                                            amount:
                                              $ctx.query.amount - $state.balance
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.apiRequest"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["paymentRequest"] != null &&
                              typeof $steps["paymentRequest"] === "object" &&
                              typeof $steps["paymentRequest"].then ===
                                "function"
                            ) {
                              $steps["paymentRequest"] = await $steps[
                                "paymentRequest"
                              ];
                            }

                            $steps["updatePaymentLink"] =
                              $steps.paymentRequest.status == 200 &&
                              $steps.paymentRequest.data.status == true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["paymentLink"]
                                      },
                                      operation: 0,
                                      value:
                                        $steps.paymentRequest.data.data.link
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["updatePaymentLink"] != null &&
                              typeof $steps["updatePaymentLink"] === "object" &&
                              typeof $steps["updatePaymentLink"].then ===
                                "function"
                            ) {
                              $steps["updatePaymentLink"] = await $steps[
                                "updatePaymentLink"
                              ];
                            }

                            $steps["redirectUser"] =
                              $steps.paymentRequest.status == 200 &&
                              $steps.paymentRequest.data.status == true
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        (() => {
                                          try {
                                            return $state.paymentLink;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      ]
                                    };
                                    return $globalActions[
                                      "Hamdast.openLink"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                            if (
                              $steps["redirectUser"] != null &&
                              typeof $steps["redirectUser"] === "object" &&
                              typeof $steps["redirectUser"].then === "function"
                            ) {
                              $steps["redirectUser"] = await $steps[
                                "redirectUser"
                              ];
                            }

                            $steps["updateWaiting2"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["waiting"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateWaiting2"] != null &&
                              typeof $steps["updateWaiting2"] === "object" &&
                              typeof $steps["updateWaiting2"].then ===
                                "function"
                            ) {
                              $steps["updateWaiting2"] = await $steps[
                                "updateWaiting2"
                              ];
                            }
                          }}
                        />
                      </AntdAccordionItem>
                      <AntdAccordionItem
                        className={classNames(
                          "__wab_instance",
                          sty.accordionItem__u9Sgw
                        )}
                        id={2}
                        label2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__chiep
                            )}
                          >
                            {
                              "\u067e\u0631\u062f\u0627\u062e\u062a \u06a9\u0627\u0631\u062a \u0628\u0647 \u06a9\u0627\u0631\u062a"
                            }
                          </div>
                        }
                        showArrow={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vQCxv
                          )}
                        >
                          <React.Fragment>
                            <React.Fragment>
                              {
                                "\u062c\u0647\u062a \u067e\u0631\u062f\u0627\u062e\u062a \u0628\u0647\u200c\u0635\u0648\u0631\u062a \u06a9\u0627\u0631\u062a \u0628\u0647 \u06a9\u0627\u0631\u062a\u060c \u0644\u0637\u0641\u0627 \u0645\u0628\u0644\u063a \u0642\u0627\u0628\u0644 \u067e\u0631\u062f\u0627\u062e\u062a \u0631\u0627 \u0628\u0647 \u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a 6037691526316161 \u0628\u0647 \u0646\u0627\u0645 \u062d\u062c\u062a \u062e\u0648\u0627\u062c\u0648\u06cc \u0648\u0627\u0631\u06cc\u0632 \u06a9\u0631\u062f\u0647 \u0648 \u0633\u067e\u0633 \u062f\u06a9\u0645\u0647 \u0628\u0631\u0631\u0633\u06cc \u067e\u0631\u062f\u0627\u062e\u062a \u0631\u0627 \u06a9\u0644\u06cc\u06a9 \u0646\u0645\u0627\u06cc\u06cc\u062f. \n"
                              }
                            </React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {
                                "\u0644\u0637\u0641\u0627\u064b \u062a\u0648\u062c\u0647 \u062f\u0627\u0634\u062a\u0647 \u0628\u0627\u0634\u06cc\u062f \u06a9\u0647 \u0641\u0631\u0622\u06cc\u0646\u062f \u0634\u0627\u0631\u0698 \u06a9\u06cc\u0641 \u067e\u0648\u0644 \u0628\u0647 \u0635\u0648\u0631\u062a \u06a9\u0627\u0631\u062a \u0628\u0647 \u06a9\u0627\u0631\u062a\u060c \u0686\u0646\u062f \u062f\u0642\u06cc\u0642\u0647 \u0632\u0645\u0627\u0646 \u0645\u06cc\u200c\u0628\u0631\u062f."
                              }
                            </span>
                          </React.Fragment>
                        </div>
                        <Button
                          children2={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ekWh
                              )}
                            >
                              {
                                "\u0628\u0631\u0631\u0633\u06cc \u067e\u0631\u062f\u0627\u062e\u062a"
                              }
                            </div>
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.button___0ZCe
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateWaiting"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["waiting"]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateWaiting"] != null &&
                              typeof $steps["updateWaiting"] === "object" &&
                              typeof $steps["updateWaiting"].then === "function"
                            ) {
                              $steps["updateWaiting"] = await $steps[
                                "updateWaiting"
                              ];
                            }

                            $steps["requestVerify"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "POST",
                                      "https://apigw.paziresh24.com/katibe/v1/payment/methods/verify",
                                      undefined,
                                      { method: "cardtocard" }
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.apiRequest"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["requestVerify"] != null &&
                              typeof $steps["requestVerify"] === "object" &&
                              typeof $steps["requestVerify"].then === "function"
                            ) {
                              $steps["requestVerify"] = await $steps[
                                "requestVerify"
                              ];
                            }

                            $steps["verifyResponse"] =
                              $steps.requestVerify.status == 200
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["verifyResponse"]
                                      },
                                      operation: 0,
                                      value: $steps.requestVerify.data
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["verifyResponse"] != null &&
                              typeof $steps["verifyResponse"] === "object" &&
                              typeof $steps["verifyResponse"].then ===
                                "function"
                            ) {
                              $steps["verifyResponse"] = await $steps[
                                "verifyResponse"
                              ];
                            }

                            $steps["updateWaiting2"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["waiting"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateWaiting2"] != null &&
                              typeof $steps["updateWaiting2"] === "object" &&
                              typeof $steps["updateWaiting2"].then ===
                                "function"
                            ) {
                              $steps["updateWaiting2"] = await $steps[
                                "updateWaiting2"
                              ];
                            }

                            $steps["alertSuccess"] =
                              $steps.requestVerify.status == 200
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        undefined,
                                        (() => {
                                          try {
                                            return $state.verifyResponse
                                              .message;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.showToast"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                            if (
                              $steps["alertSuccess"] != null &&
                              typeof $steps["alertSuccess"] === "object" &&
                              typeof $steps["alertSuccess"].then === "function"
                            ) {
                              $steps["alertSuccess"] = await $steps[
                                "alertSuccess"
                              ];
                            }

                            $steps["alertError"] =
                              $steps.requestVerify.status !== 200
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "error",
                                        (() => {
                                          try {
                                            return (
                                              $state.verifyResponse.message ||
                                              "خطا در بررسی پرداخت\u060C لطفا دوباره تلاش نمایید"
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.showToast"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                            if (
                              $steps["alertError"] != null &&
                              typeof $steps["alertError"] === "object" &&
                              typeof $steps["alertError"].then === "function"
                            ) {
                              $steps["alertError"] = await $steps["alertError"];
                            }
                          }}
                        />
                      </AntdAccordionItem>
                      <AntdAccordionItem
                        className={classNames(
                          "__wab_instance",
                          sty.accordionItem__gAtO
                        )}
                        id={"3"}
                        label2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__cR8FC
                            )}
                          >
                            {
                              "\u067e\u0631\u062f\u0627\u062e\u062a \u067e\u0627\u06cc\u0627/\u067e\u064f\u0644"
                            }
                          </div>
                        }
                        showArrow={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__abHoO
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ttcF
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__hBa52
                              )}
                            >
                              {
                                "\u062c\u0647\u062a \u0634\u0627\u0631\u0698 \u06a9\u06cc\u0641 \u067e\u0648\u0644 \u0628\u0647\u200c\u0635\u0648\u0631\u062a \u067e\u0627\u06cc\u0627/\u067e\u064f\u0644\u060c \u0644\u0637\u0641\u0627 \u0645\u0628\u0644\u063a \u0642\u0627\u0628\u0644 \u067e\u0631\u062f\u0627\u062e\u062a \u0631\u0627 \u0628\u0647 \u0634\u0628\u0627 \u0632\u06cc\u0631 \u0628\u0627 \u062a\u0648\u0636\u06cc\u062d\u0627\u062a \u0648 \u0634\u0646\u0627\u0633\u0647 \u067e\u0631\u062f\u0627\u062e\u062a \u0648\u0627\u0631\u06cc\u0632 \u06a9\u0631\u062f\u0647 \u0648 \u0633\u067e\u0633 \u062f\u06a9\u0645\u0647 \u0628\u0631\u0631\u0633\u06cc \u067e\u0631\u062f\u0627\u062e\u062a \u0631\u0627 \u06a9\u0644\u06cc\u06a9 \u0646\u0645\u0627\u06cc\u06cc\u062f."
                              }
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__fkxfa
                              )}
                            >
                              <React.Fragment>
                                <span
                                  className={
                                    "plasmic_default__all plasmic_default__span"
                                  }
                                  style={{ fontWeight: 700 }}
                                >
                                  {
                                    "\u0644\u0637\u0641\u0627\u064b \u062a\u0648\u062c\u0647 \u062f\u0627\u0634\u062a\u0647 \u0628\u0627\u0634\u06cc\u062f \u06a9\u0647 \u062a\u0627\u06cc\u06cc\u062f \u067e\u0631\u062f\u0627\u062e\u062a\u060c \u0645\u0642\u062f\u0627\u0631\u06cc \u0632\u0645\u0627\u0646\u200c\u0628\u0631 \u062e\u0648\u0627\u0647\u062f \u0628\u0648\u062f."
                                  }
                                </span>
                              </React.Fragment>
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__j6U
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___0Gopl
                              )}
                            >
                              {
                                "\u0634\u0645\u0627\u0631\u0647 \u0634\u0628\u0627:"
                              }
                            </div>
                            <TextInput
                              data-plasmic-name={"textInput"}
                              data-plasmic-override={overrides.textInput}
                              className={classNames(
                                "__wab_instance",
                                sty.textInput
                              )}
                              onChange={async (...eventArgs: any) => {
                                ((...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "textInput",
                                    "value"
                                  ])(
                                    (e => e.target?.value).apply(
                                      null,
                                      eventArgs
                                    )
                                  );
                                }).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                              placeholder={``}
                              value={
                                generateStateValueProp($state, [
                                  "textInput",
                                  "value"
                                ]) ?? ""
                              }
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__c63Bw
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__yrJg
                              )}
                            >
                              {
                                "\u0634\u0646\u0627\u0633\u0647 \u067e\u0631\u062f\u0627\u062e\u062a:"
                              }
                            </div>
                            <TextInput
                              data-plasmic-name={"textInput2"}
                              data-plasmic-override={overrides.textInput2}
                              className={classNames(
                                "__wab_instance",
                                sty.textInput2
                              )}
                              onChange={async (...eventArgs: any) => {
                                ((...eventArgs) => {
                                  generateStateOnChangeProp($state, [
                                    "textInput2",
                                    "value"
                                  ])(
                                    (e => e.target?.value).apply(
                                      null,
                                      eventArgs
                                    )
                                  );
                                }).apply(null, eventArgs);

                                if (
                                  eventArgs.length > 1 &&
                                  eventArgs[1] &&
                                  eventArgs[1]._plasmic_state_init_
                                ) {
                                  return;
                                }
                              }}
                              placeholder={``}
                              value={
                                generateStateValueProp($state, [
                                  "textInput2",
                                  "value"
                                ]) ?? ""
                              }
                            />
                          </div>
                        </div>
                        <Button
                          children2={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__uftoF
                              )}
                            >
                              {
                                "\u0628\u0631\u0631\u0633\u06cc \u067e\u0631\u062f\u0627\u062e\u062a"
                              }
                            </div>
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.button__fdn28
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateWaiting"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["waiting"]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateWaiting"] != null &&
                              typeof $steps["updateWaiting"] === "object" &&
                              typeof $steps["updateWaiting"].then === "function"
                            ) {
                              $steps["updateWaiting"] = await $steps[
                                "updateWaiting"
                              ];
                            }

                            $steps["requestVerify"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "POST",
                                      "https://apigw.paziresh24.com/katibe/v1/payment/methods/verify",
                                      undefined,
                                      { method: "paya" }
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.apiRequest"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["requestVerify"] != null &&
                              typeof $steps["requestVerify"] === "object" &&
                              typeof $steps["requestVerify"].then === "function"
                            ) {
                              $steps["requestVerify"] = await $steps[
                                "requestVerify"
                              ];
                            }

                            $steps["verifyResponse"] =
                              $steps.requestVerify.status == 200
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["verifyResponse"]
                                      },
                                      operation: 0,
                                      value: $steps.requestVerify.data
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["verifyResponse"] != null &&
                              typeof $steps["verifyResponse"] === "object" &&
                              typeof $steps["verifyResponse"].then ===
                                "function"
                            ) {
                              $steps["verifyResponse"] = await $steps[
                                "verifyResponse"
                              ];
                            }

                            $steps["updateWaiting2"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["waiting"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateWaiting2"] != null &&
                              typeof $steps["updateWaiting2"] === "object" &&
                              typeof $steps["updateWaiting2"].then ===
                                "function"
                            ) {
                              $steps["updateWaiting2"] = await $steps[
                                "updateWaiting2"
                              ];
                            }

                            $steps["alertSuccess"] =
                              $steps.requestVerify.status == 200
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        undefined,
                                        (() => {
                                          try {
                                            return $state.verifyResponse
                                              .message;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.showToast"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                            if (
                              $steps["alertSuccess"] != null &&
                              typeof $steps["alertSuccess"] === "object" &&
                              typeof $steps["alertSuccess"].then === "function"
                            ) {
                              $steps["alertSuccess"] = await $steps[
                                "alertSuccess"
                              ];
                            }

                            $steps["alertError"] =
                              $steps.requestVerify.status !== 200
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "error",
                                        (() => {
                                          try {
                                            return (
                                              $state.verifyResponse.message ||
                                              "خطا در بررسی پرداخت\u060C لطفا دوباره تلاش نمایید"
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.showToast"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                            if (
                              $steps["alertError"] != null &&
                              typeof $steps["alertError"] === "object" &&
                              typeof $steps["alertError"].then === "function"
                            ) {
                              $steps["alertError"] = await $steps["alertError"];
                            }
                          }}
                        />
                      </AntdAccordionItem>
                    </React.Fragment>
                  ),
                  onChange: async (...eventArgs: any) => {
                    generateStateOnChangePropForCodeComponents(
                      $state,
                      "activePanelId",
                      ["accordion", "activePanelId"],
                      AntdAccordion_Helpers
                    ).apply(null, eventArgs);
                  },
                  size: "middle"
                };
                initializeCodeComponentStates(
                  $state,
                  [
                    {
                      name: "activePanelId",
                      plasmicStateName: "accordion.activePanelId"
                    }
                  ],
                  [],
                  AntdAccordion_Helpers ?? {},
                  child$Props
                );
                initializePlasmicStates(
                  $state,
                  [
                    {
                      name: "accordion.activePanelId",
                      initFunc: ({ $props, $state, $queries }) =>
                        (() => {
                          try {
                            return $state.balance >= $ctx.query.amount ? 0 : 1;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                    }
                  ],
                  []
                );
                return (
                  <AntdAccordion
                    data-plasmic-name={"accordion"}
                    data-plasmic-override={overrides.accordion}
                    {...child$Props}
                  />
                );
              })()}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__zv6Q)}>
              <div className={classNames(projectcss.all, sty.freeBox__yowNc)}>
                <Button
                  children2={
                    "\u067e\u0631\u062f\u0627\u062e\u062a \u0628\u0627 \u06a9\u06cc\u0641 \u067e\u0648\u0644"
                  }
                  className={classNames("__wab_instance", sty.button__pi3V)}
                  isDisabled={(() => {
                    try {
                      return $state.balance < $ctx.query.amount;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  onClick={async event => {
                    const $steps = {};

                    $steps["invokeGlobalAction"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              (() => {
                                try {
                                  return $ctx.query.returnlink
                                    ? globalThis
                                        .atob($ctx.query.returnlink)
                                        .includes("?")
                                      ? globalThis.atob($ctx.query.returnlink) +
                                        "&status=true"
                                      : globalThis.atob($ctx.query.returnlink) +
                                        "?status=true"
                                    : "https://www.paziresh24.com";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Hamdast.openLink"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["invokeGlobalAction"] != null &&
                      typeof $steps["invokeGlobalAction"] === "object" &&
                      typeof $steps["invokeGlobalAction"].then === "function"
                    ) {
                      $steps["invokeGlobalAction"] = await $steps[
                        "invokeGlobalAction"
                      ];
                    }
                  }}
                />

                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__oh8Vp
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  <Button
                    children2={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jkj2Q
                        )}
                      >
                        {"\u0628\u0627\u0632\u06af\u0634\u062a"}
                      </div>
                    }
                    className={classNames("__wab_instance", sty.button___1HrS)}
                    color={"softBlue"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["invokeGlobalAction"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                (() => {
                                  try {
                                    return $ctx.query.returnlink
                                      ? globalThis
                                          .atob($ctx.query.returnlink)
                                          .includes("?")
                                        ? globalThis.atob(
                                            $ctx.query.cancel_returnlink
                                          ) + "&status=false"
                                        : globalThis.atob(
                                            $ctx.query.cancel_returnlink
                                          ) + "?status=false"
                                      : "https://www.paziresh24.com";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Hamdast.openLink"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["invokeGlobalAction"] != null &&
                        typeof $steps["invokeGlobalAction"] === "object" &&
                        typeof $steps["invokeGlobalAction"].then === "function"
                      ) {
                        $steps["invokeGlobalAction"] = await $steps[
                          "invokeGlobalAction"
                        ];
                      }
                    }}
                  />
                </PlasmicLink__>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__uxN0)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___4A4Nw
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>
                      {
                        "\u062f\u0631 \u0635\u0648\u0631\u062a \u0646\u06cc\u0627\u0632 \u0628\u0647 \u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc \u067e\u06cc\u0631\u0627\u0645\u0648\u0646 \u0627\u06cc\u0646 \u0635\u0641\u062d\u0647\u060c \u0628\u0627 \u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 "
                      }
                    </React.Fragment>
                    {
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.link__zZrtc
                        )}
                        component={Link}
                        href={"tel:09384487404"}
                        platform={"nextjs"}
                      >
                        {"09384487404"}
                      </PlasmicLink__>
                    }
                    <React.Fragment>
                      {
                        " \u062a\u0645\u0627\u0633 \u0628\u06af\u06cc\u0631\u06cc\u062f."
                      }
                    </React.Fragment>
                  </React.Fragment>
                </div>
              </div>
            </div>
            {(() => {
              try {
                return true;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div className={classNames(projectcss.all, sty.freeBox__wKy41)} />
            ) : null}
          </section>
          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml)}
            code={
              '<script type="text/javascript">\r\n    (function(c,l,a,r,i,t,y){\r\n        c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};\r\n        t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;\r\n        y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);\r\n    })(window, document, "clarity", "script", "rhalf4bl44");\r\n</script>'
            }
          />

          <SideEffect
            data-plasmic-name={"sideEffectPageLoad"}
            data-plasmic-override={overrides.sideEffectPageLoad}
            className={classNames("__wab_instance", sty.sideEffectPageLoad)}
            onMount={async () => {
              const $steps = {};

              $steps["me"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://apigw.paziresh24.com/v1/auth/me"
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["me"] != null &&
                typeof $steps["me"] === "object" &&
                typeof $steps["me"].then === "function"
              ) {
                $steps["me"] = await $steps["me"];
              }

              $steps["updateMe"] =
                $steps.me.status == 200
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["me"]
                        },
                        operation: 0,
                        value: $steps.me.data
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateMe"] != null &&
                typeof $steps["updateMe"] === "object" &&
                typeof $steps["updateMe"].then === "function"
              ) {
                $steps["updateMe"] = await $steps["updateMe"];
              }

              $steps["getBalance"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://apigw.paziresh24.com/katibe/v1/transactions/balance/p24"
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["getBalance"] != null &&
                typeof $steps["getBalance"] === "object" &&
                typeof $steps["getBalance"].then === "function"
              ) {
                $steps["getBalance"] = await $steps["getBalance"];
              }

              $steps["updateBalance"] =
                $steps.getBalance.status == 200
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["balance"]
                        },
                        operation: 0,
                        value: $steps.getBalance.data.data.balance
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateBalance"] != null &&
                typeof $steps["updateBalance"] === "object" &&
                typeof $steps["updateBalance"].then === "function"
              ) {
                $steps["updateBalance"] = await $steps["updateBalance"];
              }
            }}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "svg",
    "accordion",
    "textInput",
    "textInput2",
    "embedHtml",
    "sideEffectPageLoad"
  ],
  section: ["section", "svg", "accordion", "textInput", "textInput2"],
  svg: ["svg"],
  accordion: ["accordion", "textInput", "textInput2"],
  textInput: ["textInput"],
  textInput2: ["textInput2"],
  embedHtml: ["embedHtml"],
  sideEffectPageLoad: ["sideEffectPageLoad"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
  svg: "svg";
  accordion: typeof AntdAccordion;
  textInput: typeof TextInput;
  textInput2: typeof TextInput;
  embedHtml: typeof Embed;
  sideEffectPageLoad: typeof SideEffect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPaymentMethods__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPaymentMethods__VariantsArgs;
    args?: PlasmicPaymentMethods__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPaymentMethods__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPaymentMethods__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPaymentMethods__ArgProps,
          internalVariantPropNames: PlasmicPaymentMethods__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPaymentMethods__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPaymentMethods";
  } else {
    func.displayName = `PlasmicPaymentMethods.${nodeName}`;
  }
  return func;
}

export const PlasmicPaymentMethods = Object.assign(
  // Top-level PlasmicPaymentMethods renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    svg: makeNodeComponent("svg"),
    accordion: makeNodeComponent("accordion"),
    textInput: makeNodeComponent("textInput"),
    textInput2: makeNodeComponent("textInput2"),
    embedHtml: makeNodeComponent("embedHtml"),
    sideEffectPageLoad: makeNodeComponent("sideEffectPageLoad"),

    // Metadata about props expected for PlasmicPaymentMethods
    internalVariantProps: PlasmicPaymentMethods__VariantProps,
    internalArgProps: PlasmicPaymentMethods__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPaymentMethods;
/* prettier-ignore-end */
