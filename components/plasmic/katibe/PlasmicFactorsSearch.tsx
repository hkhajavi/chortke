/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: afXULSfGYmou2jFpEc2QWJ
// Component: E5TSAr0YUe-f

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: 0wu_ZE1f8SuT/component
import Select from "../../Select"; // plasmic-import: 7wkEfmUYAcMf/component
import Dialog from "../../Dialog"; // plasmic-import: nYtkLnbqtkXY/component
import TextInput from "../../TextInput"; // plasmic-import: SePhlRlvEn3n/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: hVBOtSJvmbc4/codeComponent
import Button2 from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsbr2UhI7UlpvR } from "../fragment_icons/PlasmicGlobalVariant__Screen"; // plasmic-import: BR2UhI7ulpvR/globalVariant
import { useScreenVariants as useScreenVariants_7Bs7RtJcMv9T } from "../chortke/PlasmicGlobalVariant__Screen"; // plasmic-import: 7BS7RtJcMv9t/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "../chortke/plasmic.module.css"; // plasmic-import: afXULSfGYmou2jFpEc2QWJ/projectcss
import sty from "./PlasmicFactorsSearch.module.css"; // plasmic-import: E5TSAr0YUe-f/css

import Icon11Icon from "../chortke/icons/PlasmicIcon__Icon11"; // plasmic-import: sdf49AtFp7I6/icon
import Icon6Icon from "../chortke/icons/PlasmicIcon__Icon6"; // plasmic-import: 7-KwYGGksEHB/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import Icon2Icon from "../chortke/icons/PlasmicIcon__Icon2"; // plasmic-import: eeiQdsLura6L/icon
import SearchSvgIcon from "../chortke/icons/PlasmicIcon__SearchSvg"; // plasmic-import: fjupp6w2fUeo/icon
import CheckSvgIcon from "../chortke/icons/PlasmicIcon__CheckSvg"; // plasmic-import: VZ6Vl-sB0jLM/icon
import Icon39Icon from "./icons/PlasmicIcon__Icon39"; // plasmic-import: I-Qer-jgPJtD/icon
import Icon43Icon from "./icons/PlasmicIcon__Icon43"; // plasmic-import: 9LnHpep74tBB/icon

createPlasmicElementProxy;

export type PlasmicFactorsSearch__VariantMembers = {};
export type PlasmicFactorsSearch__VariantsArgs = {};
type VariantPropType = keyof PlasmicFactorsSearch__VariantsArgs;
export const PlasmicFactorsSearch__VariantProps = new Array<VariantPropType>();

export type PlasmicFactorsSearch__ArgsType = {};
type ArgPropType = keyof PlasmicFactorsSearch__ArgsType;
export const PlasmicFactorsSearch__ArgProps = new Array<ArgPropType>();

export type PlasmicFactorsSearch__OverridesType = {
  root?: Flex__<"div">;
  h1?: Flex__<"h1">;
  btnDashboard3?: Flex__<"div">;
  lblUser?: Flex__<"div">;
  btnLogout?: Flex__<"a"> & Partial<LinkProps>;
  btnLogin?: Flex__<typeof Button>;
  section?: Flex__<"section">;
  cbAccounts?: Flex__<typeof Select>;
  gridCalculator2?: Flex__<"div">;
  txtRemainingText?: Flex__<"div">;
  txtRemainingValue?: Flex__<"div">;
  dialogIncreaseRemaining?: Flex__<typeof Dialog>;
  btnPay?: Flex__<typeof Button>;
  gridSelectprice?: Flex__<"div">;
  btnSelectAmount?: Flex__<typeof Button>;
  gridMyAmount?: Flex__<"div">;
  txtNewPaymentAmount?: Flex__<typeof TextInput>;
  btnPayWithWallet?: Flex__<typeof Button>;
  txtpayWithWallet?: Flex__<"div">;
  btnPayWithWallet3?: Flex__<typeof Button>;
  txtpayWithWallet3?: Flex__<"div">;
  btnPayWithWallet2?: Flex__<typeof Button>;
  txtpayWithWallet2?: Flex__<"div">;
  gridInvoice1?: Flex__<"div">;
  gridNoData?: Flex__<"div">;
  gridInvoice12?: Flex__<"div">;
  dialogNewInvoiceDetails?: Flex__<typeof Dialog>;
  btnInvoiceInfo?: Flex__<typeof Button>;
  detailsDataApiRequest?: Flex__<typeof ApiRequest>;
  waitingIcon3?: Flex__<"svg">;
  link?: Flex__<"a"> & Partial<LinkProps>;
  gridNoData2?: Flex__<"div">;
  sideEffectPageLoad?: Flex__<typeof SideEffect>;
  sideEffectRefresh?: Flex__<typeof SideEffect>;
  embedHtml?: Flex__<typeof Embed>;
};

export interface DefaultFactorsSearchProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFactorsSearch__RenderFunc(props: {
  variants: PlasmicFactorsSearch__VariantsArgs;
  args: PlasmicFactorsSearch__ArgsType;
  overrides: PlasmicFactorsSearch__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "user",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "txtUserName",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "btnLoginShow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "btnLogoutShow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "productList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            productid: 0,
            name: "\u0644\u0637\u0641\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u0646\u0645\u0627\u06cc\u06cc\u062f"
          }
        ]
      },
      {
        path: "userid",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "hkk"
      },
      {
        path: "txtTest2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "waiting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "btnPayShow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "txtReminderTextValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "txtReminderValue",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "invoicelist",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "invoiceDetials",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          status: true,
          message:
            "\u062c\u0632\u0626\u06cc\u0627\u062a \u0635\u0648\u0631\u062a \u062d\u0633\u0627\u0628",
          data: {
            invoiceid: 197,
            userid: "15594550",
            status: "registered",
            type: "purchase",
            discountpercent: 0,
            vatpercent: 0,
            title:
              "\u067e\u0631\u062f\u0627\u062e\u062a \u0628\u0627\u0628\u062a \u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0645\u0634\u0627\u0648\u0631\u0647 \u0622\u0646\u0644\u0627\u06cc\u0646",
            description:
              "\u062f\u0631\u06af\u0627\u0647 \u067e\u0631\u062f\u0627\u062e\u062a \u0633\u0627\u0645\u0627\u0646",
            sumprice: 15000,
            discountprice: 0,
            vatprice: 0,
            finalprice: 15000,
            registerdate: "2024-07-28",
            services: [
              {
                service:
                  "\u062f\u0631\u06af\u0627\u0647 \u067e\u0631\u062f\u0627\u062e\u062a \u0633\u0627\u0645\u0627\u0646",
                count: 1,
                price: "15000"
              }
            ],
            meta: {
              ResNum: "e40a83d2-d5f6-4c52-83ab-fdde1bdad009",
              samantoken: "8fc9e787e0c548e58e4896c17d0aa475",
              returnlink: "https://paziresh24.com/"
            }
          }
        })
      },
      {
        path: "isDialogOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "invoiceHasOnlinePayment",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "waitingInvoiceDetails",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "increaseButtonList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          2000000, 3500000, 5000000
        ]
      },
      {
        path: "waitingPayment",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "paymentAmount",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "txtNewPaymentAmount.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "showMyAmount",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "isShowPaymentButton",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "reminderWallet",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "increaseButtonListBase",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          2000000, 3500000, 5000000
        ]
      },
      {
        path: "showSelectPriceGrid",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "dialogIncreaseRemaining.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobileOnly") ? false : false
      },
      {
        path: "showCbCenters",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "centersList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "currentCenterid",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "0"
      },
      {
        path: "txtPaymentText",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "\u0627\u0641\u0632\u0627\u06cc\u0634 \u0627\u0639\u062a\u0628\u0627\u0631"
      },
      {
        path: "limit",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 20
      },
      {
        path: "offset",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "waitingLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "showMoreBtn",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "isSettlementShow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "bankAccountList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "cardInquiry",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "waitingAccount",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "insertAccountErrorText",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "waitingSettlement",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "requestSettlementMessage",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "firstRequestCount",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "btnRegisterSettlementShow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "settlementResultShow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "cbAccounts.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.accounts[0].id;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "0";
              }
              throw e;
            }
          })()
      },
      {
        path: "accounts",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "requestInvoiceUrl",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "requestWalletUrl",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "switchAccountPanel",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "currentAccountType",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "updatewallet",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "isLoadAccount",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "dialogNewInvoiceDetails[].open",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "detailsDataApiRequest[].data",
        type: "private",
        variableType: "object",

        refName: "detailsDataApiRequest"
      },
      {
        path: "detailsDataApiRequest[].error",
        type: "private",
        variableType: "object",

        refName: "detailsDataApiRequest"
      },
      {
        path: "detailsDataApiRequest[].loading",
        type: "private",
        variableType: "boolean",

        refName: "detailsDataApiRequest"
      },
      {
        path: "paymentLink",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "variable2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "pageNumber",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      },
      {
        path: "currentAccountId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "currentAccountAccount",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "userData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "p24Balance",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "centerbalance",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "drCenters",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbr2UhI7UlpvR(),
    screen: useScreenVariants_7Bs7RtJcMv9T()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicFactorsSearch.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicFactorsSearch.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicFactorsSearch.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicFactorsSearch.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicFactorsSearch.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicFactorsSearch.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicFactorsSearch.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicFactorsSearch.pageMetadata.ogImageSrc}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {(() => {
          try {
            return true;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              plasmic_antd_5_hostless_css.plasmic_tokens,
              plasmic_plasmic_rich_components_css.plasmic_tokens,
              plasmic_fragment_design_system_css.plasmic_tokens,
              sty.root
            )}
            dir={"rtl"}
          >
            <div className={classNames(projectcss.all, sty.freeBox__hs2Ll)}>
              <div className={classNames(projectcss.all, sty.freeBox__sTOlA)}>
                <div className={classNames(projectcss.all, sty.freeBox__h4KSm)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___12WMj)}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__cB4Sk)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__gBcOa)}
                  >
                    <Icon11Icon
                      className={classNames(projectcss.all, sty.svg__uhViw)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToHttpsPaziresh24Com"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: "https://paziresh24.com"
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToHttpsPaziresh24Com"] != null &&
                          typeof $steps["goToHttpsPaziresh24Com"] ===
                            "object" &&
                          typeof $steps["goToHttpsPaziresh24Com"].then ===
                            "function"
                        ) {
                          $steps["goToHttpsPaziresh24Com"] = await $steps[
                            "goToHttpsPaziresh24Com"
                          ];
                        }
                      }}
                      role={"img"}
                    />

                    <h1
                      data-plasmic-name={"h1"}
                      data-plasmic-override={overrides.h1}
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1
                      )}
                    >
                      {
                        "\u0686\u0631\u062a\u06a9\u0647\u060c \u0645\u062f\u06cc\u0631\u06cc\u062a \u0627\u0645\u0648\u0631 \u0645\u0627\u0644\u06cc"
                      }
                    </h1>
                  </div>
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___91IpR)}
                >
                  <div
                    data-plasmic-name={"btnDashboard3"}
                    data-plasmic-override={overrides.btnDashboard3}
                    className={classNames(projectcss.all, sty.btnDashboard3)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  return document
                                    .querySelector(".grid_calculator")
                                    .scrollIntoView({ behavior: "smooth" });
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }
                    }}
                  >
                    <Icon6Icon
                      className={classNames(projectcss.all, sty.svg__zfu9B)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mgRWy
                      )}
                    >
                      {
                        "\u0645\u0627\u0634\u06cc\u0646 \u062d\u0633\u0627\u0628"
                      }
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__dxlWt)}>
                  <div
                    data-plasmic-name={"lblUser"}
                    data-plasmic-override={overrides.lblUser}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.lblUser
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.txtUserName;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "\u062d\u062c\u062a \u062e\u0648\u0627\u062c\u0648\u06cc";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  {(() => {
                    try {
                      return $state.btnLogoutShow;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <PlasmicLink__
                      data-plasmic-name={"btnLogout"}
                      data-plasmic-override={overrides.btnLogout}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.btnLogout
                      )}
                      component={Link}
                      href={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? ""
                          : undefined
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps[
                          "goToHttpsPaziresh24ComLogoutUrlHttpsChortkePaziresh24Com"
                        ] = true
                          ? (() => {
                              const actionArgs = {
                                destination:
                                  "https://paziresh24.com/logout?url=https://chortke.paziresh24.com"
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps[
                            "goToHttpsPaziresh24ComLogoutUrlHttpsChortkePaziresh24Com"
                          ] != null &&
                          typeof $steps[
                            "goToHttpsPaziresh24ComLogoutUrlHttpsChortkePaziresh24Com"
                          ] === "object" &&
                          typeof $steps[
                            "goToHttpsPaziresh24ComLogoutUrlHttpsChortkePaziresh24Com"
                          ].then === "function"
                        ) {
                          $steps[
                            "goToHttpsPaziresh24ComLogoutUrlHttpsChortkePaziresh24Com"
                          ] = await $steps[
                            "goToHttpsPaziresh24ComLogoutUrlHttpsChortkePaziresh24Com"
                          ];
                        }
                      }}
                      platform={"nextjs"}
                    >
                      {"\u062e\u0631\u0648\u062c"}
                    </PlasmicLink__>
                  ) : null}
                  {(() => {
                    try {
                      return $state.btnLoginShow;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Button
                      data-plasmic-name={"btnLogin"}
                      data-plasmic-override={overrides.btnLogin}
                      children2={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mzIiF
                          )}
                        >
                          {"\u0648\u0631\u0648\u062f"}
                        </div>
                      }
                      className={classNames("__wab_instance", sty.btnLogin)}
                      link={
                        "https://www.paziresh24.com/login/?redirect_url=https://chortke.paziresh24.com/"
                      }
                      outline={true}
                    />
                  ) : null}
                </div>
              </div>
            </div>
            <section
              data-plasmic-name={"section"}
              data-plasmic-override={overrides.section}
              className={classNames(projectcss.all, sty.section)}
              dir={"rtl"}
            >
              {(() => {
                try {
                  return $state.accounts.length > 1;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div className={classNames(projectcss.all, sty.freeBox__exYj1)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__fdL2R)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xnleN
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return "حساب کاربری:  ";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u062d\u0633\u0627\u0628 \u06a9\u0627\u0631\u0628\u0631\u06cc: ";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <Select
                      data-plasmic-name={"cbAccounts"}
                      data-plasmic-override={overrides.cbAccounts}
                      aria-label={"name"}
                      aria-labelledby={"id"}
                      className={classNames("__wab_instance", sty.cbAccounts)}
                      name={"accounts"}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "cbAccounts",
                            "value"
                          ])(eventArgs[0]);
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }

                        (async value => {
                          const $steps = {};

                          $steps["updateUpdatewallet"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["updatewallet"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateUpdatewallet"] != null &&
                            typeof $steps["updateUpdatewallet"] === "object" &&
                            typeof $steps["updateUpdatewallet"].then ===
                              "function"
                          ) {
                            $steps["updateUpdatewallet"] = await $steps[
                              "updateUpdatewallet"
                            ];
                          }

                          $steps["updateFirstRequestCount"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["firstRequestCount"]
                                  },
                                  operation: 2
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(
                                    objRoot,
                                    variablePath,
                                    oldValue + 1
                                  );
                                  return oldValue + 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateFirstRequestCount"] != null &&
                            typeof $steps["updateFirstRequestCount"] ===
                              "object" &&
                            typeof $steps["updateFirstRequestCount"].then ===
                              "function"
                          ) {
                            $steps["updateFirstRequestCount"] = await $steps[
                              "updateFirstRequestCount"
                            ];
                          }

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return undefined;
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }
                        }).apply(null, eventArgs);
                      }}
                      options={(() => {
                        try {
                          return $state.accounts.map(item => ({
                            value: item.uniqueid.toString(),
                            label: item.name
                          }));
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      placeholder={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vDca2
                          )}
                        >
                          {hasVariant(
                            globalVariants,
                            "screen",
                            "mobileOnly"
                          ) ? (
                            "\u0627\u0646\u062a\u062e\u0627\u0628 \u0646\u0645\u0627\u06cc\u06cc\u062f"
                          ) : (
                            <React.Fragment>
                              {(() => {
                                try {
                                  return "حساب مورد نظر را انتخاب نمایید";
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u0645\u0631\u06a9\u0632 \u0645\u0648\u0631\u062f \u0646\u0638\u0631 \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u0646\u0645\u0627\u06cc\u06cc\u062f";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          )}
                        </div>
                      }
                      value={generateStateValueProp($state, [
                        "cbAccounts",
                        "value"
                      ])}
                    />
                  </div>
                </div>
              ) : null}
              <div
                data-plasmic-name={"gridCalculator2"}
                data-plasmic-override={overrides.gridCalculator2}
                className={classNames(projectcss.all, sty.gridCalculator2)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__pgfVd,
                    "grid_calculator"
                  )}
                  id={"grid_calculator"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___5EkhP)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__nBfbu)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__z6KHi
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___103Mt
                          )}
                        >
                          <div
                            data-plasmic-name={"txtRemainingText"}
                            data-plasmic-override={overrides.txtRemainingText}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.txtRemainingText
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.txtReminderTextValue;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u0645\u0627\u0646\u062f\u0647 \u0628\u062f\u0647\u06cc:";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          <div
                            data-plasmic-name={"txtRemainingValue"}
                            data-plasmic-override={overrides.txtRemainingValue}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.txtRemainingValue
                            )}
                          >
                            {hasVariant(
                              globalVariants,
                              "screen",
                              "mobileOnly"
                            ) ? (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (() => {
                                      return $state.txtReminderValue == 0
                                        ? ""
                                        : $state.txtReminderValue
                                            .toString()
                                            .replace("\u2212", "")
                                            .replace(
                                              /\B(?=(\d{3})+(?!\d))/g,
                                              ","
                                            ) + " ریال";
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "0";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            ) : (
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (() => {
                                      return $state.txtReminderValue == 0
                                        ? ""
                                        : $state.txtReminderValue
                                            .toString()
                                            .replace("\u2212", "")
                                            .replace(
                                              /\B(?=(\d{3})+(?!\d))/g,
                                              ","
                                            ) + " ریال";
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "0";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            )}
                          </div>
                        </div>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__r8Zok)}
                    >
                      {(() => {
                        try {
                          return $state.waiting;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <Icon2Icon
                          className={classNames(projectcss.all, sty.svg__foOee)}
                          role={"img"}
                        />
                      ) : null}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__fyOo)}
                    >
                      {(() => {
                        try {
                          return true;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <Dialog
                          data-plasmic-name={"dialogIncreaseRemaining"}
                          data-plasmic-override={
                            overrides.dialogIncreaseRemaining
                          }
                          body={
                            <React.Fragment>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__rik8F
                                )}
                              />

                              {(() => {
                                try {
                                  return $state.showSelectPriceGrid;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <div
                                  data-plasmic-name={"gridSelectprice"}
                                  data-plasmic-override={
                                    overrides.gridSelectprice
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    sty.gridSelectprice
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__si8Xx
                                    )}
                                  >
                                    {(_par =>
                                      !_par
                                        ? []
                                        : Array.isArray(_par)
                                        ? _par
                                        : [_par])(
                                      (() => {
                                        try {
                                          return $state.increaseButtonList;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [];
                                          }
                                          throw e;
                                        }
                                      })()
                                    ).map(
                                      (__plasmic_item_0, __plasmic_idx_0) => {
                                        const currentItem = __plasmic_item_0;
                                        const currentIndex = __plasmic_idx_0;
                                        return (
                                          <Button
                                            data-plasmic-name={
                                              "btnSelectAmount"
                                            }
                                            data-plasmic-override={
                                              overrides.btnSelectAmount
                                            }
                                            children2={
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text___6RoEf
                                                )}
                                              >
                                                {hasVariant(
                                                  globalVariants,
                                                  "screen",
                                                  "mobileOnly"
                                                ) ? (
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return new Intl.NumberFormat(
                                                          "fa-IR"
                                                        ).format(
                                                          $state
                                                            .increaseButtonList[
                                                            currentIndex
                                                          ]
                                                        );
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "Button";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                ) : (
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return (
                                                          new Intl.NumberFormat(
                                                            "fa-IR"
                                                          ).format(
                                                            $state
                                                              .increaseButtonList[
                                                              currentIndex
                                                            ]
                                                          ) + " ریال"
                                                        );
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "Button";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                )}
                                              </div>
                                            }
                                            className={classNames(
                                              "__wab_instance",
                                              sty.btnSelectAmount
                                            )}
                                            color={"green"}
                                            key={currentIndex}
                                            onClick={async event => {
                                              const $steps = {};

                                              $steps["updatePaymentAmount"] =
                                                true
                                                  ? (() => {
                                                      const actionArgs = {
                                                        variable: {
                                                          objRoot: $state,
                                                          variablePath: [
                                                            "paymentAmount"
                                                          ]
                                                        },
                                                        operation: 0,
                                                        value:
                                                          $state
                                                            .increaseButtonList[
                                                            currentIndex
                                                          ]
                                                      };
                                                      return (({
                                                        variable,
                                                        value,
                                                        startIndex,
                                                        deleteCount
                                                      }) => {
                                                        if (!variable) {
                                                          return;
                                                        }
                                                        const {
                                                          objRoot,
                                                          variablePath
                                                        } = variable;

                                                        $stateSet(
                                                          objRoot,
                                                          variablePath,
                                                          value
                                                        );
                                                        return value;
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                              if (
                                                $steps["updatePaymentAmount"] !=
                                                  null &&
                                                typeof $steps[
                                                  "updatePaymentAmount"
                                                ] === "object" &&
                                                typeof $steps[
                                                  "updatePaymentAmount"
                                                ].then === "function"
                                              ) {
                                                $steps["updatePaymentAmount"] =
                                                  await $steps[
                                                    "updatePaymentAmount"
                                                  ];
                                              }

                                              $steps["runCode"] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      customFunction:
                                                        async () => {
                                                          return ($state.txtNewPaymentAmount.value =
                                                            $state.increaseButtonList[
                                                              currentIndex
                                                            ]);
                                                        }
                                                    };
                                                    return (({
                                                      customFunction
                                                    }) => {
                                                      return customFunction();
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps["runCode"] != null &&
                                                typeof $steps["runCode"] ===
                                                  "object" &&
                                                typeof $steps["runCode"]
                                                  .then === "function"
                                              ) {
                                                $steps["runCode"] =
                                                  await $steps["runCode"];
                                              }
                                            }}
                                          />
                                        );
                                      }
                                    )}
                                    <Button
                                      children2={"..."}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.button__hl4N1
                                      )}
                                      color={"green"}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps["runCode"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                customFunction: async () => {
                                                  return ($state.showMyAmount =
                                                    !$state.showMyAmount);
                                                }
                                              };
                                              return (({ customFunction }) => {
                                                return customFunction();
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["runCode"] != null &&
                                          typeof $steps["runCode"] ===
                                            "object" &&
                                          typeof $steps["runCode"].then ===
                                            "function"
                                        ) {
                                          $steps["runCode"] = await $steps[
                                            "runCode"
                                          ];
                                        }
                                      }}
                                    />
                                  </div>
                                </div>
                              ) : null}
                              {(
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? true
                                  : (() => {
                                      try {
                                        return $state.showMyAmount;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return true;
                                        }
                                        throw e;
                                      }
                                    })()
                              ) ? (
                                <div
                                  data-plasmic-name={"gridMyAmount"}
                                  data-plasmic-override={overrides.gridMyAmount}
                                  className={classNames(
                                    projectcss.all,
                                    sty.gridMyAmount
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__dXhUe
                                    )}
                                  />

                                  {(
                                    hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? (() => {
                                          try {
                                            return $state.showMyAmount;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return true;
                                            }
                                            throw e;
                                          }
                                        })()
                                      : true
                                  ) ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__xUjDx
                                      )}
                                      dir={"rtl"}
                                    >
                                      <TextInput
                                        data-plasmic-name={
                                          "txtNewPaymentAmount"
                                        }
                                        data-plasmic-override={
                                          overrides.txtNewPaymentAmount
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.txtNewPaymentAmount
                                        )}
                                        onChange={async (...eventArgs: any) => {
                                          ((...eventArgs) => {
                                            generateStateOnChangeProp($state, [
                                              "txtNewPaymentAmount",
                                              "value"
                                            ])(
                                              (e => e.target?.value).apply(
                                                null,
                                                eventArgs
                                              )
                                            );
                                          }).apply(null, eventArgs);

                                          if (
                                            eventArgs.length > 1 &&
                                            eventArgs[1] &&
                                            eventArgs[1]._plasmic_state_init_
                                          ) {
                                            return;
                                          }

                                          (async event => {
                                            const $steps = {};

                                            $steps["updatePaymentAmount"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    variable: {
                                                      objRoot: $state,
                                                      variablePath: [
                                                        "paymentAmount"
                                                      ]
                                                    },
                                                    operation: 0,
                                                    value:
                                                      $state.txtNewPaymentAmount
                                                        .value
                                                  };
                                                  return (({
                                                    variable,
                                                    value,
                                                    startIndex,
                                                    deleteCount
                                                  }) => {
                                                    if (!variable) {
                                                      return;
                                                    }
                                                    const {
                                                      objRoot,
                                                      variablePath
                                                    } = variable;

                                                    $stateSet(
                                                      objRoot,
                                                      variablePath,
                                                      value
                                                    );
                                                    return value;
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["updatePaymentAmount"] !=
                                                null &&
                                              typeof $steps[
                                                "updatePaymentAmount"
                                              ] === "object" &&
                                              typeof $steps[
                                                "updatePaymentAmount"
                                              ].then === "function"
                                            ) {
                                              $steps["updatePaymentAmount"] =
                                                await $steps[
                                                  "updatePaymentAmount"
                                                ];
                                            }
                                          }).apply(null, eventArgs);
                                        }}
                                        placeholder={
                                          "\u0645\u0628\u0644\u063a \u0645\u0648\u0631\u062f \u0646\u0638\u0631 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f"
                                        }
                                        type={"number"}
                                        value={
                                          generateStateValueProp($state, [
                                            "txtNewPaymentAmount",
                                            "value"
                                          ]) ?? ""
                                        }
                                      />

                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__vBkpO
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return (() => {
                                                function numberToPersianWords(
                                                  num
                                                ) {
                                                  if (
                                                    num == "" ||
                                                    num == 0 ||
                                                    num == "0" ||
                                                    num == "NaN"
                                                  ) {
                                                    return "صفر";
                                                  }
                                                  const yekan = [
                                                    "",
                                                    "یک",
                                                    "دو",
                                                    "سه",
                                                    "چهار",
                                                    "پنج",
                                                    "شش",
                                                    "هفت",
                                                    "هشت",
                                                    "نه"
                                                  ];

                                                  const dahgan = [
                                                    "",
                                                    "ده",
                                                    "بیست",
                                                    "سی",
                                                    "چهل",
                                                    "پنجاه",
                                                    "شصت",
                                                    "هفتاد",
                                                    "هشتاد",
                                                    "نود"
                                                  ];

                                                  const sadgan = [
                                                    "",
                                                    "صد",
                                                    "دویست",
                                                    "سیصد",
                                                    "چهارصد",
                                                    "پانصد",
                                                    "ششصد",
                                                    "هفتصد",
                                                    "هشتصد",
                                                    "نهصد"
                                                  ];

                                                  const dah = [
                                                    "ده",
                                                    "یازده",
                                                    "دوازده",
                                                    "سیزده",
                                                    "چهارده",
                                                    "پانزده",
                                                    "شانزده",
                                                    "هفده",
                                                    "هجده",
                                                    "نوزده"
                                                  ];

                                                  const parts = [
                                                    "",
                                                    "هزار",
                                                    "میلیون",
                                                    "میلیارد",
                                                    "تریلیون"
                                                  ];

                                                  if (num === 0) return "صفر";
                                                  num = Math.floor(num);
                                                  const groups = [];
                                                  while (num > 0) {
                                                    groups.push(num % 1000);
                                                    num = Math.floor(
                                                      num / 1000
                                                    );
                                                  }
                                                  const convertThreeDigits =
                                                    n => {
                                                      let words = [];
                                                      let s = Math.floor(
                                                        n / 100
                                                      );
                                                      let d = Math.floor(
                                                        (n % 100) / 10
                                                      );
                                                      let y = n % 10;
                                                      if (s > 0)
                                                        words.push(sadgan[s]);
                                                      if (d === 1 && y > 0) {
                                                        words.push(dah[y]);
                                                      } else {
                                                        if (d > 0)
                                                          words.push(dahgan[d]);
                                                        if (y > 0)
                                                          words.push(yekan[y]);
                                                      }
                                                      return words.join(" و ");
                                                    };
                                                  const result = [];
                                                  for (
                                                    let i = 0;
                                                    i < groups.length;
                                                    i++
                                                  ) {
                                                    if (groups[i] !== 0) {
                                                      let words =
                                                        convertThreeDigits(
                                                          groups[i]
                                                        );
                                                      if (parts[i]) {
                                                        words += " " + parts[i];
                                                      }
                                                      result.unshift(words);
                                                    }
                                                  }
                                                  return result.join(" و ");
                                                }
                                                return (
                                                  numberToPersianWords(
                                                    $state.paymentAmount
                                                  ) + " ریال"
                                                );
                                              })();
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </div>
                                  ) : null}
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__lTay
                                    )}
                                  />
                                </div>
                              ) : null}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__y1Fq6
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__aFKta
                                  )}
                                >
                                  <Button
                                    children2={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__qJNlu
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return "ارسال به درگاه پرداخت";
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "\u0627\u0631\u0633\u0627\u0644 \u0628\u0647 \u062f\u0631\u06af\u0627\u0647";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.button__eT7XK
                                    )}
                                    isDisabled={(() => {
                                      try {
                                        return $state.waitingPayment;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()}
                                    onClick={async event => {
                                      const $steps = {};

                                      $steps["showWaitingPayment"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["waitingPayment"]
                                              },
                                              operation: 0,
                                              value: true
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["showWaitingPayment"] != null &&
                                        typeof $steps["showWaitingPayment"] ===
                                          "object" &&
                                        typeof $steps["showWaitingPayment"]
                                          .then === "function"
                                      ) {
                                        $steps["showWaitingPayment"] =
                                          await $steps["showWaitingPayment"];
                                      }

                                      $steps["paymentRequest"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              args: [
                                                "POST",
                                                "https://apigw.paziresh24.com/katibe/v1/paymentlink/p24",
                                                undefined,
                                                (() => {
                                                  try {
                                                    return {
                                                      productid:
                                                        $state.currentAccountType ==
                                                        "centerid"
                                                          ? "7"
                                                          : "1",
                                                      returnlink:
                                                        "aHR0cHM6Ly93d3cucGF6aXJlc2gyNC5jb20vZGFzaGJvYXJkL2FwcHMva2F0aWJlL2ZhY3RvcnMv",
                                                      title: "افزایش موجودی",
                                                      amount:
                                                        $state.paymentAmount,
                                                      centerid:
                                                        $state.currentAccountId,
                                                      account:
                                                        $state.currentAccountAccount
                                                    };
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return undefined;
                                                    }
                                                    throw e;
                                                  }
                                                })()
                                              ]
                                            };
                                            return $globalActions[
                                              "Fragment.apiRequest"
                                            ]?.apply(null, [
                                              ...actionArgs.args
                                            ]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["paymentRequest"] != null &&
                                        typeof $steps["paymentRequest"] ===
                                          "object" &&
                                        typeof $steps["paymentRequest"].then ===
                                          "function"
                                      ) {
                                        $steps["paymentRequest"] = await $steps[
                                          "paymentRequest"
                                        ];
                                      }

                                      $steps["updatePaymentLink"] =
                                        $steps.paymentRequest.status == 200 &&
                                        $steps.paymentRequest.data.status ==
                                          true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["paymentLink"]
                                                },
                                                operation: 0,
                                                value:
                                                  $steps.paymentRequest.data
                                                    .data.link
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["updatePaymentLink"] != null &&
                                        typeof $steps["updatePaymentLink"] ===
                                          "object" &&
                                        typeof $steps["updatePaymentLink"]
                                          .then === "function"
                                      ) {
                                        $steps["updatePaymentLink"] =
                                          await $steps["updatePaymentLink"];
                                      }

                                      $steps["redirectUser"] =
                                        $steps.paymentRequest.status == 200 &&
                                        $steps.paymentRequest.data.status ==
                                          true
                                          ? (() => {
                                              const actionArgs = {
                                                args: [
                                                  (() => {
                                                    try {
                                                      return $state.paymentLink;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })()
                                                ]
                                              };
                                              return $globalActions[
                                                "Hamdast.openLink"
                                              ]?.apply(null, [
                                                ...actionArgs.args
                                              ]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["redirectUser"] != null &&
                                        typeof $steps["redirectUser"] ===
                                          "object" &&
                                        typeof $steps["redirectUser"].then ===
                                          "function"
                                      ) {
                                        $steps["redirectUser"] = await $steps[
                                          "redirectUser"
                                        ];
                                      }

                                      $steps["hideWaitingPayment"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["waitingPayment"]
                                              },
                                              operation: 0,
                                              value: false
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["hideWaitingPayment"] != null &&
                                        typeof $steps["hideWaitingPayment"] ===
                                          "object" &&
                                        typeof $steps["hideWaitingPayment"]
                                          .then === "function"
                                      ) {
                                        $steps["hideWaitingPayment"] =
                                          await $steps["hideWaitingPayment"];
                                      }
                                    }}
                                    size={"compact"}
                                  />
                                </div>
                                {(() => {
                                  try {
                                    return (
                                      $state.userData.isDoctor &&
                                      $state.currentAccountType == "userid"
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__eGuaD
                                    )}
                                  >
                                    <Button
                                      data-plasmic-name={"btnPayWithWallet"}
                                      data-plasmic-override={
                                        overrides.btnPayWithWallet
                                      }
                                      children2={
                                        <div
                                          data-plasmic-name={"txtpayWithWallet"}
                                          data-plasmic-override={
                                            overrides.txtpayWithWallet
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.txtpayWithWallet
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return (
                                                  "پرداخت با کیف پول ویزیت آنلاین - موجودی: " +
                                                  new Intl.NumberFormat(
                                                    "fa-IR"
                                                  ).format($state.p24Balance) +
                                                  " ریال"
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.btnPayWithWallet
                                      )}
                                      color={"softBlue"}
                                      isDisabled={(() => {
                                        try {
                                          return (
                                            $state.waitingPayment ||
                                            $state.p24Balance <
                                              parseInt($state.paymentAmount)
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [];
                                          }
                                          throw e;
                                        }
                                      })()}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps["showWaitingPayment"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "waitingPayment"
                                                  ]
                                                },
                                                operation: 0,
                                                value: true
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["showWaitingPayment"] !=
                                            null &&
                                          typeof $steps[
                                            "showWaitingPayment"
                                          ] === "object" &&
                                          typeof $steps["showWaitingPayment"]
                                            .then === "function"
                                        ) {
                                          $steps["showWaitingPayment"] =
                                            await $steps["showWaitingPayment"];
                                        }

                                        $steps["paymentRequest"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                args: [
                                                  "POST",
                                                  "https://apigw.paziresh24.com/katibe/v1/factors/p24/pay",
                                                  undefined,
                                                  (() => {
                                                    try {
                                                      return {
                                                        amount: parseInt(
                                                          $state.paymentAmount
                                                        )
                                                      };
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })()
                                                ]
                                              };
                                              return $globalActions[
                                                "Fragment.apiRequest"
                                              ]?.apply(null, [
                                                ...actionArgs.args
                                              ]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["paymentRequest"] != null &&
                                          typeof $steps["paymentRequest"] ===
                                            "object" &&
                                          typeof $steps["paymentRequest"]
                                            .then === "function"
                                        ) {
                                          $steps["paymentRequest"] =
                                            await $steps["paymentRequest"];
                                        }

                                        $steps["hideWaitingPayment"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "waitingPayment"
                                                  ]
                                                },
                                                operation: 0,
                                                value: false
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["hideWaitingPayment"] !=
                                            null &&
                                          typeof $steps[
                                            "hideWaitingPayment"
                                          ] === "object" &&
                                          typeof $steps["hideWaitingPayment"]
                                            .then === "function"
                                        ) {
                                          $steps["hideWaitingPayment"] =
                                            await $steps["hideWaitingPayment"];
                                        }

                                        $steps[
                                          "updateRequestSettlementMessage"
                                        ] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "requestSettlementMessage"
                                                  ]
                                                },
                                                operation: 0,
                                                value:
                                                  $steps.paymentRequest.data
                                                    .message
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps[
                                            "updateRequestSettlementMessage"
                                          ] != null &&
                                          typeof $steps[
                                            "updateRequestSettlementMessage"
                                          ] === "object" &&
                                          typeof $steps[
                                            "updateRequestSettlementMessage"
                                          ].then === "function"
                                        ) {
                                          $steps[
                                            "updateRequestSettlementMessage"
                                          ] = await $steps[
                                            "updateRequestSettlementMessage"
                                          ];
                                        }

                                        $steps["invokeGlobalAction"] =
                                          $steps.paymentRequest.status == 200
                                            ? (() => {
                                                const actionArgs = {
                                                  args: [
                                                    undefined,
                                                    "\u067e\u0631\u062f\u0627\u062e\u062a \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0627\u0646\u062c\u0627\u0645 \u0634\u062f."
                                                  ]
                                                };
                                                return $globalActions[
                                                  "Fragment.showToast"
                                                ]?.apply(null, [
                                                  ...actionArgs.args
                                                ]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps["invokeGlobalAction"] !=
                                            null &&
                                          typeof $steps[
                                            "invokeGlobalAction"
                                          ] === "object" &&
                                          typeof $steps["invokeGlobalAction"]
                                            .then === "function"
                                        ) {
                                          $steps["invokeGlobalAction"] =
                                            await $steps["invokeGlobalAction"];
                                        }

                                        $steps["invokeGlobalAction2"] =
                                          $steps.paymentRequest.status != 200
                                            ? (() => {
                                                const actionArgs = {
                                                  args: [
                                                    "error",
                                                    (() => {
                                                      try {
                                                        return $state.requestSettlementMessage;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })()
                                                  ]
                                                };
                                                return $globalActions[
                                                  "Fragment.showToast"
                                                ]?.apply(null, [
                                                  ...actionArgs.args
                                                ]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps["invokeGlobalAction2"] !=
                                            null &&
                                          typeof $steps[
                                            "invokeGlobalAction2"
                                          ] === "object" &&
                                          typeof $steps["invokeGlobalAction2"]
                                            .then === "function"
                                        ) {
                                          $steps["invokeGlobalAction2"] =
                                            await $steps["invokeGlobalAction2"];
                                        }

                                        $steps["runCode"] =
                                          $steps.paymentRequest.status == 200
                                            ? (() => {
                                                const actionArgs = {
                                                  customFunction: async () => {
                                                    return (() => {
                                                      $state.firstRequestCount =
                                                        $state.firstRequestCount +
                                                        1;
                                                      return ($state.dialogIncreaseRemaining.open =
                                                        false);
                                                    })();
                                                  }
                                                };
                                                return (({
                                                  customFunction
                                                }) => {
                                                  return customFunction();
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps["runCode"] != null &&
                                          typeof $steps["runCode"] ===
                                            "object" &&
                                          typeof $steps["runCode"].then ===
                                            "function"
                                        ) {
                                          $steps["runCode"] = await $steps[
                                            "runCode"
                                          ];
                                        }
                                      }}
                                      outline={true}
                                      size={"compact"}
                                    />

                                    {(() => {
                                      try {
                                        return (() => {
                                          return $state.drCenters.find(
                                            item => item.id !== "5532"
                                          )
                                            ? true
                                            : false;
                                        })();
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return true;
                                        }
                                        throw e;
                                      }
                                    })() ? (
                                      <Button
                                        data-plasmic-name={"btnPayWithWallet3"}
                                        data-plasmic-override={
                                          overrides.btnPayWithWallet3
                                        }
                                        children2={
                                          <div
                                            data-plasmic-name={
                                              "txtpayWithWallet3"
                                            }
                                            data-plasmic-override={
                                              overrides.txtpayWithWallet3
                                            }
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.txtpayWithWallet3
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return (() => {
                                                    const firstNot5532 =
                                                      $state.drCenters.find(
                                                        item =>
                                                          item.id !== "5532"
                                                      );
                                                    return (
                                                      "پرداخت با کیف پول " +
                                                      firstNot5532.name +
                                                      " - موجودی: " +
                                                      new Intl.NumberFormat(
                                                        "fa-IR"
                                                      ).format(
                                                        $state.centerbalance
                                                      )
                                                    );
                                                  })();
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.btnPayWithWallet3
                                        )}
                                        color={"softBlue"}
                                        isDisabled={(() => {
                                          try {
                                            return (
                                              $state.waitingPayment ||
                                              $state.centerbalance <
                                                parseInt($state.paymentAmount)
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return [];
                                            }
                                            throw e;
                                          }
                                        })()}
                                        onClick={async event => {
                                          const $steps = {};

                                          $steps["showWaitingPayment"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "waitingPayment"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value: true
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["showWaitingPayment"] !=
                                              null &&
                                            typeof $steps[
                                              "showWaitingPayment"
                                            ] === "object" &&
                                            typeof $steps["showWaitingPayment"]
                                              .then === "function"
                                          ) {
                                            $steps["showWaitingPayment"] =
                                              await $steps[
                                                "showWaitingPayment"
                                              ];
                                          }

                                          $steps["paymentRequest"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  args: [
                                                    "POST",
                                                    "https://apigw.paziresh24.com/katibe/v1/factors/p24/pay",
                                                    undefined,
                                                    (() => {
                                                      try {
                                                        return (() => {
                                                          const firstNot5532 =
                                                            $state.drCenters.find(
                                                              item =>
                                                                item.id !==
                                                                "5532"
                                                            );
                                                          return {
                                                            amount: parseInt(
                                                              $state.paymentAmount
                                                            ),
                                                            centerid:
                                                              firstNot5532.id
                                                          };
                                                        })();
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })()
                                                  ]
                                                };
                                                return $globalActions[
                                                  "Fragment.apiRequest"
                                                ]?.apply(null, [
                                                  ...actionArgs.args
                                                ]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["paymentRequest"] != null &&
                                            typeof $steps["paymentRequest"] ===
                                              "object" &&
                                            typeof $steps["paymentRequest"]
                                              .then === "function"
                                          ) {
                                            $steps["paymentRequest"] =
                                              await $steps["paymentRequest"];
                                          }

                                          $steps["hideWaitingPayment"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "waitingPayment"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value: false
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["hideWaitingPayment"] !=
                                              null &&
                                            typeof $steps[
                                              "hideWaitingPayment"
                                            ] === "object" &&
                                            typeof $steps["hideWaitingPayment"]
                                              .then === "function"
                                          ) {
                                            $steps["hideWaitingPayment"] =
                                              await $steps[
                                                "hideWaitingPayment"
                                              ];
                                          }

                                          $steps[
                                            "updateRequestSettlementMessage"
                                          ] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "requestSettlementMessage"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value:
                                                    $steps.paymentRequest.data
                                                      .message
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps[
                                              "updateRequestSettlementMessage"
                                            ] != null &&
                                            typeof $steps[
                                              "updateRequestSettlementMessage"
                                            ] === "object" &&
                                            typeof $steps[
                                              "updateRequestSettlementMessage"
                                            ].then === "function"
                                          ) {
                                            $steps[
                                              "updateRequestSettlementMessage"
                                            ] = await $steps[
                                              "updateRequestSettlementMessage"
                                            ];
                                          }

                                          $steps["invokeGlobalAction"] =
                                            $steps.paymentRequest.status == 200
                                              ? (() => {
                                                  const actionArgs = {
                                                    args: [
                                                      undefined,
                                                      "\u067e\u0631\u062f\u0627\u062e\u062a \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0627\u0646\u062c\u0627\u0645 \u0634\u062f."
                                                    ]
                                                  };
                                                  return $globalActions[
                                                    "Fragment.showToast"
                                                  ]?.apply(null, [
                                                    ...actionArgs.args
                                                  ]);
                                                })()
                                              : undefined;
                                          if (
                                            $steps["invokeGlobalAction"] !=
                                              null &&
                                            typeof $steps[
                                              "invokeGlobalAction"
                                            ] === "object" &&
                                            typeof $steps["invokeGlobalAction"]
                                              .then === "function"
                                          ) {
                                            $steps["invokeGlobalAction"] =
                                              await $steps[
                                                "invokeGlobalAction"
                                              ];
                                          }

                                          $steps["invokeGlobalAction2"] =
                                            $steps.paymentRequest.status != 200
                                              ? (() => {
                                                  const actionArgs = {
                                                    args: [
                                                      "error",
                                                      (() => {
                                                        try {
                                                          return $state.requestSettlementMessage;
                                                        } catch (e) {
                                                          if (
                                                            e instanceof
                                                              TypeError ||
                                                            e?.plasmicType ===
                                                              "PlasmicUndefinedDataError"
                                                          ) {
                                                            return undefined;
                                                          }
                                                          throw e;
                                                        }
                                                      })()
                                                    ]
                                                  };
                                                  return $globalActions[
                                                    "Fragment.showToast"
                                                  ]?.apply(null, [
                                                    ...actionArgs.args
                                                  ]);
                                                })()
                                              : undefined;
                                          if (
                                            $steps["invokeGlobalAction2"] !=
                                              null &&
                                            typeof $steps[
                                              "invokeGlobalAction2"
                                            ] === "object" &&
                                            typeof $steps["invokeGlobalAction2"]
                                              .then === "function"
                                          ) {
                                            $steps["invokeGlobalAction2"] =
                                              await $steps[
                                                "invokeGlobalAction2"
                                              ];
                                          }

                                          $steps["runCode"] =
                                            $steps.paymentRequest.status == 200
                                              ? (() => {
                                                  const actionArgs = {
                                                    customFunction:
                                                      async () => {
                                                        return (() => {
                                                          $state.firstRequestCount =
                                                            $state.firstRequestCount +
                                                            1;
                                                          return ($state.dialogIncreaseRemaining.open =
                                                            false);
                                                        })();
                                                      }
                                                  };
                                                  return (({
                                                    customFunction
                                                  }) => {
                                                    return customFunction();
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                          if (
                                            $steps["runCode"] != null &&
                                            typeof $steps["runCode"] ===
                                              "object" &&
                                            typeof $steps["runCode"].then ===
                                              "function"
                                          ) {
                                            $steps["runCode"] = await $steps[
                                              "runCode"
                                            ];
                                          }
                                        }}
                                        outline={true}
                                        size={"compact"}
                                      />
                                    ) : null}
                                    <Button
                                      data-plasmic-name={"btnPayWithWallet2"}
                                      data-plasmic-override={
                                        overrides.btnPayWithWallet2
                                      }
                                      children2={
                                        <div
                                          data-plasmic-name={
                                            "txtpayWithWallet2"
                                          }
                                          data-plasmic-override={
                                            overrides.txtpayWithWallet2
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.txtpayWithWallet2
                                          )}
                                        >
                                          {
                                            "\u067e\u0631\u062f\u0627\u062e\u062a \u0628\u0627 \u06a9\u06cc\u0641 \u067e\u0648\u0644 \u0645\u0637\u0628"
                                          }
                                        </div>
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.btnPayWithWallet2
                                      )}
                                      isDisabled={(() => {
                                        try {
                                          return $state.waitingPayment;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return [];
                                          }
                                          throw e;
                                        }
                                      })()}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps["showWaitingPayment"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "waitingPayment"
                                                  ]
                                                },
                                                operation: 0,
                                                value: true
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["showWaitingPayment"] !=
                                            null &&
                                          typeof $steps[
                                            "showWaitingPayment"
                                          ] === "object" &&
                                          typeof $steps["showWaitingPayment"]
                                            .then === "function"
                                        ) {
                                          $steps["showWaitingPayment"] =
                                            await $steps["showWaitingPayment"];
                                        }

                                        $steps["paymentRequest"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                args: [
                                                  "POST",
                                                  "https://apigw.paziresh24.com/katibe/v1/factors/p24/pay",
                                                  undefined,
                                                  (() => {
                                                    try {
                                                      return {
                                                        amount: parseInt(
                                                          $state.paymentAmount
                                                        )
                                                      };
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })()
                                                ]
                                              };
                                              return $globalActions[
                                                "Fragment.apiRequest"
                                              ]?.apply(null, [
                                                ...actionArgs.args
                                              ]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["paymentRequest"] != null &&
                                          typeof $steps["paymentRequest"] ===
                                            "object" &&
                                          typeof $steps["paymentRequest"]
                                            .then === "function"
                                        ) {
                                          $steps["paymentRequest"] =
                                            await $steps["paymentRequest"];
                                        }

                                        $steps["hideWaitingPayment"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "waitingPayment"
                                                  ]
                                                },
                                                operation: 0,
                                                value: false
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["hideWaitingPayment"] !=
                                            null &&
                                          typeof $steps[
                                            "hideWaitingPayment"
                                          ] === "object" &&
                                          typeof $steps["hideWaitingPayment"]
                                            .then === "function"
                                        ) {
                                          $steps["hideWaitingPayment"] =
                                            await $steps["hideWaitingPayment"];
                                        }

                                        $steps[
                                          "updateRequestSettlementMessage"
                                        ] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "requestSettlementMessage"
                                                  ]
                                                },
                                                operation: 0,
                                                value:
                                                  $steps.paymentRequest.data
                                                    .message
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps[
                                            "updateRequestSettlementMessage"
                                          ] != null &&
                                          typeof $steps[
                                            "updateRequestSettlementMessage"
                                          ] === "object" &&
                                          typeof $steps[
                                            "updateRequestSettlementMessage"
                                          ].then === "function"
                                        ) {
                                          $steps[
                                            "updateRequestSettlementMessage"
                                          ] = await $steps[
                                            "updateRequestSettlementMessage"
                                          ];
                                        }

                                        $steps["invokeGlobalAction"] =
                                          $steps.paymentRequest.status == 200
                                            ? (() => {
                                                const actionArgs = {
                                                  args: [
                                                    undefined,
                                                    "\u067e\u0631\u062f\u0627\u062e\u062a \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u0627\u0646\u062c\u0627\u0645 \u0634\u062f."
                                                  ]
                                                };
                                                return $globalActions[
                                                  "Fragment.showToast"
                                                ]?.apply(null, [
                                                  ...actionArgs.args
                                                ]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps["invokeGlobalAction"] !=
                                            null &&
                                          typeof $steps[
                                            "invokeGlobalAction"
                                          ] === "object" &&
                                          typeof $steps["invokeGlobalAction"]
                                            .then === "function"
                                        ) {
                                          $steps["invokeGlobalAction"] =
                                            await $steps["invokeGlobalAction"];
                                        }

                                        $steps["invokeGlobalAction2"] =
                                          $steps.paymentRequest.status != 200
                                            ? (() => {
                                                const actionArgs = {
                                                  args: [
                                                    "error",
                                                    (() => {
                                                      try {
                                                        return $state.requestSettlementMessage;
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return undefined;
                                                        }
                                                        throw e;
                                                      }
                                                    })()
                                                  ]
                                                };
                                                return $globalActions[
                                                  "Fragment.showToast"
                                                ]?.apply(null, [
                                                  ...actionArgs.args
                                                ]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps["invokeGlobalAction2"] !=
                                            null &&
                                          typeof $steps[
                                            "invokeGlobalAction2"
                                          ] === "object" &&
                                          typeof $steps["invokeGlobalAction2"]
                                            .then === "function"
                                        ) {
                                          $steps["invokeGlobalAction2"] =
                                            await $steps["invokeGlobalAction2"];
                                        }

                                        $steps["runCode"] =
                                          $steps.paymentRequest.status == 200
                                            ? (() => {
                                                const actionArgs = {
                                                  customFunction: async () => {
                                                    return (() => {
                                                      $state.firstRequestCount =
                                                        $state.firstRequestCount +
                                                        1;
                                                      return ($state.dialogIncreaseRemaining.open =
                                                        false);
                                                    })();
                                                  }
                                                };
                                                return (({
                                                  customFunction
                                                }) => {
                                                  return customFunction();
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps["runCode"] != null &&
                                          typeof $steps["runCode"] ===
                                            "object" &&
                                          typeof $steps["runCode"].then ===
                                            "function"
                                        ) {
                                          $steps["runCode"] = await $steps[
                                            "runCode"
                                          ];
                                        }
                                      }}
                                      size={"compact"}
                                    />
                                  </div>
                                ) : null}
                              </div>
                            </React.Fragment>
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.dialogIncreaseRemaining
                          )}
                          onOpenChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "dialogIncreaseRemaining",
                              "open"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          open={generateStateValueProp($state, [
                            "dialogIncreaseRemaining",
                            "open"
                          ])}
                          title={
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__u5Nl
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___5JIpI
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__sssw1
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__lEv
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return (() => {
                                            return $state.txtPaymentText + ":";
                                          })();
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "\u0627\u0641\u0632\u0627\u06cc\u0634 \u0645\u0648\u062c\u0648\u062f\u06cc:";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___93Zy
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__ldZ7
                                    )}
                                  >
                                    {
                                      "\u0627\u0628\u062a\u062f\u0627 \u0645\u0628\u0644\u063a \u0645\u0648\u0631\u062f \u0646\u0638\u0631 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0631\u062f\u0647 \u0648 \u0633\u067e\u0633 \u062f\u06a9\u0645\u0647 \u067e\u0631\u062f\u0627\u062e\u062a \u0631\u0627 \u0628\u0632\u0646\u06cc\u062f:"
                                    }
                                  </div>
                                  {(() => {
                                    try {
                                      return $state.waitingPayment;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <Icon2Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg___869BU
                                      )}
                                      role={"img"}
                                    />
                                  ) : null}
                                </div>
                              </div>
                            </div>
                          }
                          trigger={
                            (() => {
                              try {
                                return !$state.waiting;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <Button
                                data-plasmic-name={"btnPay"}
                                data-plasmic-override={overrides.btnPay}
                                children2={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___5QmkT
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $state.txtPaymentText;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "\u067e\u0631\u062f\u0627\u062e\u062a";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                }
                                className={classNames(
                                  "__wab_instance",
                                  sty.btnPay
                                )}
                                color={(() => {
                                  try {
                                    return (() => {
                                      return $state.reminderWallet > 0
                                        ? "green"
                                        : "yellow";
                                    })();
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "green";
                                    }
                                    throw e;
                                  }
                                })()}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["buttonList"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          customFunction: async () => {
                                            return (() => {
                                              $state.increaseButtonList =
                                                $state.reminderWallet < 0
                                                  ? [
                                                      Math.abs(
                                                        $state.reminderWallet
                                                      )
                                                    ]
                                                  : $state.increaseButtonListBase;
                                              $state.paymentAmount =
                                                $state.reminderWallet < 0
                                                  ? Math.abs(
                                                      $state.reminderWallet
                                                    )
                                                  : $state
                                                      .increaseButtonListBase[0];
                                              return ($state.showSelectPriceGrid =
                                                true);
                                            })();
                                          }
                                        };
                                        return (({ customFunction }) => {
                                          return customFunction();
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["buttonList"] != null &&
                                    typeof $steps["buttonList"] === "object" &&
                                    typeof $steps["buttonList"].then ===
                                      "function"
                                  ) {
                                    $steps["buttonList"] = await $steps[
                                      "buttonList"
                                    ];
                                  }

                                  $steps["runCode"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          customFunction: async () => {
                                            return (() => {
                                              $state.txtNewPaymentAmount.value =
                                                $state.reminderWallet < 0
                                                  ? Math.abs(
                                                      $state.reminderWallet
                                                    )
                                                  : $state.reminderWallet;
                                              $state.showSelectPriceGrid =
                                                false;
                                              if ($state.reminderWallet >= 0)
                                                $state.showSelectPriceGrid =
                                                  true;
                                              return ($state.showMyAmount =
                                                true);
                                            })();
                                          }
                                        };
                                        return (({ customFunction }) => {
                                          return customFunction();
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["runCode"] != null &&
                                    typeof $steps["runCode"] === "object" &&
                                    typeof $steps["runCode"].then === "function"
                                  ) {
                                    $steps["runCode"] = await $steps["runCode"];
                                  }

                                  $steps["balanceP24"] = $state.userData
                                    .isDoctor
                                    ? (() => {
                                        const actionArgs = {
                                          args: [
                                            undefined,
                                            "https://apigw.paziresh24.com/katibe/v1/transactions/balance/p24"
                                          ]
                                        };
                                        return $globalActions[
                                          "Fragment.apiRequest"
                                        ]?.apply(null, [...actionArgs.args]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["balanceP24"] != null &&
                                    typeof $steps["balanceP24"] === "object" &&
                                    typeof $steps["balanceP24"].then ===
                                      "function"
                                  ) {
                                    $steps["balanceP24"] = await $steps[
                                      "balanceP24"
                                    ];
                                  }

                                  $steps["updateBalance"] =
                                    $steps.balanceP24.status == 200 &&
                                    $state.userData.isDoctor
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["p24Balance"]
                                            },
                                            operation: 0,
                                            value:
                                              $steps.balanceP24.data.data
                                                .balance
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["updateBalance"] != null &&
                                    typeof $steps["updateBalance"] ===
                                      "object" &&
                                    typeof $steps["updateBalance"].then ===
                                      "function"
                                  ) {
                                    $steps["updateBalance"] = await $steps[
                                      "updateBalance"
                                    ];
                                  }

                                  $steps["balanceCenter"] = $state.userData
                                    .isDoctor
                                    ? (() => {
                                        const actionArgs = {
                                          args: [
                                            undefined,
                                            (() => {
                                              try {
                                                return (() => {
                                                  const firstNot5532 =
                                                    $state.drCenters.find(
                                                      item => item.id !== "5532"
                                                    );
                                                  return (
                                                    "https://apigw.paziresh24.com/katibe/v1/transactions/balance/p24?account=organization&centerid=" +
                                                    firstNot5532.id
                                                  );
                                                })();
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()
                                          ]
                                        };
                                        return $globalActions[
                                          "Fragment.apiRequest"
                                        ]?.apply(null, [...actionArgs.args]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["balanceCenter"] != null &&
                                    typeof $steps["balanceCenter"] ===
                                      "object" &&
                                    typeof $steps["balanceCenter"].then ===
                                      "function"
                                  ) {
                                    $steps["balanceCenter"] = await $steps[
                                      "balanceCenter"
                                    ];
                                  }

                                  $steps["updateCenterBalance"] =
                                    $steps.balanceCenter.status == 200 &&
                                    $state.userData.isDoctor
                                      ? (() => {
                                          const actionArgs = {
                                            customFunction: async () => {
                                              return ($state.centerbalance =
                                                $steps.balanceCenter.data.data.balance);
                                            }
                                          };
                                          return (({ customFunction }) => {
                                            return customFunction();
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["updateCenterBalance"] != null &&
                                    typeof $steps["updateCenterBalance"] ===
                                      "object" &&
                                    typeof $steps["updateCenterBalance"]
                                      .then === "function"
                                  ) {
                                    $steps["updateCenterBalance"] =
                                      await $steps["updateCenterBalance"];
                                  }
                                }}
                              />
                            ) : null
                          }
                        />
                      ) : null}
                    </div>
                  </div>
                </div>
              </div>
              <div
                data-plasmic-name={"gridInvoice1"}
                data-plasmic-override={overrides.gridInvoice1}
                className={classNames(projectcss.all, sty.gridInvoice1)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__lXi5W,
                    "grid_calculator"
                  )}
                  id={"grid_calculator"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___6TGn5
                    )}
                  >
                    {"\u062a\u0627\u0631\u06cc\u062e"}
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__iamNw,
                    "grid_calculator"
                  )}
                  id={"grid_calculator"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hzIok
                    )}
                  >
                    {
                      "\u0634\u0645\u0627\u0631\u0647 \u0641\u0627\u06a9\u062a\u0648\u0631"
                    }
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__ysfQm,
                    "grid_calculator"
                  )}
                  id={"grid_calculator"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___1Mo6W
                    )}
                  >
                    {"\u0639\u0646\u0648\u0627\u0646"}
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__ocUk8,
                    "grid_calculator"
                  )}
                  id={"grid_calculator"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__miJrA,
                    "grid_calculator"
                  )}
                  id={"grid_calculator"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gSvRz
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "\u0645\u0628\u0644\u063a "
                      : "\u0645\u0628\u0644\u063a "}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iBLfO
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "(\u0631\u06cc\u0627\u0644)"
                      : " (\u0631\u06cc\u0627\u0644)"}
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__ddNa2,
                    "grid_calculator"
                  )}
                  id={"grid_calculator"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pNNbe
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "\u0648\u0636\u0639\u06cc\u062a"
                      : "\u0648\u0636\u0639\u06cc\u062a"}
                  </div>
                </div>
              </div>
              {(() => {
                try {
                  return (() => {
                    return $state.invoicelist.length == 0 ? true : false;
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  data-plasmic-name={"gridNoData"}
                  data-plasmic-override={overrides.gridNoData}
                  className={classNames(projectcss.all, sty.gridNoData)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__eoANt,
                      "grid_calculator"
                    )}
                    id={"grid_calculator"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hb1Ec
                      )}
                    >
                      {
                        "\u0645\u062d\u062a\u0648\u0627\u06cc\u06cc \u062c\u0647\u062a \u0646\u0645\u0627\u06cc\u0634 \u0648\u062c\u0648\u062f \u0646\u062f\u0627\u0631\u062f"
                      }
                    </div>
                  </div>
                </div>
              ) : null}
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.invoicelist;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    data-plasmic-name={"gridInvoice12"}
                    data-plasmic-override={overrides.gridInvoice12}
                    className={classNames(projectcss.all, sty.gridInvoice12)}
                    key={currentIndex}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__pZmWf,
                        "grid_calculator"
                      )}
                      id={"grid_calculator"}
                    >
                      {(() => {
                        try {
                          return (
                            $state.invoicelist[currentIndex].payment_status !=
                            "paid"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <Icon39Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___9PpKj
                          )}
                          role={"img"}
                        />
                      ) : null}
                      {(() => {
                        try {
                          return (
                            $state.invoicelist[currentIndex].payment_status ==
                            "paid"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <Icon39Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___7MvoK
                          )}
                          role={"img"}
                        />
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rnKjw
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                "" +
                                (() => {
                                  const gregorianDate = new Date(
                                    $state.invoicelist[
                                      currentIndex
                                    ].registerdate
                                  );
                                  const persianDate = new Intl.DateTimeFormat(
                                    "fa-IR"
                                  ).format(gregorianDate);
                                  return persianDate;
                                })()
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "1";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__oEbja,
                        "grid_calculator"
                      )}
                      id={"grid_calculator"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jaZw
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.invoicelist[currentIndex].factorid;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "1403/05/01";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__pDrd,
                        "grid_calculator"
                      )}
                      id={"grid_calculator"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lMDq0
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.invoicelist[currentIndex].title;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0635\u0648\u0631\u062a \u062d\u0633\u0627\u0628 \u0647\u0632\u06cc\u0646\u0647 \u0646\u0648\u0628\u062a \u062f\u0647\u06cc \u062a\u06cc\u0631 \u0645\u0627\u0647 1403";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__aqxnx,
                        "grid_calculator"
                      )}
                      id={"grid_calculator"}
                    >
                      {(() => {
                        const child$Props = {
                          body: (
                            <ApiRequest
                              data-plasmic-name={"detailsDataApiRequest"}
                              data-plasmic-override={
                                overrides.detailsDataApiRequest
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.detailsDataApiRequest
                              )}
                              errorDisplay={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___06YZ
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return "خطا در دریافت اطلاعات، لطفا دوباره تلاش نمایید.";
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "Error fetching data";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              }
                              loadingDisplay={
                                <Icon2Icon
                                  data-plasmic-name={"waitingIcon3"}
                                  data-plasmic-override={overrides.waitingIcon3}
                                  className={classNames(
                                    projectcss.all,
                                    sty.waitingIcon3
                                  )}
                                  role={"img"}
                                />
                              }
                              method={"GET"}
                              onError={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "detailsDataApiRequest",
                                  __plasmic_idx_0,
                                  "error"
                                ]).apply(null, eventArgs);
                              }}
                              onLoading={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "detailsDataApiRequest",
                                  __plasmic_idx_0,
                                  "loading"
                                ]).apply(null, eventArgs);
                              }}
                              onSuccess={async (...eventArgs: any) => {
                                generateStateOnChangeProp($state, [
                                  "detailsDataApiRequest",
                                  __plasmic_idx_0,
                                  "data"
                                ]).apply(null, eventArgs);
                              }}
                              ref={ref => {
                                $refs["detailsDataApiRequest"] = ref;
                              }}
                              url={(() => {
                                try {
                                  return (
                                    "https://apigw.paziresh24.com/katibe/v1/factors/p24/" +
                                    $state.invoicelist[currentIndex].factorid
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__wrQq
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__wVFlB
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__j6ZDp
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $state.detailsDataApiRequest[
                                            currentIndex
                                          ].data.data.title;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__yoqU0
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___5GPiz
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__g1XPb
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $state.detailsDataApiRequest[
                                            currentIndex
                                          ].data.data.description;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___6Oe4O
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__wsB5
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__sv9VP
                                    )}
                                  >
                                    {hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? "\u06a9\u062f:"
                                      : "\u06a9\u062f:"}
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__s62K5
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___6Yx0D
                                    )}
                                  >
                                    {hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    ) ? (
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return $state.detailsDataApiRequest[
                                              currentIndex
                                            ].data.data.factorid;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    ) : (
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return $state.detailsDataApiRequest[
                                              currentIndex
                                            ].data.data.factorid;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    )}
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__qojuG
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__wbUqu
                                    )}
                                  >
                                    {hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? "\u062a\u0627\u0631\u06cc\u062e:"
                                      : "\u0632\u0645\u0627\u0646:"}
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__hufPd
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___6ZrQw
                                    )}
                                  >
                                    {hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    ) ? (
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return (() => {
                                              const gregorianDate = new Date(
                                                $state.detailsDataApiRequest[
                                                  currentIndex
                                                ].data.data.registerdate
                                              );
                                              const persianDate =
                                                new Intl.DateTimeFormat(
                                                  "fa-IR"
                                                ).format(gregorianDate);
                                              return persianDate;
                                            })();
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    ) : (
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return (
                                              $state.detailsDataApiRequest[
                                                currentIndex
                                              ].data.data.registertime +
                                              " " +
                                              (() => {
                                                const gregorianDate = new Date(
                                                  $state.detailsDataApiRequest[
                                                    currentIndex
                                                  ].data.data.registerdate
                                                );
                                                const persianDate =
                                                  new Intl.DateTimeFormat(
                                                    "fa-IR"
                                                  ).format(gregorianDate);
                                                return persianDate;
                                              })()
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    )}
                                  </div>
                                </div>
                              </div>
                              {(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return $state.detailsDataApiRequest[
                                      currentIndex
                                    ].data.data.services;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_1, __plasmic_idx_1) => {
                                const currentItem = __plasmic_item_1;
                                const currentIndex = __plasmic_idx_1;
                                return (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__lssOr
                                    )}
                                    dir={"rtl"}
                                    key={currentIndex}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__znLpG
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__ruM1
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return "جزئیات:";
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "\u062c\u0632\u0626\u06cc\u0627\u062a:";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__v6YM
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__qQFly
                                        )}
                                        dir={"rtl"}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return (() => {
                                                return currentItem.count > 1
                                                  ? currentItem.service +
                                                      " - " +
                                                      new Intl.NumberFormat(
                                                        "fa-IR"
                                                      ).format(
                                                        currentItem.count
                                                      ) +
                                                      "عدد"
                                                  : currentItem.service;
                                              })();
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__nrB7
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__iAKee
                                        )}
                                      >
                                        {"\u0645\u0628\u0644\u063a:"}
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox___9HQjo
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__ycl6R
                                        )}
                                      >
                                        {hasVariant(
                                          globalVariants,
                                          "screen",
                                          "mobileOnly"
                                        ) ? (
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return new Intl.NumberFormat(
                                                  "fa-IR"
                                                ).format(
                                                  currentItem.price *
                                                    currentItem.count
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        ) : (
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return (
                                                  new Intl.NumberFormat(
                                                    "fa-IR"
                                                  ).format(
                                                    currentItem.price *
                                                      currentItem.count
                                                  ) +
                                                  " " +
                                                  "ریال"
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        )}
                                      </div>
                                    </div>
                                  </div>
                                );
                              })}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__alAzC
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__rlJdT
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__uFm0
                                    )}
                                  >
                                    {"\u062c\u0645\u0639 \u06a9\u0644:"}
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__rMmas
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__w8JWd
                                    )}
                                  >
                                    {hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    ) ? (
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return new Intl.NumberFormat(
                                              "fa-IR"
                                            ).format(
                                              $state.detailsDataApiRequest[
                                                currentIndex
                                              ].data.data.sumprice
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    ) : (
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return (
                                              new Intl.NumberFormat(
                                                "fa-IR"
                                              ).format(
                                                $state.detailsDataApiRequest[
                                                  currentIndex
                                                ].data.data.sumprice
                                              ) + " ریال"
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    )}
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__shPoA
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__s39It
                                    )}
                                  >
                                    {"\u062a\u062e\u0641\u06cc\u0641:"}
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__wx06L
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text___5XsQ
                                    )}
                                  >
                                    {hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    ) ? (
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return new Intl.NumberFormat(
                                              "fa-IR"
                                            ).format(
                                              $state.detailsDataApiRequest[
                                                currentIndex
                                              ].data.data.discountprice
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    ) : (
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return (
                                              new Intl.NumberFormat(
                                                "fa-IR"
                                              ).format(
                                                $state.detailsDataApiRequest[
                                                  currentIndex
                                                ].data.data.discountprice
                                              ) + " ریال"
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    )}
                                  </div>
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__byfzB
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___3EawY
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__iNqT8
                                    )}
                                  >
                                    {"\u0645\u0627\u0644\u06cc\u0627\u062a:"}
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__yu16
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__ieppI
                                    )}
                                  >
                                    {hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    ) ? (
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return new Intl.NumberFormat(
                                              "fa-IR"
                                            ).format(
                                              $state.detailsDataApiRequest[
                                                currentIndex
                                              ].data.data.vatprice
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    ) : (
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return (
                                              new Intl.NumberFormat(
                                                "fa-IR"
                                              ).format(
                                                $state.detailsDataApiRequest[
                                                  currentIndex
                                                ].data.data.vatprice
                                              ) + " ریال"
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    )}
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__odgIv
                                  )}
                                />

                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___7Canf
                                  )}
                                />
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___5NsrZ
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__e45IP
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__cMhtF
                                    )}
                                  >
                                    {
                                      "\u0645\u0628\u0644\u063a \u0646\u0647\u0627\u06cc\u06cc:"
                                    }
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__apVoQ
                                    )}
                                  >
                                    {hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    ) ? (
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return (
                                              new Intl.NumberFormat(
                                                "fa-IR"
                                              ).format(
                                                $state.detailsDataApiRequest[
                                                  currentIndex
                                                ].data.data.finalprice
                                              ) + "ریال"
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    ) : (
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return (
                                              new Intl.NumberFormat(
                                                "fa-IR"
                                              ).format(
                                                $state.detailsDataApiRequest[
                                                  currentIndex
                                                ].data.data.finalprice
                                              ) + " ریال"
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    )}
                                  </div>
                                </div>
                              </div>
                              {(() => {
                                try {
                                  return $state.detailsDataApiRequest[
                                    currentIndex
                                  ].data.data !== undefined &&
                                    $state.detailsDataApiRequest[currentIndex]
                                      .data.data.meta !== undefined &&
                                    $state.detailsDataApiRequest[currentIndex]
                                      .data.data.meta.RefNum !== undefined
                                    ? true
                                    : false;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__b8IFd
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox___4GXv
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__ifqdx
                                      )}
                                    >
                                      {
                                        "\u0634\u0646\u0627\u0633\u0647 \u067e\u0631\u062f\u0627\u062e\u062a:"
                                      }
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__m03Nc
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__n3Yvn
                                      )}
                                    >
                                      {hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      ) ? (
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return $state
                                                .detailsDataApiRequest[
                                                currentIndex
                                              ].data.data.meta.RRN;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      ) : (
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return $state
                                                .detailsDataApiRequest[
                                                currentIndex
                                              ].data.data.meta.RRN;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      )}
                                    </div>
                                  </div>
                                </div>
                              ) : null}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__kNras
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__pxhR
                                  )}
                                >
                                  {(
                                    hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? (() => {
                                          try {
                                            return (
                                              $state.invoicelist[currentIndex]
                                                .payment_status != "paid" &&
                                              $state.invoicelist[currentIndex]
                                                .due_date.length == 0
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return true;
                                            }
                                            throw e;
                                          }
                                        })()
                                      : (() => {
                                          try {
                                            return (
                                              $state.invoicelist[currentIndex]
                                                .payment_status != "paid" &&
                                              $state.invoicelist[currentIndex]
                                                .due_date.length == 0
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return true;
                                            }
                                            throw e;
                                          }
                                        })()
                                  ) ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__uiljD
                                      )}
                                    >
                                      {
                                        "\u067e\u0631\u062f\u0627\u062e\u062a \u0646\u0634\u062f\u0647"
                                      }
                                    </div>
                                  ) : null}
                                  {(
                                    hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? (() => {
                                          try {
                                            return (
                                              $state.invoicelist[currentIndex]
                                                .due_date.length > 0 &&
                                              $state.invoicelist[currentIndex]
                                                .payment_status != "paid"
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return true;
                                            }
                                            throw e;
                                          }
                                        })()
                                      : (() => {
                                          try {
                                            return (
                                              $state.invoicelist[currentIndex]
                                                .due_date.length > 0 &&
                                              $state.invoicelist[currentIndex]
                                                .payment_status != "paid"
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return true;
                                            }
                                            throw e;
                                          }
                                        })()
                                  ) ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__hgc8G
                                      )}
                                    >
                                      {hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      ) ? (
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return (
                                                "مهلت پرداخت: " +
                                                (() => {
                                                  const persianDate = new Date(
                                                    $state.invoicelist[
                                                      currentIndex
                                                    ].due_date
                                                  ).toLocaleDateString("fa-IR");
                                                  return `${persianDate}`;
                                                })()
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "\u067e\u0631\u062f\u0627\u062e\u062a \u0646\u0634\u062f\u0647";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      ) : (
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return (
                                                "مهلت پرداخت: " +
                                                (() => {
                                                  const persianDate = new Date(
                                                    $state.invoicelist[
                                                      currentIndex
                                                    ].due_date
                                                  ).toLocaleDateString("fa-IR");
                                                  return `${persianDate}`;
                                                })()
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "\u067e\u0631\u062f\u0627\u062e\u062a \u0646\u0634\u062f\u0647";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      )}
                                    </div>
                                  ) : null}
                                  {(() => {
                                    try {
                                      return (
                                        $state.invoicelist[currentIndex]
                                          .payment_status == "paid"
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return true;
                                      }
                                      throw e;
                                    }
                                  })() ? (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__gq91D
                                      )}
                                    >
                                      {
                                        "\u2714 \u067e\u0631\u062f\u0627\u062e\u062a \u0634\u062f\u0647"
                                      }
                                    </div>
                                  ) : null}
                                </div>
                              </div>
                            </ApiRequest>
                          ),
                          className: classNames(
                            "__wab_instance",
                            sty.dialogNewInvoiceDetails
                          ),
                          onOpenChange: async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "dialogNewInvoiceDetails",
                              __plasmic_idx_0,
                              "open"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          },
                          open: generateStateValueProp($state, [
                            "dialogNewInvoiceDetails",
                            __plasmic_idx_0,
                            "open"
                          ]),
                          title: (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__hoFqI
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__td6Cz,
                                  ``
                                )}
                                dir={"rtl"}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__xad3K
                                  )}
                                >
                                  {
                                    "\u062c\u0632\u0626\u06cc\u0627\u062a \u0641\u0627\u06a9\u062a\u0648\u0631"
                                  }
                                </div>
                              </div>
                            </div>
                          ),
                          trigger: (
                            <Button
                              data-plasmic-name={"btnInvoiceInfo"}
                              data-plasmic-override={overrides.btnInvoiceInfo}
                              children2={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__xFw74
                                  )}
                                >
                                  {"\u062c\u0632\u0626\u06cc\u0627\u062a"}
                                </div>
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.btnInvoiceInfo
                              )}
                              color={"clear"}
                              onClick={async event => {
                                const $steps = {};
                              }}
                              size={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "minimal"
                                  : undefined
                              }
                            />
                          )
                        };

                        initializePlasmicStates(
                          $state,
                          [
                            {
                              name: "dialogNewInvoiceDetails[].open",
                              initFunc: ({ $props, $state, $queries }) => false
                            }
                          ],
                          [__plasmic_idx_0]
                        );
                        return (
                          <Dialog
                            data-plasmic-name={"dialogNewInvoiceDetails"}
                            data-plasmic-override={
                              overrides.dialogNewInvoiceDetails
                            }
                            {...child$Props}
                          />
                        );
                      })()}
                      <PlasmicLink__
                        data-plasmic-name={"link"}
                        data-plasmic-override={overrides.link}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link
                        )}
                        component={Link}
                        href={(() => {
                          try {
                            return (
                              "https://katibe.paziresh24.com/factor-print/?factorid=" +
                              $state.invoicelist[currentIndex].factorid +
                              "&customertype=" +
                              ($state.currentAccountType == "userid"
                                ? "user"
                                : "center")
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        platform={"nextjs"}
                        target={"_blank"}
                      >
                        <Icon43Icon
                          className={classNames(projectcss.all, sty.svg__iQb5C)}
                          role={"img"}
                        />
                      </PlasmicLink__>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___8Q2Zh,
                        "grid_calculator"
                      )}
                      id={"grid_calculator"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1ASlo
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return new Intl.NumberFormat("fa-IR").format(
                                $state.invoicelist[currentIndex].finalprice
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0635\u0648\u0631\u062a \u062d\u0633\u0627\u0628 \u0647\u0632\u06cc\u0646\u0647 \u0646\u0648\u0628\u062a \u062f\u0647\u06cc \u062a\u06cc\u0631 \u0645\u0627\u0647 1403";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__vBvC,
                        "grid_calculator"
                      )}
                      id={"grid_calculator"}
                    >
                      {(() => {
                        try {
                          return (
                            $state.invoicelist[currentIndex].payment_status ==
                            "paid"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__eyqDw
                          )}
                        >
                          {
                            "\u2714 \u067e\u0631\u062f\u0627\u062e\u062a \u0634\u062f\u0647"
                          }
                        </div>
                      ) : null}
                      {(() => {
                        try {
                          return (
                            $state.invoicelist[currentIndex].due_date.length >
                              0 &&
                            $state.invoicelist[currentIndex].payment_status !=
                              "paid"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__buV3U
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return (
                                  "مهلت پرداخت: " +
                                  (() => {
                                    const persianDate = new Date(
                                      $state.invoicelist[currentIndex].due_date
                                    ).toLocaleDateString("fa-IR");
                                    return `${persianDate}`;
                                  })()
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u067e\u0631\u062f\u0627\u062e\u062a \u0646\u0634\u062f\u0647";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      ) : null}
                      {(() => {
                        try {
                          return (
                            $state.invoicelist[currentIndex].payment_status !=
                              "paid" &&
                            $state.invoicelist[currentIndex].due_date.length ==
                              0
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tra4Y
                          )}
                        >
                          {
                            "\u067e\u0631\u062f\u0627\u062e\u062a \u0646\u0634\u062f\u0647"
                          }
                        </div>
                      ) : null}
                    </div>
                  </div>
                );
              })}
              <div
                data-plasmic-name={"gridNoData2"}
                data-plasmic-override={overrides.gridNoData2}
                className={classNames(projectcss.all, sty.gridNoData2)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__sRmEd,
                    "grid_calculator"
                  )}
                  id={"grid_calculator"}
                >
                  {(() => {
                    try {
                      return (
                        !$state.waiting &&
                        $state.invoicelist.length > 0 &&
                        !$state.waitingLoading &&
                        $state.showMoreBtn
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Button2
                      children2={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yDKqg
                          )}
                        >
                          {
                            "\u0646\u0645\u0627\u06cc\u0634 \u0628\u06cc\u0634\u062a\u0631..."
                          }
                        </div>
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.button__m0Fu8
                      )}
                      color={"softBlue"}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateWaitingLoading"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["waitingLoading"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateWaitingLoading"] != null &&
                          typeof $steps["updateWaitingLoading"] === "object" &&
                          typeof $steps["updateWaitingLoading"].then ===
                            "function"
                        ) {
                          $steps["updateWaitingLoading"] = await $steps[
                            "updateWaitingLoading"
                          ];
                        }

                        $steps["updatePageNumber"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["pageNumber"]
                                },
                                operation: 2
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, oldValue + 1);
                                return oldValue + 1;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updatePageNumber"] != null &&
                          typeof $steps["updatePageNumber"] === "object" &&
                          typeof $steps["updatePageNumber"].then === "function"
                        ) {
                          $steps["updatePageNumber"] = await $steps[
                            "updatePageNumber"
                          ];
                        }

                        $steps["getInvoiceList"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  undefined,
                                  (() => {
                                    try {
                                      return (
                                        "https://apigw.paziresh24.com/katibe/v1/factors/search/p24?customerid=" +
                                        $state.currentAccountId +
                                        "&account=" +
                                        $state.currentAccountAccount +
                                        "&limit=" +
                                        $state.limit +
                                        "&page=" +
                                        $state.pageNumber
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["getInvoiceList"] != null &&
                          typeof $steps["getInvoiceList"] === "object" &&
                          typeof $steps["getInvoiceList"].then === "function"
                        ) {
                          $steps["getInvoiceList"] = await $steps[
                            "getInvoiceList"
                          ];
                        }

                        $steps["runCode"] =
                          $steps.getInvoiceList.status == 200 &&
                          $steps.getInvoiceList.data.status == true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return ($state.invoicelist = [
                                      ...$state.invoicelist,
                                      ...$steps.getInvoiceList.data.data
                                    ]);
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }

                        $steps["runCode2"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    if (
                                      $steps.getInvoiceList.status != 200 ||
                                      $steps.getInvoiceList.data.data.length !=
                                        $state.limit
                                    )
                                      return ($state.showMoreBtn = false);
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode2"] != null &&
                          typeof $steps["runCode2"] === "object" &&
                          typeof $steps["runCode2"].then === "function"
                        ) {
                          $steps["runCode2"] = await $steps["runCode2"];
                        }

                        $steps["updateWaitingLoading2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["waitingLoading"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateWaitingLoading2"] != null &&
                          typeof $steps["updateWaitingLoading2"] === "object" &&
                          typeof $steps["updateWaitingLoading2"].then ===
                            "function"
                        ) {
                          $steps["updateWaitingLoading2"] = await $steps[
                            "updateWaitingLoading2"
                          ];
                        }
                      }}
                      size={"compact"}
                    />
                  ) : null}
                  {(() => {
                    try {
                      return $state.waitingLoading;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Icon2Icon
                      className={classNames(projectcss.all, sty.svg___6TmRf)}
                      role={"img"}
                    />
                  ) : null}
                </div>
              </div>
            </section>
            <SideEffect
              data-plasmic-name={"sideEffectPageLoad"}
              data-plasmic-override={overrides.sideEffectPageLoad}
              className={classNames("__wab_instance", sty.sideEffectPageLoad)}
              onMount={async () => {
                const $steps = {};

                $steps["showWaiting"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["waiting"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["showWaiting"] != null &&
                  typeof $steps["showWaiting"] === "object" &&
                  typeof $steps["showWaiting"].then === "function"
                ) {
                  $steps["showWaiting"] = await $steps["showWaiting"];
                }

                $steps["getUser"] = true
                  ? (() => {
                      const actionArgs = {
                        args: ["POST", "https://www.paziresh24.com/api/getUser"]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["getUser"] != null &&
                  typeof $steps["getUser"] === "object" &&
                  typeof $steps["getUser"].then === "function"
                ) {
                  $steps["getUser"] = await $steps["getUser"];
                }

                $steps["updateUserData"] =
                  $steps.getUser.status == 200
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["userData"]
                          },
                          operation: 0,
                          value: $steps.getUser.data
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["updateUserData"] != null &&
                  typeof $steps["updateUserData"] === "object" &&
                  typeof $steps["updateUserData"].then === "function"
                ) {
                  $steps["updateUserData"] = await $steps["updateUserData"];
                }

                $steps["getUserAccounts"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          undefined,
                          (() => {
                            try {
                              return (
                                "https://apigw.paziresh24.com/katibe-useraccounts?type=factor&user_id=" +
                                ($state.userData?.result?.id ||
                                  Math.random().toString(36).substring(2, 15))
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["getUserAccounts"] != null &&
                  typeof $steps["getUserAccounts"] === "object" &&
                  typeof $steps["getUserAccounts"].then === "function"
                ) {
                  $steps["getUserAccounts"] = await $steps["getUserAccounts"];
                }

                $steps["runCode"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            if ($steps.getUserAccounts.status == 200) {
                              return ($state.accounts =
                                $steps.getUserAccounts.data.data);
                            }
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }

                $steps["runCode2"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            if ($state.accounts.length > 0)
                              return ($state.cbAccounts.value =
                                $state.accounts[
                                  $state.accounts.length - 1
                                ].uniqueid);
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode2"] != null &&
                  typeof $steps["runCode2"] === "object" &&
                  typeof $steps["runCode2"].then === "function"
                ) {
                  $steps["runCode2"] = await $steps["runCode2"];
                }

                $steps["getDrCenters"] = $state.userData.isDoctor
                  ? (() => {
                      const actionArgs = {
                        args: [
                          undefined,
                          "https://api.paziresh24.com/V1/doctor/centers"
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["getDrCenters"] != null &&
                  typeof $steps["getDrCenters"] === "object" &&
                  typeof $steps["getDrCenters"].then === "function"
                ) {
                  $steps["getDrCenters"] = await $steps["getDrCenters"];
                }

                $steps["updateDrCenters"] =
                  $state.userData.isDoctor && $steps.getDrCenters.status == 200
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["drCenters"]
                          },
                          operation: 0,
                          value: $steps.getDrCenters.data.data
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["updateDrCenters"] != null &&
                  typeof $steps["updateDrCenters"] === "object" &&
                  typeof $steps["updateDrCenters"].then === "function"
                ) {
                  $steps["updateDrCenters"] = await $steps["updateDrCenters"];
                }

                $steps["isLoadAccountTrue"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["isLoadAccount"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["isLoadAccountTrue"] != null &&
                  typeof $steps["isLoadAccountTrue"] === "object" &&
                  typeof $steps["isLoadAccountTrue"].then === "function"
                ) {
                  $steps["isLoadAccountTrue"] = await $steps[
                    "isLoadAccountTrue"
                  ];
                }

                $steps["updateFirstRequestCount"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["firstRequestCount"]
                        },
                        operation: 2
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        const oldValue = $stateGet(objRoot, variablePath);
                        $stateSet(objRoot, variablePath, oldValue + 1);
                        return oldValue + 1;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateFirstRequestCount"] != null &&
                  typeof $steps["updateFirstRequestCount"] === "object" &&
                  typeof $steps["updateFirstRequestCount"].then === "function"
                ) {
                  $steps["updateFirstRequestCount"] = await $steps[
                    "updateFirstRequestCount"
                  ];
                }
              }}
            />

            <SideEffect
              data-plasmic-name={"sideEffectRefresh"}
              data-plasmic-override={overrides.sideEffectRefresh}
              className={classNames("__wab_instance", sty.sideEffectRefresh)}
              deps={(() => {
                try {
                  return [$state.firstRequestCount];
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              onMount={async () => {
                const $steps = {};

                $steps["runCode"] = $state.isLoadAccount
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            $state.waiting = true;
                            if ($state.updatewallet) {
                              $state.txtReminderTextValue = "";
                              $state.reminderWallet = 0;
                              $state.txtReminderValue = "";
                            }
                            $state.offset = 0;
                            $state.pageNumber = 1;
                            $state.invoicelist = [];
                            $state.invoiceDetials = {};
                            return $state.accounts.forEach(account => {
                              if (account.uniqueid == $state.cbAccounts.value) {
                                $state.currentAccountId = account.id;
                                $state.currentAccountAccount = account.account;
                                $state.requestInvoiceUrl =
                                  "https://apigw.paziresh24.com/katibe/v1/factors/search/p24?customerid=" +
                                  account.id +
                                  "&account=" +
                                  account.account +
                                  "&limit=" +
                                  $state.limit +
                                  "&page=" +
                                  $state.pageNumber;
                                if (account.type == "userid") {
                                  $state.currentAccountType = "userid";
                                  $state.currentCenterid = "";
                                  $state.requestWalletUrl =
                                    "https://apigw.paziresh24.com/katibe/v1/transactions/balance/p24?account=" +
                                    account.account;
                                }
                                if (account.type == "centerid") {
                                  $state.currentAccountType = "centerid";
                                  $state.currentCenterid = account.id;
                                  $state.requestWalletUrl =
                                    "https://apigw.paziresh24.com/katibe/v1/transactions/balance/p24?productid=7&centerid=" +
                                    account.id +
                                    "&account=" +
                                    account.account;
                                }
                              }
                            });
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode"] != null &&
                  typeof $steps["runCode"] === "object" &&
                  typeof $steps["runCode"].then === "function"
                ) {
                  $steps["runCode"] = await $steps["runCode"];
                }

                $steps["getInvoiceList"] = $state.isLoadAccount
                  ? (() => {
                      const actionArgs = {
                        args: [
                          undefined,
                          (() => {
                            try {
                              return $state.requestInvoiceUrl;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["getInvoiceList"] != null &&
                  typeof $steps["getInvoiceList"] === "object" &&
                  typeof $steps["getInvoiceList"].then === "function"
                ) {
                  $steps["getInvoiceList"] = await $steps["getInvoiceList"];
                }

                $steps["updateInvoicelist"] =
                  $steps.getInvoiceList.status == 200 &&
                  $steps.getInvoiceList.data.status == true &&
                  $state.isLoadAccount
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["invoicelist"]
                          },
                          operation: 0,
                          value: $steps.getInvoiceList.data.data
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["updateInvoicelist"] != null &&
                  typeof $steps["updateInvoicelist"] === "object" &&
                  typeof $steps["updateInvoicelist"].then === "function"
                ) {
                  $steps["updateInvoicelist"] = await $steps[
                    "updateInvoicelist"
                  ];
                }

                $steps["runCode2"] = $state.isLoadAccount
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            if (
                              $steps.getInvoiceList.status == 200 &&
                              $steps.getInvoiceList.data.data !== undefined &&
                              $steps.getInvoiceList.data.data.length ==
                                $state.limit
                            )
                              return ($state.showMoreBtn = true);
                            else return ($state.showMoreBtn = false);
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode2"] != null &&
                  typeof $steps["runCode2"] === "object" &&
                  typeof $steps["runCode2"].then === "function"
                ) {
                  $steps["runCode2"] = await $steps["runCode2"];
                }

                $steps["updateWaiting"] =
                  $state.updatewallet == false && $state.isLoadAccount
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["waiting"]
                          },
                          operation: 0,
                          value: false
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["updateWaiting"] != null &&
                  typeof $steps["updateWaiting"] === "object" &&
                  typeof $steps["updateWaiting"].then === "function"
                ) {
                  $steps["updateWaiting"] = await $steps["updateWaiting"];
                }

                $steps["getProductWallet"] =
                  $state.updatewallet && $state.isLoadAccount
                    ? (() => {
                        const actionArgs = {
                          args: [
                            undefined,
                            (() => {
                              try {
                                return $state.requestWalletUrl;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.apiRequest"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                if (
                  $steps["getProductWallet"] != null &&
                  typeof $steps["getProductWallet"] === "object" &&
                  typeof $steps["getProductWallet"].then === "function"
                ) {
                  $steps["getProductWallet"] = await $steps["getProductWallet"];
                }

                $steps["txtReminderText"] =
                  $steps.getProductWallet.status == 200 &&
                  $steps.getProductWallet.data.status == true &&
                  $state.updatewallet == true &&
                  $state.isLoadAccount
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              if ($steps.getProductWallet.data.data.balance > 0)
                                $state.txtReminderTextValue = "اعتبار: ";
                              else if (
                                $steps.getProductWallet.data.data.balance == 0
                              )
                                $state.txtReminderTextValue = "اعتبار: ";
                              else
                                $state.txtReminderTextValue = "قابل پرداخت: ";
                              return $steps.getProductWallet.data.data
                                .balance >= 0
                                ? ($state.txtPaymentText = "افزایش اعتبار")
                                : ($state.txtPaymentText = "پرداخت کنید");
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["txtReminderText"] != null &&
                  typeof $steps["txtReminderText"] === "object" &&
                  typeof $steps["txtReminderText"].then === "function"
                ) {
                  $steps["txtReminderText"] = await $steps["txtReminderText"];
                }

                $steps["txtReminderValue"] =
                  $steps.getProductWallet.status == 200 &&
                  $steps.getProductWallet.data.status == true &&
                  $state.updatewallet == true &&
                  $state.isLoadAccount
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return ($state.txtReminderValue =
                              new Intl.NumberFormat("fa-IR").format(
                                $steps.getProductWallet.data.data.balance
                              ));
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["txtReminderValue"] != null &&
                  typeof $steps["txtReminderValue"] === "object" &&
                  typeof $steps["txtReminderValue"].then === "function"
                ) {
                  $steps["txtReminderValue"] = await $steps["txtReminderValue"];
                }

                $steps["updateReminderWallet"] =
                  $steps.getProductWallet.status == 200 &&
                  $steps.getProductWallet.data.status == true &&
                  $state.updatewallet == true &&
                  $state.isLoadAccount
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["reminderWallet"]
                          },
                          operation: 0,
                          value: $steps.getProductWallet.data.data.balance
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["updateReminderWallet"] != null &&
                  typeof $steps["updateReminderWallet"] === "object" &&
                  typeof $steps["updateReminderWallet"].then === "function"
                ) {
                  $steps["updateReminderWallet"] = await $steps[
                    "updateReminderWallet"
                  ];
                }

                $steps["runCode3"] = true
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return ($state.waiting =
                            false && $state.isLoadAccount);
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["runCode3"] != null &&
                  typeof $steps["runCode3"] === "object" &&
                  typeof $steps["runCode3"].then === "function"
                ) {
                  $steps["runCode3"] = await $steps["runCode3"];
                }
              }}
            />

            <Embed
              data-plasmic-name={"embedHtml"}
              data-plasmic-override={overrides.embedHtml}
              className={classNames("__wab_instance", sty.embedHtml)}
              code={
                '<script type="text/javascript">\r\n    (function(c,l,a,r,i,t,y){\r\n        c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};\r\n        t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;\r\n        y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);\r\n    })(window, document, "clarity", "script", "pq37fqev3s");\r\n</script>'
              }
            />
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "h1",
    "btnDashboard3",
    "lblUser",
    "btnLogout",
    "btnLogin",
    "section",
    "cbAccounts",
    "gridCalculator2",
    "txtRemainingText",
    "txtRemainingValue",
    "dialogIncreaseRemaining",
    "btnPay",
    "gridSelectprice",
    "btnSelectAmount",
    "gridMyAmount",
    "txtNewPaymentAmount",
    "btnPayWithWallet",
    "txtpayWithWallet",
    "btnPayWithWallet3",
    "txtpayWithWallet3",
    "btnPayWithWallet2",
    "txtpayWithWallet2",
    "gridInvoice1",
    "gridNoData",
    "gridInvoice12",
    "dialogNewInvoiceDetails",
    "btnInvoiceInfo",
    "detailsDataApiRequest",
    "waitingIcon3",
    "link",
    "gridNoData2",
    "sideEffectPageLoad",
    "sideEffectRefresh",
    "embedHtml"
  ],
  h1: ["h1"],
  btnDashboard3: ["btnDashboard3"],
  lblUser: ["lblUser"],
  btnLogout: ["btnLogout"],
  btnLogin: ["btnLogin"],
  section: [
    "section",
    "cbAccounts",
    "gridCalculator2",
    "txtRemainingText",
    "txtRemainingValue",
    "dialogIncreaseRemaining",
    "btnPay",
    "gridSelectprice",
    "btnSelectAmount",
    "gridMyAmount",
    "txtNewPaymentAmount",
    "btnPayWithWallet",
    "txtpayWithWallet",
    "btnPayWithWallet3",
    "txtpayWithWallet3",
    "btnPayWithWallet2",
    "txtpayWithWallet2",
    "gridInvoice1",
    "gridNoData",
    "gridInvoice12",
    "dialogNewInvoiceDetails",
    "btnInvoiceInfo",
    "detailsDataApiRequest",
    "waitingIcon3",
    "link",
    "gridNoData2"
  ],
  cbAccounts: ["cbAccounts"],
  gridCalculator2: [
    "gridCalculator2",
    "txtRemainingText",
    "txtRemainingValue",
    "dialogIncreaseRemaining",
    "btnPay",
    "gridSelectprice",
    "btnSelectAmount",
    "gridMyAmount",
    "txtNewPaymentAmount",
    "btnPayWithWallet",
    "txtpayWithWallet",
    "btnPayWithWallet3",
    "txtpayWithWallet3",
    "btnPayWithWallet2",
    "txtpayWithWallet2"
  ],
  txtRemainingText: ["txtRemainingText"],
  txtRemainingValue: ["txtRemainingValue"],
  dialogIncreaseRemaining: [
    "dialogIncreaseRemaining",
    "btnPay",
    "gridSelectprice",
    "btnSelectAmount",
    "gridMyAmount",
    "txtNewPaymentAmount",
    "btnPayWithWallet",
    "txtpayWithWallet",
    "btnPayWithWallet3",
    "txtpayWithWallet3",
    "btnPayWithWallet2",
    "txtpayWithWallet2"
  ],
  btnPay: ["btnPay"],
  gridSelectprice: ["gridSelectprice", "btnSelectAmount"],
  btnSelectAmount: ["btnSelectAmount"],
  gridMyAmount: ["gridMyAmount", "txtNewPaymentAmount"],
  txtNewPaymentAmount: ["txtNewPaymentAmount"],
  btnPayWithWallet: ["btnPayWithWallet", "txtpayWithWallet"],
  txtpayWithWallet: ["txtpayWithWallet"],
  btnPayWithWallet3: ["btnPayWithWallet3", "txtpayWithWallet3"],
  txtpayWithWallet3: ["txtpayWithWallet3"],
  btnPayWithWallet2: ["btnPayWithWallet2", "txtpayWithWallet2"],
  txtpayWithWallet2: ["txtpayWithWallet2"],
  gridInvoice1: ["gridInvoice1"],
  gridNoData: ["gridNoData"],
  gridInvoice12: [
    "gridInvoice12",
    "dialogNewInvoiceDetails",
    "btnInvoiceInfo",
    "detailsDataApiRequest",
    "waitingIcon3",
    "link"
  ],
  dialogNewInvoiceDetails: [
    "dialogNewInvoiceDetails",
    "btnInvoiceInfo",
    "detailsDataApiRequest",
    "waitingIcon3"
  ],
  btnInvoiceInfo: ["btnInvoiceInfo"],
  detailsDataApiRequest: ["detailsDataApiRequest", "waitingIcon3"],
  waitingIcon3: ["waitingIcon3"],
  link: ["link"],
  gridNoData2: ["gridNoData2"],
  sideEffectPageLoad: ["sideEffectPageLoad"],
  sideEffectRefresh: ["sideEffectRefresh"],
  embedHtml: ["embedHtml"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h1: "h1";
  btnDashboard3: "div";
  lblUser: "div";
  btnLogout: "a";
  btnLogin: typeof Button;
  section: "section";
  cbAccounts: typeof Select;
  gridCalculator2: "div";
  txtRemainingText: "div";
  txtRemainingValue: "div";
  dialogIncreaseRemaining: typeof Dialog;
  btnPay: typeof Button;
  gridSelectprice: "div";
  btnSelectAmount: typeof Button;
  gridMyAmount: "div";
  txtNewPaymentAmount: typeof TextInput;
  btnPayWithWallet: typeof Button;
  txtpayWithWallet: "div";
  btnPayWithWallet3: typeof Button;
  txtpayWithWallet3: "div";
  btnPayWithWallet2: typeof Button;
  txtpayWithWallet2: "div";
  gridInvoice1: "div";
  gridNoData: "div";
  gridInvoice12: "div";
  dialogNewInvoiceDetails: typeof Dialog;
  btnInvoiceInfo: typeof Button;
  detailsDataApiRequest: typeof ApiRequest;
  waitingIcon3: "svg";
  link: "a";
  gridNoData2: "div";
  sideEffectPageLoad: typeof SideEffect;
  sideEffectRefresh: typeof SideEffect;
  embedHtml: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFactorsSearch__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFactorsSearch__VariantsArgs;
    args?: PlasmicFactorsSearch__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFactorsSearch__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFactorsSearch__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFactorsSearch__ArgProps,
          internalVariantPropNames: PlasmicFactorsSearch__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFactorsSearch__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFactorsSearch";
  } else {
    func.displayName = `PlasmicFactorsSearch.${nodeName}`;
  }
  return func;
}

export const PlasmicFactorsSearch = Object.assign(
  // Top-level PlasmicFactorsSearch renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    btnDashboard3: makeNodeComponent("btnDashboard3"),
    lblUser: makeNodeComponent("lblUser"),
    btnLogout: makeNodeComponent("btnLogout"),
    btnLogin: makeNodeComponent("btnLogin"),
    section: makeNodeComponent("section"),
    cbAccounts: makeNodeComponent("cbAccounts"),
    gridCalculator2: makeNodeComponent("gridCalculator2"),
    txtRemainingText: makeNodeComponent("txtRemainingText"),
    txtRemainingValue: makeNodeComponent("txtRemainingValue"),
    dialogIncreaseRemaining: makeNodeComponent("dialogIncreaseRemaining"),
    btnPay: makeNodeComponent("btnPay"),
    gridSelectprice: makeNodeComponent("gridSelectprice"),
    btnSelectAmount: makeNodeComponent("btnSelectAmount"),
    gridMyAmount: makeNodeComponent("gridMyAmount"),
    txtNewPaymentAmount: makeNodeComponent("txtNewPaymentAmount"),
    btnPayWithWallet: makeNodeComponent("btnPayWithWallet"),
    txtpayWithWallet: makeNodeComponent("txtpayWithWallet"),
    btnPayWithWallet3: makeNodeComponent("btnPayWithWallet3"),
    txtpayWithWallet3: makeNodeComponent("txtpayWithWallet3"),
    btnPayWithWallet2: makeNodeComponent("btnPayWithWallet2"),
    txtpayWithWallet2: makeNodeComponent("txtpayWithWallet2"),
    gridInvoice1: makeNodeComponent("gridInvoice1"),
    gridNoData: makeNodeComponent("gridNoData"),
    gridInvoice12: makeNodeComponent("gridInvoice12"),
    dialogNewInvoiceDetails: makeNodeComponent("dialogNewInvoiceDetails"),
    btnInvoiceInfo: makeNodeComponent("btnInvoiceInfo"),
    detailsDataApiRequest: makeNodeComponent("detailsDataApiRequest"),
    waitingIcon3: makeNodeComponent("waitingIcon3"),
    link: makeNodeComponent("link"),
    gridNoData2: makeNodeComponent("gridNoData2"),
    sideEffectPageLoad: makeNodeComponent("sideEffectPageLoad"),
    sideEffectRefresh: makeNodeComponent("sideEffectRefresh"),
    embedHtml: makeNodeComponent("embedHtml"),

    // Metadata about props expected for PlasmicFactorsSearch
    internalVariantProps: PlasmicFactorsSearch__VariantProps,
    internalArgProps: PlasmicFactorsSearch__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "کتیبه، لیست فاکتورها",
      description: "لیست تراکنش ها و عملیات حساب",
      ogImageSrc:
        "https://site-assets.plasmic.app/49b5e4e62d4fd1407285906a0f5e6382.svg",
      canonical: ""
    }
  }
);

export default PlasmicFactorsSearch;
/* prettier-ignore-end */
