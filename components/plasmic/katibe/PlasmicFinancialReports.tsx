/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: afXULSfGYmou2jFpEc2QWJ
// Component: T-TncP4LAmu0

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: hVBOtSJvmbc4/codeComponent
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: afXULSfGYmou2jFpEc2QWJ/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: afXULSfGYmou2jFpEc2QWJ/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: afXULSfGYmou2jFpEc2QWJ/projectcss
import sty from "./PlasmicFinancialReports.module.css"; // plasmic-import: T-TncP4LAmu0/css

createPlasmicElementProxy;

export type PlasmicFinancialReports__VariantMembers = {};
export type PlasmicFinancialReports__VariantsArgs = {};
type VariantPropType = keyof PlasmicFinancialReports__VariantsArgs;
export const PlasmicFinancialReports__VariantProps =
  new Array<VariantPropType>();

export type PlasmicFinancialReports__ArgsType = {
  centerId?: string;
  date?: string;
};
type ArgPropType = keyof PlasmicFinancialReports__ArgsType;
export const PlasmicFinancialReports__ArgProps = new Array<ArgPropType>(
  "centerId",
  "date"
);

export type PlasmicFinancialReports__OverridesType = {
  root?: Flex__<"div">;
  apiGetBookCount?: Flex__<typeof ApiRequest>;
  apiGetIncome?: Flex__<typeof ApiRequest>;
  apiGetbalance?: Flex__<typeof ApiRequest>;
  apiGetTotal?: Flex__<typeof ApiRequest>;
  freeBox?: Flex__<"div">;
  bookcount?: Flex__<"div">;
  income?: Flex__<"div">;
  balance?: Flex__<"div">;
  totalincome?: Flex__<"div">;
};

export interface DefaultFinancialReportsProps {
  centerId?: string;
  date?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFinancialReports__RenderFunc(props: {
  variants: PlasmicFinancialReports__VariantsArgs;
  args: PlasmicFinancialReports__ArgsType;
  overrides: PlasmicFinancialReports__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "apiGetBookCount.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetBookCount"
      },
      {
        path: "apiGetBookCount.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetBookCount"
      },
      {
        path: "apiGetBookCount.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetBookCount"
      },
      {
        path: "apiGetIncome.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetIncome"
      },
      {
        path: "apiGetIncome.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetIncome"
      },
      {
        path: "apiGetIncome.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetIncome"
      },
      {
        path: "apiGetbalance.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetbalance"
      },
      {
        path: "apiGetbalance.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetbalance"
      },
      {
        path: "apiGetbalance.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetbalance"
      },
      {
        path: "apiGetTotal.data",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetTotal"
      },
      {
        path: "apiGetTotal.error",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetTotal"
      },
      {
        path: "apiGetTotal.loading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "apiGetTotal"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <ApiRequest
        data-plasmic-name={"apiGetBookCount"}
        data-plasmic-override={overrides.apiGetBookCount}
        className={classNames("__wab_instance", sty.apiGetBookCount)}
        errorDisplay={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__mstIv
            )}
          >
            {"Error fetching data"}
          </div>
        }
        loadingDisplay={null}
        method={"GET"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiGetBookCount", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, [
            "apiGetBookCount",
            "loading"
          ]).apply(null, eventArgs);
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiGetBookCount", "data"]).apply(
            null,
            eventArgs
          );
        }}
        params={(() => {
          try {
            return {
              centerid: $props.centerId,
              date: $props.date
            };
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        ref={ref => {
          $refs["apiGetBookCount"] = ref;
        }}
        url={"https://apigw.paziresh24.com/v1/n8n-nelson/webhook/v1/book-count"}
      />

      <ApiRequest
        data-plasmic-name={"apiGetIncome"}
        data-plasmic-override={overrides.apiGetIncome}
        className={classNames("__wab_instance", sty.apiGetIncome)}
        errorDisplay={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__smXhf
            )}
          >
            {"Error fetching data"}
          </div>
        }
        loadingDisplay={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__l3HZb
            )}
          >
            {"Loading..."}
          </div>
        }
        method={"GET"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiGetIncome", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiGetIncome", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiGetIncome", "data"]).apply(
            null,
            eventArgs
          );
        }}
        params={(() => {
          try {
            return {
              centerid: $props.centerId,
              date: $props.date
            };
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        ref={ref => {
          $refs["apiGetIncome"] = ref;
        }}
        url={"https://apigw.paziresh24.com/v1/n8n-nelson/webhook/v1/income"}
      />

      <ApiRequest
        data-plasmic-name={"apiGetbalance"}
        data-plasmic-override={overrides.apiGetbalance}
        className={classNames("__wab_instance", sty.apiGetbalance)}
        errorDisplay={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__uHaQx
            )}
          >
            {"Error fetching data"}
          </div>
        }
        loadingDisplay={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___8B58
            )}
          >
            {"Loading..."}
          </div>
        }
        method={"GET"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiGetbalance", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiGetbalance", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiGetbalance", "data"]).apply(
            null,
            eventArgs
          );
        }}
        ref={ref => {
          $refs["apiGetbalance"] = ref;
        }}
        url={(() => {
          try {
            return `https://apigw.paziresh24.com/katibe/v1/transactions/balance/p24?productid=7&centerid=${$props.centerId}&account=organization`;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      />

      <ApiRequest
        data-plasmic-name={"apiGetTotal"}
        data-plasmic-override={overrides.apiGetTotal}
        className={classNames("__wab_instance", sty.apiGetTotal)}
        errorDisplay={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___6M1J
            )}
          >
            {"Error fetching data"}
          </div>
        }
        loadingDisplay={
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__nPsL
            )}
          >
            {"Loading..."}
          </div>
        }
        method={"GET"}
        onError={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiGetTotal", "error"]).apply(
            null,
            eventArgs
          );
        }}
        onLoading={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiGetTotal", "loading"]).apply(
            null,
            eventArgs
          );
        }}
        onSuccess={async (...eventArgs: any) => {
          generateStateOnChangeProp($state, ["apiGetTotal", "data"]).apply(
            null,
            eventArgs
          );
        }}
        ref={ref => {
          $refs["apiGetTotal"] = ref;
        }}
        url={(() => {
          try {
            return `https://apigw.paziresh24.com/katibe/v1/transactions/report/p24?book_date=&centerid=${$props.centerId}`;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      />

      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <div
          data-plasmic-name={"bookcount"}
          data-plasmic-override={overrides.bookcount}
          className={classNames(projectcss.all, sty.bookcount)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__eRKc
            )}
          >
            {
              "\u062a\u0639\u062f\u0627\u062f \u0646\u0648\u0628\u062a \u0627\u0645\u0631\u0648\u0632"
            }
          </div>
          {(() => {
            try {
              return $state.apiGetBookCount.data.CountOfBook !== undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__jiBx
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return `${$state.apiGetBookCount.data.CountOfBook} نوبت`;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "\u062a\u0639\u062f\u0627\u062f \u0646\u0648\u0628\u062a \u0627\u0645\u0631\u0648\u0632";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          ) : null}
        </div>
        <div
          data-plasmic-name={"income"}
          data-plasmic-override={overrides.income}
          className={classNames(projectcss.all, sty.income)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___0DqjS
            )}
          >
            {
              "\u062f\u0631\u0622\u0645\u062f \u0627\u0645\u0631\u0648\u0632 \u062a\u0627 \u0627\u06cc\u0646 \u0644\u062d\u0638\u0647"
            }
          </div>
          {(() => {
            try {
              return $state.apiGetIncome.data.sum_cost !== undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__t7Gc
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return (
                      new Intl.NumberFormat("fa-IR").format(
                        $state.apiGetIncome.data.sum_cost / 10
                      ) + " تومان"
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "\u062f\u0631\u0622\u0645\u062f \u0627\u0645\u0631\u0648\u0632";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          ) : null}
        </div>
        <div
          data-plasmic-name={"balance"}
          data-plasmic-override={overrides.balance}
          className={classNames(projectcss.all, sty.balance)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__weLyW
            )}
          >
            {"\u0645\u0648\u062c\u0648\u062f\u06cc"}
          </div>
          {(() => {
            try {
              return $state.apiGetbalance.data.data.balance !== undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__kNakX
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return (
                      new Intl.NumberFormat("fa-IR").format(
                        $state.apiGetbalance.data.data.balance / 10
                      ) + " تومان"
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "\u0645\u0648\u062c\u0648\u062f\u06cc";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          ) : null}
        </div>
        <div
          data-plasmic-name={"totalincome"}
          data-plasmic-override={overrides.totalincome}
          className={classNames(projectcss.all, sty.totalincome)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__rg0Gp
            )}
          >
            {
              "\u06a9\u0644 \u062f\u0631\u0627\u0645\u062f \u0627\u0632 \u0634\u0631\u0648\u0639 \u0647\u0645\u06a9\u0627\u0631\u06cc"
            }
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__xv0Oz
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $state.apiGetTotal.error === null
                    ? new Intl.NumberFormat("fa-IR").format(
                        $state.apiGetTotal.data.data.deposit / 10
                      ) + " تومان"
                    : 0 + " تومان";
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "\u06a9\u0644 \u062f\u0631\u0627\u0645\u062f \u0627\u0632 \u0634\u0631\u0648\u0639 \u0647\u0645\u06a9\u0627\u0631\u06cc";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "apiGetBookCount",
    "apiGetIncome",
    "apiGetbalance",
    "apiGetTotal",
    "freeBox",
    "bookcount",
    "income",
    "balance",
    "totalincome"
  ],
  apiGetBookCount: ["apiGetBookCount"],
  apiGetIncome: ["apiGetIncome"],
  apiGetbalance: ["apiGetbalance"],
  apiGetTotal: ["apiGetTotal"],
  freeBox: ["freeBox", "bookcount", "income", "balance", "totalincome"],
  bookcount: ["bookcount"],
  income: ["income"],
  balance: ["balance"],
  totalincome: ["totalincome"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  apiGetBookCount: typeof ApiRequest;
  apiGetIncome: typeof ApiRequest;
  apiGetbalance: typeof ApiRequest;
  apiGetTotal: typeof ApiRequest;
  freeBox: "div";
  bookcount: "div";
  income: "div";
  balance: "div";
  totalincome: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFinancialReports__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFinancialReports__VariantsArgs;
    args?: PlasmicFinancialReports__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicFinancialReports__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicFinancialReports__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFinancialReports__ArgProps,
          internalVariantPropNames: PlasmicFinancialReports__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFinancialReports__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFinancialReports";
  } else {
    func.displayName = `PlasmicFinancialReports.${nodeName}`;
  }
  return func;
}

export const PlasmicFinancialReports = Object.assign(
  // Top-level PlasmicFinancialReports renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    apiGetBookCount: makeNodeComponent("apiGetBookCount"),
    apiGetIncome: makeNodeComponent("apiGetIncome"),
    apiGetbalance: makeNodeComponent("apiGetbalance"),
    apiGetTotal: makeNodeComponent("apiGetTotal"),
    freeBox: makeNodeComponent("freeBox"),
    bookcount: makeNodeComponent("bookcount"),
    income: makeNodeComponent("income"),
    balance: makeNodeComponent("balance"),
    totalincome: makeNodeComponent("totalincome"),

    // Metadata about props expected for PlasmicFinancialReports
    internalVariantProps: PlasmicFinancialReports__VariantProps,
    internalArgProps: PlasmicFinancialReports__ArgProps
  }
);

export default PlasmicFinancialReports;
/* prettier-ignore-end */
