/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: afXULSfGYmou2jFpEc2QWJ
// Component: E9Ce2L3VJnq0

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import TextInput from "../../TextInput"; // plasmic-import: SePhlRlvEn3n/component
import Button from "../../Button"; // plasmic-import: 0wu_ZE1f8SuT/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: afXULSfGYmou2jFpEc2QWJ/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: afXULSfGYmou2jFpEc2QWJ/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: afXULSfGYmou2jFpEc2QWJ/projectcss
import sty from "./PlasmicRegisterBankAccount.module.css"; // plasmic-import: E9Ce2L3VJnq0/css

import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: fjupp6w2fUeo/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: VZ6Vl-sB0jLM/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: eeiQdsLura6L/icon

createPlasmicElementProxy;

export type PlasmicRegisterBankAccount__VariantMembers = {};
export type PlasmicRegisterBankAccount__VariantsArgs = {};
type VariantPropType = keyof PlasmicRegisterBankAccount__VariantsArgs;
export const PlasmicRegisterBankAccount__VariantProps =
  new Array<VariantPropType>();

export type PlasmicRegisterBankAccount__ArgsType = {
  centerid?: string;
  onCenteridChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicRegisterBankAccount__ArgsType;
export const PlasmicRegisterBankAccount__ArgProps = new Array<ArgPropType>(
  "centerid",
  "onCenteridChange"
);

export type PlasmicRegisterBankAccount__OverridesType = {
  root?: Flex__<"div">;
  txtCardNumber?: Flex__<typeof TextInput>;
  button?: Flex__<typeof Button>;
};

export interface DefaultRegisterBankAccountProps {
  centerid?: string;
  onCenteridChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicRegisterBankAccount__RenderFunc(props: {
  variants: PlasmicRegisterBankAccount__VariantsArgs;
  args: PlasmicRegisterBankAccount__ArgsType;
  overrides: PlasmicRegisterBankAccount__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "txtCardNumber.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "waiting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "centerid",
        type: "writable",
        variableType: "text",

        valueProp: "centerid",
        onChangeProp: "onCenteridChange"
      },
      {
        path: "insertAccountMessage",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__dUf0J)}>
        <div className={classNames(projectcss.all, sty.freeBox__e9PY)}>
          <TextInput
            data-plasmic-name={"txtCardNumber"}
            data-plasmic-override={overrides.txtCardNumber}
            autoFocus={true}
            className={classNames("__wab_instance", sty.txtCardNumber)}
            onChange={async (...eventArgs: any) => {
              ((...eventArgs) => {
                generateStateOnChangeProp($state, ["txtCardNumber", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }).apply(null, eventArgs);

              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
            placeholder={
              "\u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f (\u063a\u06cc\u0631 \u0627\u0632 \u0628\u0644\u0648 \u0628\u0627\u0646\u06a9)"
            }
            value={
              generateStateValueProp($state, ["txtCardNumber", "value"]) ?? ""
            }
          />

          {(() => {
            try {
              return (
                $state.txtCardNumber.value.length != 16 &&
                $state.txtCardNumber.value.length > 0
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__fQvE
              )}
            >
              {
                "\u0644\u0637\u0641\u0627 \u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a \u0631\u0627 \u0628\u0647\u200c\u0635\u0648\u0631\u062a \u0635\u062d\u06cc\u062d \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."
              }
            </div>
          ) : null}
        </div>
        <div className={classNames(projectcss.all, sty.freeBox___1P9Wx)}>
          <div className={classNames(projectcss.all, sty.freeBox__l8Jrc)}>
            <Button
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              children2={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___2JuRy
                  )}
                >
                  {"\u062b\u0628\u062a"}
                </div>
              }
              className={classNames("__wab_instance", sty.button)}
              endIcon={
                <ChevronLeftIcon
                  className={classNames(projectcss.all, sty.svg___5TB1J)}
                  role={"img"}
                />
              }
              isDisabled={(() => {
                try {
                  return (
                    $state.txtCardNumber.value.length != 16 || $state.waiting
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              onClick={async event => {
                const $steps = {};

                $steps["updateWaiting"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["waiting"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateWaiting"] != null &&
                  typeof $steps["updateWaiting"] === "object" &&
                  typeof $steps["updateWaiting"].then === "function"
                ) {
                  $steps["updateWaiting"] = await $steps["updateWaiting"];
                }

                $steps["registerAccount"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          "https://apigw.paziresh24.com/financialaccount/v1/useraccount",
                          undefined,
                          (() => {
                            try {
                              return {
                                cardid: $state.txtCardNumber.value,
                                centerid: $state.centerid
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return { cardid: "", centerid: "" };
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["registerAccount"] != null &&
                  typeof $steps["registerAccount"] === "object" &&
                  typeof $steps["registerAccount"].then === "function"
                ) {
                  $steps["registerAccount"] = await $steps["registerAccount"];
                }

                $steps["updateWaiting2"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["waiting"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateWaiting2"] != null &&
                  typeof $steps["updateWaiting2"] === "object" &&
                  typeof $steps["updateWaiting2"].then === "function"
                ) {
                  $steps["updateWaiting2"] = await $steps["updateWaiting2"];
                }

                $steps["updateInsertAccountMessage"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["insertAccountMessage"]
                        },
                        operation: 0,
                        value: $steps.registerAccount.data.message
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateInsertAccountMessage"] != null &&
                  typeof $steps["updateInsertAccountMessage"] === "object" &&
                  typeof $steps["updateInsertAccountMessage"].then ===
                    "function"
                ) {
                  $steps["updateInsertAccountMessage"] = await $steps[
                    "updateInsertAccountMessage"
                  ];
                }

                $steps["invokeGlobalAction"] =
                  $steps.registerAccount.status == 200
                    ? (() => {
                        const actionArgs = {
                          args: [
                            undefined,
                            "\u062d\u0633\u0627\u0628 \u0645\u0648\u0631\u062f \u0646\u0638\u0631 \u062b\u0628\u062a \u06af\u0631\u062f\u06cc\u062f."
                          ]
                        };
                        return $globalActions["Fragment.showToast"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }

                $steps["invokeGlobalAction2"] =
                  $steps.registerAccount.status != 200
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "error",
                            (() => {
                              try {
                                return $state.insertAccountMessage;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.showToast"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                if (
                  $steps["invokeGlobalAction2"] != null &&
                  typeof $steps["invokeGlobalAction2"] === "object" &&
                  typeof $steps["invokeGlobalAction2"].then === "function"
                ) {
                  $steps["invokeGlobalAction2"] = await $steps[
                    "invokeGlobalAction2"
                  ];
                }
              }}
              size={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "compact"
                  : undefined
              }
              startIcon={
                <ChevronRightIcon
                  className={classNames(projectcss.all, sty.svg__fiSJu)}
                  role={"img"}
                />
              }
            />

            {(() => {
              try {
                return $state.waiting;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Icon2Icon
                className={classNames(projectcss.all, sty.svg__hmdAp)}
                role={"img"}
              />
            ) : null}
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "txtCardNumber", "button"],
  txtCardNumber: ["txtCardNumber"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  txtCardNumber: typeof TextInput;
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRegisterBankAccount__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRegisterBankAccount__VariantsArgs;
    args?: PlasmicRegisterBankAccount__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRegisterBankAccount__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicRegisterBankAccount__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicRegisterBankAccount__ArgProps,
          internalVariantPropNames: PlasmicRegisterBankAccount__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRegisterBankAccount__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRegisterBankAccount";
  } else {
    func.displayName = `PlasmicRegisterBankAccount.${nodeName}`;
  }
  return func;
}

export const PlasmicRegisterBankAccount = Object.assign(
  // Top-level PlasmicRegisterBankAccount renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    txtCardNumber: makeNodeComponent("txtCardNumber"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicRegisterBankAccount
    internalVariantProps: PlasmicRegisterBankAccount__VariantProps,
    internalArgProps: PlasmicRegisterBankAccount__ArgProps
  }
);

export default PlasmicRegisterBankAccount;
/* prettier-ignore-end */
