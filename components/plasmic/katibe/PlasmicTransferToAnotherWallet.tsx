/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: afXULSfGYmou2jFpEc2QWJ
// Component: y7cY5QHMxpPK

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import TextInput from "../../TextInput"; // plasmic-import: SePhlRlvEn3n/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsbr2UhI7UlpvR } from "../fragment_icons/PlasmicGlobalVariant__Screen"; // plasmic-import: BR2UhI7ulpvR/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "../chortke/plasmic.module.css"; // plasmic-import: afXULSfGYmou2jFpEc2QWJ/projectcss
import sty from "./PlasmicTransferToAnotherWallet.module.css"; // plasmic-import: y7cY5QHMxpPK/css

import SearchSvgIcon from "../chortke/icons/PlasmicIcon__SearchSvg"; // plasmic-import: fjupp6w2fUeo/icon
import CheckSvgIcon from "../chortke/icons/PlasmicIcon__CheckSvg"; // plasmic-import: VZ6Vl-sB0jLM/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import Icon2Icon from "../chortke/icons/PlasmicIcon__Icon2"; // plasmic-import: eeiQdsLura6L/icon

createPlasmicElementProxy;

export type PlasmicTransferToAnotherWallet__VariantMembers = {};
export type PlasmicTransferToAnotherWallet__VariantsArgs = {};
type VariantPropType = keyof PlasmicTransferToAnotherWallet__VariantsArgs;
export const PlasmicTransferToAnotherWallet__VariantProps =
  new Array<VariantPropType>();

export type PlasmicTransferToAnotherWallet__ArgsType = {
  transferCenterid?: string;
  onTransferCenteridChange?: (val: string) => void;
  onTransferedCountChange?: (val: string) => void;
};
type ArgPropType = keyof PlasmicTransferToAnotherWallet__ArgsType;
export const PlasmicTransferToAnotherWallet__ArgProps = new Array<ArgPropType>(
  "transferCenterid",
  "onTransferCenteridChange",
  "onTransferedCountChange"
);

export type PlasmicTransferToAnotherWallet__OverridesType = {
  root?: Flex__<"div">;
  txtTransferMobile?: Flex__<typeof TextInput>;
  txtTransferPrice?: Flex__<typeof TextInput>;
  txtTitle?: Flex__<typeof TextInput>;
  txtTransferCode?: Flex__<typeof TextInput>;
  svg?: Flex__<"svg">;
  sideEffect?: Flex__<typeof SideEffect>;
};

export interface DefaultTransferToAnotherWalletProps {
  transferCenterid?: string;
  onTransferCenteridChange?: (val: string) => void;
  onTransferedCountChange?: (val: string) => void;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTransferToAnotherWallet__RenderFunc(props: {
  variants: PlasmicTransferToAnotherWallet__VariantsArgs;
  args: PlasmicTransferToAnotherWallet__ArgsType;
  overrides: PlasmicTransferToAnotherWallet__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "txtTransferMobile.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "txtTransferPrice.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "mobleCompeleteCounter",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "waitingTransfer",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "txtTitle.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "requestTransferid",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "requestMessage",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "txtTransferCode.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "transferCenterid",
        type: "writable",
        variableType: "text",

        valueProp: "transferCenterid",
        onChangeProp: "onTransferCenteridChange"
      },
      {
        path: "transferMessage",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "transferedCount",
        type: "readonly",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,

        onChangeProp: "onTransferedCountChange"
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbr2UhI7UlpvR()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        plasmic_fragment_design_system_css.plasmic_tokens,
        sty.root
      )}
    >
      {(() => {
        try {
          return $state.requestTransferid == 0;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div className={classNames(projectcss.all, sty.freeBox__voMn)}>
          <div className={classNames(projectcss.all, sty.freeBox__od0Gj)}>
            <TextInput
              data-plasmic-name={"txtTransferMobile"}
              data-plasmic-override={overrides.txtTransferMobile}
              autoFocus={true}
              className={classNames("__wab_instance", sty.txtTransferMobile)}
              isDisabled={(() => {
                try {
                  return $state.requestTransferid > 0;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              onChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, [
                    "txtTransferMobile",
                    "value"
                  ])((e => e.target?.value).apply(null, eventArgs));
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }

                (async event => {
                  const $steps = {};

                  $steps["runCode"] = false
                    ? (() => {
                        const actionArgs = {
                          customFunction: async () => {
                            return (() => {
                              if (
                                $state.txtTransferMobile.value.startsWith(
                                  "09"
                                ) &&
                                $state.txtTransferMobile.value.length == 11
                              )
                                return $state.mobleCompeleteCounter++;
                            })();
                          }
                        };
                        return (({ customFunction }) => {
                          return customFunction();
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["runCode"] != null &&
                    typeof $steps["runCode"] === "object" &&
                    typeof $steps["runCode"].then === "function"
                  ) {
                    $steps["runCode"] = await $steps["runCode"];
                  }
                }).apply(null, eventArgs);
              }}
              placeholder={
                "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644: 091"
              }
              value={
                generateStateValueProp($state, [
                  "txtTransferMobile",
                  "value"
                ]) ?? ""
              }
            />
          </div>
        </div>
      ) : null}
      {(() => {
        try {
          return $state.requestTransferid == 0;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div className={classNames(projectcss.all, sty.freeBox__txVq)}>
          <div className={classNames(projectcss.all, sty.freeBox__rxprk)}>
            <TextInput
              data-plasmic-name={"txtTransferPrice"}
              data-plasmic-override={overrides.txtTransferPrice}
              className={classNames("__wab_instance", sty.txtTransferPrice)}
              isDisabled={(() => {
                try {
                  return $state.requestTransferid > 0;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              onChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, [
                    "txtTransferPrice",
                    "value"
                  ])((e => e.target?.value).apply(null, eventArgs));
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              placeholder={
                "\u0645\u0628\u0644\u063a - \u0631\u06cc\u0627\u0644"
              }
              type={"number"}
              value={
                generateStateValueProp($state, ["txtTransferPrice", "value"]) ??
                ""
              }
            />
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__gItPc)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__cQdI
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return (() => {
                      function numberToPersianWords(num) {
                        if (
                          num == "" ||
                          num == 0 ||
                          num == "0" ||
                          num == "NaN"
                        ) {
                          return "صفر";
                        }
                        const yekan = [
                          "",
                          "یک",
                          "دو",
                          "سه",
                          "چهار",
                          "پنج",
                          "شش",
                          "هفت",
                          "هشت",
                          "نه"
                        ];

                        const dahgan = [
                          "",
                          "ده",
                          "بیست",
                          "سی",
                          "چهل",
                          "پنجاه",
                          "شصت",
                          "هفتاد",
                          "هشتاد",
                          "نود"
                        ];

                        const sadgan = [
                          "",
                          "صد",
                          "دویست",
                          "سیصد",
                          "چهارصد",
                          "پانصد",
                          "ششصد",
                          "هفتصد",
                          "هشتصد",
                          "نهصد"
                        ];

                        const dah = [
                          "ده",
                          "یازده",
                          "دوازده",
                          "سیزده",
                          "چهارده",
                          "پانزده",
                          "شانزده",
                          "هفده",
                          "هجده",
                          "نوزده"
                        ];

                        const parts = [
                          "",
                          "هزار",
                          "میلیون",
                          "میلیارد",
                          "تریلیون"
                        ];

                        if (num === 0) return "صفر";
                        num = Math.floor(num);
                        const groups = [];
                        while (num > 0) {
                          groups.push(num % 1000);
                          num = Math.floor(num / 1000);
                        }
                        const convertThreeDigits = n => {
                          let words = [];
                          let s = Math.floor(n / 100);
                          let d = Math.floor((n % 100) / 10);
                          let y = n % 10;
                          if (s > 0) words.push(sadgan[s]);
                          if (d === 1 && y > 0) {
                            words.push(dah[y]);
                          } else {
                            if (d > 0) words.push(dahgan[d]);
                            if (y > 0) words.push(yekan[y]);
                          }
                          return words.join(" و ");
                        };
                        const result = [];
                        for (let i = 0; i < groups.length; i++) {
                          if (groups[i] !== 0) {
                            let words = convertThreeDigits(groups[i]);
                            if (parts[i]) {
                              words += " " + parts[i];
                            }
                            result.unshift(words);
                          }
                        }
                        return result.join(" و ");
                      }
                      return (
                        numberToPersianWords($state.txtTransferPrice.value) +
                        " ریال"
                      );
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
        </div>
      ) : null}
      {(() => {
        try {
          return $state.requestTransferid == 0;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div className={classNames(projectcss.all, sty.freeBox__a90Vq)}>
          <div className={classNames(projectcss.all, sty.freeBox__pmfMq)}>
            <TextInput
              data-plasmic-name={"txtTitle"}
              data-plasmic-override={overrides.txtTitle}
              className={classNames("__wab_instance", sty.txtTitle)}
              isDisabled={(() => {
                try {
                  return $state.requestTransferid > 0;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              onChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, ["txtTitle", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              placeholder={"\u062a\u0648\u0636\u06cc\u062d\u0627\u062a"}
              value={
                generateStateValueProp($state, ["txtTitle", "value"]) ?? ""
              }
            />
          </div>
        </div>
      ) : null}
      {(() => {
        try {
          return $state.requestTransferid > 0;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div className={classNames(projectcss.all, sty.freeBox__lEKcZ)}>
          <div className={classNames(projectcss.all, sty.freeBox__umaNh)}>
            <TextInput
              data-plasmic-name={"txtTransferCode"}
              data-plasmic-override={overrides.txtTransferCode}
              className={classNames("__wab_instance", sty.txtTransferCode)}
              onChange={async (...eventArgs: any) => {
                ((...eventArgs) => {
                  generateStateOnChangeProp($state, [
                    "txtTransferCode",
                    "value"
                  ])((e => e.target?.value).apply(null, eventArgs));
                }).apply(null, eventArgs);

                if (
                  eventArgs.length > 1 &&
                  eventArgs[1] &&
                  eventArgs[1]._plasmic_state_init_
                ) {
                  return;
                }
              }}
              placeholder={
                "\u06a9\u062f \u067e\u06cc\u0627\u0645\u06a9 \u0634\u062f\u0647 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f"
              }
              value={
                generateStateValueProp($state, ["txtTransferCode", "value"]) ??
                ""
              }
            />
          </div>
          {(() => {
            try {
              return $state.transferMessage.length > 0;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__yXoKs)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mHneo
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $state.transferMessage;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </div>
          ) : null}
        </div>
      ) : null}
      {(() => {
        try {
          return $state.requestTransferid == 0;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div className={classNames(projectcss.all, sty.freeBox__yyv)}>
          <div className={classNames(projectcss.all, sty.freeBox__bEjdf)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__j9AWu
              )}
            >
              <React.Fragment>
                <React.Fragment>
                  {
                    "*\u0633\u0642\u0641 \u0645\u0628\u0644\u063a \u0627\u0646\u062a\u0642\u0627\u0644 \u0648\u062c\u0647 \u062f\u0631 \u0647\u0631 \u0631\u0648\u0632 "
                  }
                </React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {
                    "500 \u0645\u06cc\u0644\u06cc\u0648\u0646 \u0631\u06cc\u0627\u0644"
                  }
                </span>
                <React.Fragment>
                  {
                    " \u0645\u06cc\u200c\u0628\u0627\u0634\u062f.\n*\u067e\u0633 \u0627\u0632 \u062a\u0623\u06cc\u06cc\u062f \u0627\u0646\u062a\u0642\u0627\u0644\u060c \u0645\u0628\u0644\u063a \u0645\u0646\u062a\u0642\u0644\u200c\u0634\u062f\u0647 "
                  }
                </React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {
                    "\u0642\u0627\u0628\u0644 \u0628\u0627\u0632\u06af\u0634\u062a \u0646\u0645\u06cc\u200c\u0628\u0627\u0634\u062f"
                  }
                </span>
                <React.Fragment>{".\n*"}</React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"\u067e\u0630\u06cc\u0631\u063424"}
                </span>
                <React.Fragment>
                  {
                    " \u0647\u06cc\u0686\u200c\u06af\u0648\u0646\u0647 \u0645\u0633\u0626\u0648\u0644\u06cc\u062a\u06cc \u062f\u0631 \u0642\u0628\u0627\u0644 \u0645\u0639\u0627\u0645\u0644\u0627\u062a \u0634\u062e\u0635\u06cc \u06cc\u0627 \u062a\u0648\u0627\u0641\u0642\u0627\u062a \u0634\u0645\u0627 \u0628\u0627 \u06a9\u0627\u0631\u0628\u0631 \u0645\u0648\u0631\u062f \u0646\u0638\u0631 \u0646\u062e\u0648\u0627\u0647\u062f \u062f\u0627\u0634\u062a.\n*"
                  }
                </React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {
                    "\u0627\u0645\u06a9\u0627\u0646 \u06af\u0632\u0627\u0631\u0634\u200c\u06af\u06cc\u0631\u06cc"
                  }
                </span>
                <React.Fragment>
                  {
                    " \u0627\u0632 \u062a\u0631\u0627\u06a9\u0646\u0634\u200c\u0647\u0627\u06cc \u0648\u0627\u0631\u06cc\u0632 \u0634\u062f\u0647 \u0628\u0631\u0627\u06cc \u06a9\u0627\u0631\u0628\u0631 \u0645\u0648\u0631\u062f \u0646\u0638\u0631 \u0648\u062c\u0648\u062f \u062e\u0648\u0627\u0647\u062f \u062f\u0627\u0634\u062a.\n*\u0627\u06cc\u0646 \u0627\u0645\u06a9\u0627\u0646 \u062f\u0631 \u0622\u06cc\u0646\u062f\u0647 \u0628\u0627 "
                  }
                </React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"\u06a9\u0627\u0631\u0645\u0632\u062f"}
                </span>
                <React.Fragment>
                  {
                    " \u0647\u0645\u0631\u0627\u0647 \u062e\u0648\u0627\u0647\u062f \u0628\u0648\u062f.\n*\u062f\u0631\u06cc\u0627\u0641\u062a "
                  }
                </React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ fontWeight: 700 }}
                >
                  {"\u06a9\u062f \u062a\u0623\u06cc\u06cc\u062f"}
                </span>
                <React.Fragment>
                  {
                    " \u0628\u0647 \u0645\u0646\u0632\u0644\u0647 \u067e\u0630\u06cc\u0631\u0634 \u0642\u0648\u0627\u0646\u06cc\u0646 \u0648 \u0645\u0642\u0631\u0631\u0627\u062a \u067e\u0630\u06cc\u0631\u0634\u06f2\u06f4 \u0627\u0633\u062a."
                  }
                </React.Fragment>
              </React.Fragment>
            </div>
          </div>
        </div>
      ) : null}
      <div className={classNames(projectcss.all, sty.freeBox__bnmjF)}>
        <div className={classNames(projectcss.all, sty.freeBox__bVeXq)}>
          {(() => {
            try {
              return $state.requestTransferid > 0;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <div className={classNames(projectcss.all, sty.freeBox__tIjIe)}>
              <div className={classNames(projectcss.all, sty.freeBox__quMdf)}>
                <Button
                  children2={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__spKn
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "\u062a\u0627\u06cc\u06cc\u062f \u0648 \u0627\u0646\u062a\u0642\u0627\u0644"
                        : "\u0627\u0646\u062a\u0642\u0627\u0644"}
                    </div>
                  }
                  className={classNames("__wab_instance", sty.button__obTbp)}
                  isDisabled={(() => {
                    try {
                      return $state.waitingTransfer;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [];
                      }
                      throw e;
                    }
                  })()}
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateWaitingTransfer"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["waitingTransfer"]
                            },
                            operation: 0,
                            value: true
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateWaitingTransfer"] != null &&
                      typeof $steps["updateWaitingTransfer"] === "object" &&
                      typeof $steps["updateWaitingTransfer"].then === "function"
                    ) {
                      $steps["updateWaitingTransfer"] = await $steps[
                        "updateWaitingTransfer"
                      ];
                    }

                    $steps["transferConfirm"] = true
                      ? (() => {
                          const actionArgs = {
                            args: [
                              "POST",
                              "https://apigw.paziresh24.com/katibe/v1/transfer/confirm/p24",
                              undefined,
                              (() => {
                                try {
                                  return {
                                    transferid: $state.requestTransferid,
                                    code: $state.txtTransferCode.value
                                  };
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()
                            ]
                          };
                          return $globalActions["Fragment.apiRequest"]?.apply(
                            null,
                            [...actionArgs.args]
                          );
                        })()
                      : undefined;
                    if (
                      $steps["transferConfirm"] != null &&
                      typeof $steps["transferConfirm"] === "object" &&
                      typeof $steps["transferConfirm"].then === "function"
                    ) {
                      $steps["transferConfirm"] = await $steps[
                        "transferConfirm"
                      ];
                    }

                    $steps["updateRequestMessage"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["requestMessage"]
                            },
                            operation: 0,
                            value: $steps.transferConfirm.data.message
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateRequestMessage"] != null &&
                      typeof $steps["updateRequestMessage"] === "object" &&
                      typeof $steps["updateRequestMessage"].then === "function"
                    ) {
                      $steps["updateRequestMessage"] = await $steps[
                        "updateRequestMessage"
                      ];
                    }

                    $steps["alertOk"] =
                      $steps.transferConfirm.status == 200
                        ? (() => {
                            const actionArgs = {
                              args: [
                                undefined,
                                (() => {
                                  try {
                                    return $state.requestMessage;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                    if (
                      $steps["alertOk"] != null &&
                      typeof $steps["alertOk"] === "object" &&
                      typeof $steps["alertOk"].then === "function"
                    ) {
                      $steps["alertOk"] = await $steps["alertOk"];
                    }

                    $steps["alertError"] =
                      $steps.transferConfirm.status != 200
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "error",
                                (() => {
                                  try {
                                    return $state.requestMessage
                                      ? $state.requestMessage
                                      : "خطا در انجام عملیات";
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.showToast"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                    if (
                      $steps["alertError"] != null &&
                      typeof $steps["alertError"] === "object" &&
                      typeof $steps["alertError"].then === "function"
                    ) {
                      $steps["alertError"] = await $steps["alertError"];
                    }

                    $steps["clearForm"] =
                      $steps.transferConfirm.status == 200 ||
                      $steps.transferConfirm.status == 409
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  $state.requestMessage = "";
                                  $state.requestTransferid = 0;
                                  $state.waitingTransfer = false;
                                  $state.txtTitle.value = "";
                                  $state.txtTransferCode.value = "";
                                  $state.txtTransferMobile.value = "";
                                  return ($state.txtTransferPrice.value = "0");
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["clearForm"] != null &&
                      typeof $steps["clearForm"] === "object" &&
                      typeof $steps["clearForm"].then === "function"
                    ) {
                      $steps["clearForm"] = await $steps["clearForm"];
                    }

                    $steps["updateWaitingTransfer2"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["waitingTransfer"]
                            },
                            operation: 0,
                            value: false
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            $stateSet(objRoot, variablePath, value);
                            return value;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateWaitingTransfer2"] != null &&
                      typeof $steps["updateWaitingTransfer2"] === "object" &&
                      typeof $steps["updateWaitingTransfer2"].then ===
                        "function"
                    ) {
                      $steps["updateWaitingTransfer2"] = await $steps[
                        "updateWaitingTransfer2"
                      ];
                    }

                    $steps["updateTransferedCount"] =
                      $steps.transferConfirm.status == 200
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["transferedCount"]
                              },
                              operation: 2
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, oldValue + 1);
                              return oldValue + 1;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                    if (
                      $steps["updateTransferedCount"] != null &&
                      typeof $steps["updateTransferedCount"] === "object" &&
                      typeof $steps["updateTransferedCount"].then === "function"
                    ) {
                      $steps["updateTransferedCount"] = await $steps[
                        "updateTransferedCount"
                      ];
                    }
                  }}
                  size={"compact"}
                />

                {(() => {
                  try {
                    return $state.requestTransferid > 0;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Button
                    children2={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___2TLeQ
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "\u0628\u0627\u0632\u06af\u0634\u062a"
                          : "\u0628\u0627\u0632\u06af\u0634\u062a"}
                      </div>
                    }
                    className={classNames("__wab_instance", sty.button__nedCb)}
                    color={"softSand"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["clearForm"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  $state.requestMessage = "";
                                  $state.requestTransferid = 0;
                                  $state.waitingTransfer = false;
                                  $state.txtTitle.value = "";
                                  $state.txtTransferCode.value = "";
                                  $state.txtTransferMobile.value = "";
                                  return ($state.txtTransferPrice.value = "0");
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["clearForm"] != null &&
                        typeof $steps["clearForm"] === "object" &&
                        typeof $steps["clearForm"].then === "function"
                      ) {
                        $steps["clearForm"] = await $steps["clearForm"];
                      }
                    }}
                    size={"compact"}
                  />
                ) : null}
              </div>
            </div>
          ) : null}
          {(() => {
            try {
              return $state.requestTransferid == 0;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Button
              children2={
                "\u062b\u0628\u062a \u0648 \u062f\u0631\u06cc\u0627\u0641\u062a \u06a9\u062f \u062a\u0627\u06cc\u06cc\u062f"
              }
              className={classNames("__wab_instance", sty.button__xcDa1)}
              isDisabled={(() => {
                try {
                  return $state.waitingTransfer;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()}
              onClick={async event => {
                const $steps = {};

                $steps["invokeGlobalAction"] = false
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "error",
                          "\u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 \u06a9\u0627\u0631\u0628\u0631 \u0645\u0639\u062a\u0628\u0631 \u0646\u0645\u06cc\u200c\u0628\u0627\u0634\u062f."
                        ]
                      };
                      return $globalActions["Fragment.showToast"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction"] != null &&
                  typeof $steps["invokeGlobalAction"] === "object" &&
                  typeof $steps["invokeGlobalAction"].then === "function"
                ) {
                  $steps["invokeGlobalAction"] = await $steps[
                    "invokeGlobalAction"
                  ];
                }

                $steps["invokeGlobalAction2"] = false
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "error",
                          "\u0645\u0628\u0644\u063a \u0645\u0639\u062a\u0628\u0631 \u0646\u0645\u06cc\u200c\u0628\u0627\u0634\u062f"
                        ]
                      };
                      return $globalActions["Fragment.showToast"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
                if (
                  $steps["invokeGlobalAction2"] != null &&
                  typeof $steps["invokeGlobalAction2"] === "object" &&
                  typeof $steps["invokeGlobalAction2"].then === "function"
                ) {
                  $steps["invokeGlobalAction2"] = await $steps[
                    "invokeGlobalAction2"
                  ];
                }

                $steps["updateTxtTransferMobileValue2"] = false
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "error",
                          "\u0644\u0637\u0641\u0627 \u062a\u0648\u0636\u06cc\u062d\u0627\u062a \u0631\u0627 \u0628\u0646\u0648\u06cc\u0633\u06cc\u062f"
                        ]
                      };
                      return $globalActions["Fragment.showToast"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
                if (
                  $steps["updateTxtTransferMobileValue2"] != null &&
                  typeof $steps["updateTxtTransferMobileValue2"] === "object" &&
                  typeof $steps["updateTxtTransferMobileValue2"].then ===
                    "function"
                ) {
                  $steps["updateTxtTransferMobileValue2"] = await $steps[
                    "updateTxtTransferMobileValue2"
                  ];
                }

                $steps["updateWaitingTransfer"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["waitingTransfer"]
                        },
                        operation: 0,
                        value: true
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateWaitingTransfer"] != null &&
                  typeof $steps["updateWaitingTransfer"] === "object" &&
                  typeof $steps["updateWaitingTransfer"].then === "function"
                ) {
                  $steps["updateWaitingTransfer"] = await $steps[
                    "updateWaitingTransfer"
                  ];
                }

                $steps["request"] = true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          "POST",
                          "https://apigw.paziresh24.com/katibe/v1/transfer/request/p24",
                          undefined,
                          (() => {
                            try {
                              return {
                                mobile: $state.txtTransferMobile.value,
                                amount: parseInt($state.txtTransferPrice.value),
                                title: $state.txtTitle.value,
                                centerid: $state.transferCenterid
                              };
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
                if (
                  $steps["request"] != null &&
                  typeof $steps["request"] === "object" &&
                  typeof $steps["request"].then === "function"
                ) {
                  $steps["request"] = await $steps["request"];
                }

                $steps["updateWaitingTransfer2"] = true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["waitingTransfer"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["updateWaitingTransfer2"] != null &&
                  typeof $steps["updateWaitingTransfer2"] === "object" &&
                  typeof $steps["updateWaitingTransfer2"].then === "function"
                ) {
                  $steps["updateWaitingTransfer2"] = await $steps[
                    "updateWaitingTransfer2"
                  ];
                }

                $steps["updateTransferMessage"] =
                  $steps.request.status == 200
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["transferMessage"]
                          },
                          operation: 0,
                          value: $steps.request.data.data.transfer_message
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["updateTransferMessage"] != null &&
                  typeof $steps["updateTransferMessage"] === "object" &&
                  typeof $steps["updateTransferMessage"].then === "function"
                ) {
                  $steps["updateTransferMessage"] = await $steps[
                    "updateTransferMessage"
                  ];
                }

                $steps["updateRequestTransferid"] =
                  $steps.request.status == 200
                    ? (() => {
                        const actionArgs = {
                          variable: {
                            objRoot: $state,
                            variablePath: ["requestTransferid"]
                          },
                          operation: 0,
                          value: $steps.request.data.data.transferid
                        };
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;

                          $stateSet(objRoot, variablePath, value);
                          return value;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                if (
                  $steps["updateRequestTransferid"] != null &&
                  typeof $steps["updateRequestTransferid"] === "object" &&
                  typeof $steps["updateRequestTransferid"].then === "function"
                ) {
                  $steps["updateRequestTransferid"] = await $steps[
                    "updateRequestTransferid"
                  ];
                }

                $steps["message"] = $steps.request.data.message
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["requestMessage"]
                        },
                        operation: 0,
                        value: $steps.request.data.message
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["message"] != null &&
                  typeof $steps["message"] === "object" &&
                  typeof $steps["message"].then === "function"
                ) {
                  $steps["message"] = await $steps["message"];
                }

                $steps["toastError"] =
                  $steps.request.status != 200
                    ? (() => {
                        const actionArgs = {
                          args: [
                            "error",
                            (() => {
                              try {
                                return $state.requestMessage;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()
                          ]
                        };
                        return $globalActions["Fragment.showToast"]?.apply(
                          null,
                          [...actionArgs.args]
                        );
                      })()
                    : undefined;
                if (
                  $steps["toastError"] != null &&
                  typeof $steps["toastError"] === "object" &&
                  typeof $steps["toastError"].then === "function"
                ) {
                  $steps["toastError"] = await $steps["toastError"];
                }
              }}
              size={"compact"}
            />
          ) : null}
          {(() => {
            try {
              return $state.waitingTransfer;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Icon2Icon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              role={"img"}
            />
          ) : null}
        </div>
      </div>
      <SideEffect
        data-plasmic-name={"sideEffect"}
        data-plasmic-override={overrides.sideEffect}
        className={classNames("__wab_instance", sty.sideEffect)}
        deps={(() => {
          try {
            return [$state.mobleCompeleteCounter];
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        onMount={async () => {
          const $steps = {};

          $steps["updateWaitingTransfer"] = false
            ? (() => {
                const actionArgs = {
                  variable: {
                    objRoot: $state,
                    variablePath: ["waitingTransfer"]
                  },
                  operation: 0,
                  value: true
                };
                return (({ variable, value, startIndex, deleteCount }) => {
                  if (!variable) {
                    return;
                  }
                  const { objRoot, variablePath } = variable;

                  $stateSet(objRoot, variablePath, value);
                  return value;
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["updateWaitingTransfer"] != null &&
            typeof $steps["updateWaitingTransfer"] === "object" &&
            typeof $steps["updateWaitingTransfer"].then === "function"
          ) {
            $steps["updateWaitingTransfer"] = await $steps[
              "updateWaitingTransfer"
            ];
          }
        }}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "txtTransferMobile",
    "txtTransferPrice",
    "txtTitle",
    "txtTransferCode",
    "svg",
    "sideEffect"
  ],
  txtTransferMobile: ["txtTransferMobile"],
  txtTransferPrice: ["txtTransferPrice"],
  txtTitle: ["txtTitle"],
  txtTransferCode: ["txtTransferCode"],
  svg: ["svg"],
  sideEffect: ["sideEffect"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  txtTransferMobile: typeof TextInput;
  txtTransferPrice: typeof TextInput;
  txtTitle: typeof TextInput;
  txtTransferCode: typeof TextInput;
  svg: "svg";
  sideEffect: typeof SideEffect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTransferToAnotherWallet__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTransferToAnotherWallet__VariantsArgs;
    args?: PlasmicTransferToAnotherWallet__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTransferToAnotherWallet__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTransferToAnotherWallet__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTransferToAnotherWallet__ArgProps,
          internalVariantPropNames: PlasmicTransferToAnotherWallet__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTransferToAnotherWallet__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTransferToAnotherWallet";
  } else {
    func.displayName = `PlasmicTransferToAnotherWallet.${nodeName}`;
  }
  return func;
}

export const PlasmicTransferToAnotherWallet = Object.assign(
  // Top-level PlasmicTransferToAnotherWallet renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    txtTransferMobile: makeNodeComponent("txtTransferMobile"),
    txtTransferPrice: makeNodeComponent("txtTransferPrice"),
    txtTitle: makeNodeComponent("txtTitle"),
    txtTransferCode: makeNodeComponent("txtTransferCode"),
    svg: makeNodeComponent("svg"),
    sideEffect: makeNodeComponent("sideEffect"),

    // Metadata about props expected for PlasmicTransferToAnotherWallet
    internalVariantProps: PlasmicTransferToAnotherWallet__VariantProps,
    internalArgProps: PlasmicTransferToAnotherWallet__ArgProps
  }
);

export default PlasmicTransferToAnotherWallet;
/* prettier-ignore-end */
