/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: afXULSfGYmou2jFpEc2QWJ
// Component: X-9VpIiu6hFS

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: 0wu_ZE1f8SuT/component
import Select from "../../Select"; // plasmic-import: 7wkEfmUYAcMf/component
import Button2 from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import Dialog from "../../Dialog"; // plasmic-import: nYtkLnbqtkXY/component
import TextInput from "../../TextInput"; // plasmic-import: SePhlRlvEn3n/component
import Dialog2 from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component
import { TabContent } from "@plasmicpkgs/plasmic-tabs";
import TransferToAnotherWallet from "../../TransferToAnotherWallet"; // plasmic-import: y7cY5QHMxpPK/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: hVBOtSJvmbc4/codeComponent
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantsbr2UhI7UlpvR } from "../fragment_icons/PlasmicGlobalVariant__Screen"; // plasmic-import: BR2UhI7ulpvR/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "../chortke/plasmic.module.css"; // plasmic-import: afXULSfGYmou2jFpEc2QWJ/projectcss
import sty from "./PlasmicTransactionsSearch.module.css"; // plasmic-import: X-9VpIiu6hFS/css

import Icon11Icon from "../chortke/icons/PlasmicIcon__Icon11"; // plasmic-import: sdf49AtFp7I6/icon
import Icon6Icon from "../chortke/icons/PlasmicIcon__Icon6"; // plasmic-import: 7-KwYGGksEHB/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import SearchSvgIcon from "../chortke/icons/PlasmicIcon__SearchSvg"; // plasmic-import: fjupp6w2fUeo/icon
import CheckSvgIcon from "../chortke/icons/PlasmicIcon__CheckSvg"; // plasmic-import: VZ6Vl-sB0jLM/icon
import Icon2Icon from "../chortke/icons/PlasmicIcon__Icon2"; // plasmic-import: eeiQdsLura6L/icon
import Icon47Icon from "./icons/PlasmicIcon__Icon47"; // plasmic-import: MwxnRV3Jbx5Y/icon
import Icon44Icon from "./icons/PlasmicIcon__Icon44"; // plasmic-import: BqWt4mC1I6f6/icon
import Icon45Icon from "./icons/PlasmicIcon__Icon45"; // plasmic-import: ZLOL59vKkeZc/icon

createPlasmicElementProxy;

export type PlasmicTransactionsSearch__VariantMembers = {};
export type PlasmicTransactionsSearch__VariantsArgs = {};
type VariantPropType = keyof PlasmicTransactionsSearch__VariantsArgs;
export const PlasmicTransactionsSearch__VariantProps =
  new Array<VariantPropType>();

export type PlasmicTransactionsSearch__ArgsType = {};
type ArgPropType = keyof PlasmicTransactionsSearch__ArgsType;
export const PlasmicTransactionsSearch__ArgProps = new Array<ArgPropType>();

export type PlasmicTransactionsSearch__OverridesType = {
  root?: Flex__<"div">;
  h1?: Flex__<"h1">;
  btnDashboard3?: Flex__<"div">;
  lblUser?: Flex__<"div">;
  btnLogout?: Flex__<"a"> & Partial<LinkProps>;
  btnLogin?: Flex__<typeof Button>;
  cbAccounts?: Flex__<typeof Select>;
  btnFilter?: Flex__<typeof Button2>;
  btnFilterClear?: Flex__<typeof Button2>;
  gridInvoice1?: Flex__<"div">;
  txtRemainingText?: Flex__<"div">;
  txtRemainingValue?: Flex__<"div">;
  dialogIncreaseRemaining?: Flex__<typeof Dialog>;
  btnPay?: Flex__<typeof Button>;
  gridSelectprice?: Flex__<"div">;
  btnSelectAmount?: Flex__<typeof Button>;
  gridMyAmount?: Flex__<"div">;
  txtNewPaymentAmount?: Flex__<typeof TextInput>;
  btnSettlement?: Flex__<typeof Button2>;
  dialogSettlement?: Flex__<typeof Dialog2>;
  tabContent?: Flex__<typeof TabContent>;
  txtSettlemenAmount?: Flex__<typeof TextInput>;
  dialogRegisterAccount?: Flex__<typeof Dialog2>;
  txtCardId?: Flex__<typeof TextInput>;
  txtCardOwner?: Flex__<typeof TextInput>;
  txtCardIban?: Flex__<typeof TextInput>;
  txtCardBankName?: Flex__<typeof TextInput>;
  txtCardNumber?: Flex__<typeof TextInput>;
  txtSettlementResult?: Flex__<"div">;
  dialogTransfer?: Flex__<typeof Dialog2>;
  transferToAnotherWallet?: Flex__<typeof TransferToAnotherWallet>;
  gridInvoice13?: Flex__<"div">;
  gridInvoice12?: Flex__<"div">;
  dialogNewInvoiceDetails?: Flex__<typeof Dialog>;
  detailsDataApiRequest?: Flex__<typeof ApiRequest>;
  waitingIcon3?: Flex__<"svg">;
  gridNoData2?: Flex__<"div">;
  gridNoData?: Flex__<"div">;
  sideEffectPageLoad?: Flex__<typeof SideEffect>;
  sideEffectRefresh?: Flex__<typeof SideEffect>;
  growthBook?: Flex__<typeof SideEffect>;
  embedHtml?: Flex__<typeof Embed>;
};

export interface DefaultTransactionsSearchProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTransactionsSearch__RenderFunc(props: {
  variants: PlasmicTransactionsSearch__VariantsArgs;
  args: PlasmicTransactionsSearch__ArgsType;
  overrides: PlasmicTransactionsSearch__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "user",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "txtUserName",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "btnLoginShow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "btnLogoutShow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "productList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            productid: 0,
            name: "\u0644\u0637\u0641\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u0646\u0645\u0627\u06cc\u06cc\u062f"
          }
        ]
      },
      {
        path: "userid",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "hkk"
      },
      {
        path: "txtTest2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "waiting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "btnPayShow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "txtReminderTextValue",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "txtReminderValue",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "invoicelist",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "invoiceDetials",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({
          status: true,
          message:
            "\u062c\u0632\u0626\u06cc\u0627\u062a \u0635\u0648\u0631\u062a \u062d\u0633\u0627\u0628",
          data: {
            invoiceid: 197,
            userid: "15594550",
            status: "registered",
            type: "purchase",
            discountpercent: 0,
            vatpercent: 0,
            title:
              "\u067e\u0631\u062f\u0627\u062e\u062a \u0628\u0627\u0628\u062a \u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0645\u0634\u0627\u0648\u0631\u0647 \u0622\u0646\u0644\u0627\u06cc\u0646",
            description:
              "\u062f\u0631\u06af\u0627\u0647 \u067e\u0631\u062f\u0627\u062e\u062a \u0633\u0627\u0645\u0627\u0646",
            sumprice: 15000,
            discountprice: 0,
            vatprice: 0,
            finalprice: 15000,
            registerdate: "2024-07-28",
            services: [
              {
                service:
                  "\u062f\u0631\u06af\u0627\u0647 \u067e\u0631\u062f\u0627\u062e\u062a \u0633\u0627\u0645\u0627\u0646",
                count: 1,
                price: "15000"
              }
            ],
            meta: {
              ResNum: "e40a83d2-d5f6-4c52-83ab-fdde1bdad009",
              samantoken: "8fc9e787e0c548e58e4896c17d0aa475",
              returnlink: "https://paziresh24.com/"
            }
          }
        })
      },
      {
        path: "isDialogOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "invoiceHasOnlinePayment",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "waitingInvoiceDetails",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "increaseButtonList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          2000000, 3500000, 5000000
        ]
      },
      {
        path: "waitingPayment",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "paymentAmount",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "txtNewPaymentAmount.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "showMyAmount",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "isShowPaymentButton",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "reminderWallet",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "increaseButtonListBase",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          2000000, 3500000, 5000000
        ]
      },
      {
        path: "showSelectPriceGrid",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "dialogIncreaseRemaining.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          hasVariant(globalVariants, "screen", "mobileOnly") ? false : false
      },
      {
        path: "showCbCenters",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "centersList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "currentCenterid",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "0"
      },
      {
        path: "txtPaymentText",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "\u0627\u0641\u0632\u0627\u06cc\u0634 \u0645\u0648\u062c\u0648\u062f\u06cc"
      },
      {
        path: "limit",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 20
      },
      {
        path: "offset",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "waitingLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "showMoreBtn",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "dialogSettlement.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "isSettlementShow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "txtSettlemenAmount.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "bankAccountList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "dialogRegisterAccount.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "txtCardId.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "cardInquiry",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "txtCardOwner.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.cardInquiry.deposit_owners[0];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "txtCardIban.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.cardInquiry.IBAN;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "txtCardBankName.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.cardInquiry.bank_name;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "waitingAccount",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "insertAccountErrorText",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "waitingSettlement",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "requestSettlementMessage",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "firstRequestCount",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "btnRegisterSettlementShow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "settlementResultShow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "cbAccounts.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.accounts[0].id;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "0";
              }
              throw e;
            }
          })()
      },
      {
        path: "accounts",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "requestInvoiceUrl",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "requestWalletUrl",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "switchAccountPanel",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "currentAccountType",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "updatewallet",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "isLoadAccount",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "dialogNewInvoiceDetails[].open",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "detailsDataApiRequest[].data",
        type: "private",
        variableType: "object",

        refName: "detailsDataApiRequest"
      },
      {
        path: "detailsDataApiRequest[].error",
        type: "private",
        variableType: "object",

        refName: "detailsDataApiRequest"
      },
      {
        path: "detailsDataApiRequest[].loading",
        type: "private",
        variableType: "boolean",

        refName: "detailsDataApiRequest"
      },
      {
        path: "paymentLink",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "variable2",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "pageNumber",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      },
      {
        path: "currentAccountId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "currentAccountAccount",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "userData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "settlementMessage",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "settlementActive",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "settlementService",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "saman"
      },
      {
        path: "transactionsReport",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "bookDate",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "centerInfo",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "dialogTransfer.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "transferToAnotherWallet.transferCenterid",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.currentAccountType == "centerid"
                ? $state.currentAccountId
                : "";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "transferToAnotherWallet.transferedCount",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "txtCardNumber.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "requestSettlementState",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "recurringSettlement",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbr2UhI7UlpvR()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">
          {PlasmicTransactionsSearch.pageMetadata.title}
        </title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicTransactionsSearch.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicTransactionsSearch.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicTransactionsSearch.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicTransactionsSearch.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicTransactionsSearch.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicTransactionsSearch.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicTransactionsSearch.pageMetadata.ogImageSrc}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            plasmic_fragment_design_system_css.plasmic_tokens,
            sty.root
          )}
          dir={"rtl"}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___0BxGx)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__y5Grx)}>
              <div className={classNames(projectcss.all, sty.freeBox__jEgD)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox__q8MvT)}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__fpqZv)}>
                <div className={classNames(projectcss.all, sty.freeBox__khmc1)}>
                  <Icon11Icon
                    className={classNames(projectcss.all, sty.svg__qPlax)}
                    onClick={async event => {
                      const $steps = {};

                      $steps["goToHttpsPaziresh24Com"] = true
                        ? (() => {
                            const actionArgs = {
                              destination: "https://paziresh24.com"
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToHttpsPaziresh24Com"] != null &&
                        typeof $steps["goToHttpsPaziresh24Com"] === "object" &&
                        typeof $steps["goToHttpsPaziresh24Com"].then ===
                          "function"
                      ) {
                        $steps["goToHttpsPaziresh24Com"] = await $steps[
                          "goToHttpsPaziresh24Com"
                        ];
                      }
                    }}
                    role={"img"}
                  />

                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    {
                      "\u0686\u0631\u062a\u06a9\u0647\u060c \u0645\u062f\u06cc\u0631\u06cc\u062a \u0627\u0645\u0648\u0631 \u0645\u0627\u0644\u06cc"
                    }
                  </h1>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__e3R7O)}>
                <div
                  data-plasmic-name={"btnDashboard3"}
                  data-plasmic-override={overrides.btnDashboard3}
                  className={classNames(projectcss.all, sty.btnDashboard3)}
                  onClick={async event => {
                    const $steps = {};

                    $steps["runCode"] = true
                      ? (() => {
                          const actionArgs = {
                            customFunction: async () => {
                              return (() => {
                                return document
                                  .querySelector(".grid_calculator")
                                  .scrollIntoView({ behavior: "smooth" });
                              })();
                            }
                          };
                          return (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["runCode"] != null &&
                      typeof $steps["runCode"] === "object" &&
                      typeof $steps["runCode"].then === "function"
                    ) {
                      $steps["runCode"] = await $steps["runCode"];
                    }
                  }}
                >
                  <Icon6Icon
                    className={classNames(projectcss.all, sty.svg__r4NNk)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pcCnb
                    )}
                  >
                    {"\u0645\u0627\u0634\u06cc\u0646 \u062d\u0633\u0627\u0628"}
                  </div>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__hNpFn)}>
                <div
                  data-plasmic-name={"lblUser"}
                  data-plasmic-override={overrides.lblUser}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.lblUser
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.txtUserName;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u062d\u062c\u062a \u062e\u0648\u0627\u062c\u0648\u06cc";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                {(() => {
                  try {
                    return $state.btnLogoutShow;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <PlasmicLink__
                    data-plasmic-name={"btnLogout"}
                    data-plasmic-override={overrides.btnLogout}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.btnLogout
                    )}
                    component={Link}
                    href={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ""
                        : undefined
                    }
                    onClick={async event => {
                      const $steps = {};

                      $steps[
                        "goToHttpsPaziresh24ComLogoutUrlHttpsChortkePaziresh24Com"
                      ] = true
                        ? (() => {
                            const actionArgs = {
                              destination:
                                "https://paziresh24.com/logout?url=https://chortke.paziresh24.com"
                            };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps[
                          "goToHttpsPaziresh24ComLogoutUrlHttpsChortkePaziresh24Com"
                        ] != null &&
                        typeof $steps[
                          "goToHttpsPaziresh24ComLogoutUrlHttpsChortkePaziresh24Com"
                        ] === "object" &&
                        typeof $steps[
                          "goToHttpsPaziresh24ComLogoutUrlHttpsChortkePaziresh24Com"
                        ].then === "function"
                      ) {
                        $steps[
                          "goToHttpsPaziresh24ComLogoutUrlHttpsChortkePaziresh24Com"
                        ] = await $steps[
                          "goToHttpsPaziresh24ComLogoutUrlHttpsChortkePaziresh24Com"
                        ];
                      }
                    }}
                    platform={"nextjs"}
                  >
                    {"\u062e\u0631\u0648\u062c"}
                  </PlasmicLink__>
                ) : null}
                {(() => {
                  try {
                    return $state.btnLoginShow;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Button
                    data-plasmic-name={"btnLogin"}
                    data-plasmic-override={overrides.btnLogin}
                    children2={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gk1Iw
                        )}
                      >
                        {"\u0648\u0631\u0648\u062f"}
                      </div>
                    }
                    className={classNames("__wab_instance", sty.btnLogin)}
                    link={
                      "https://www.paziresh24.com/login/?redirect_url=https://chortke.paziresh24.com/"
                    }
                    outline={true}
                  />
                ) : null}
              </div>
            </div>
          </Stack__>
          <section
            className={classNames(projectcss.all, sty.section__eFgfC)}
            dir={"rtl"}
          >
            {(
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? (() => {
                    try {
                      return $state.accounts.length > 1;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                : (() => {
                    try {
                      return $state.accounts.length > 1;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
            ) ? (
              <div className={classNames(projectcss.all, sty.freeBox__j6IZb)}>
                <div className={classNames(projectcss.all, sty.freeBox__vgEv)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___3QZsH
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return "حساب کاربری:  ";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "\u062d\u0633\u0627\u0628 \u06a9\u0627\u0631\u0628\u0631\u06cc: ";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <Select
                    data-plasmic-name={"cbAccounts"}
                    data-plasmic-override={overrides.cbAccounts}
                    aria-label={"name"}
                    aria-labelledby={"id"}
                    className={classNames("__wab_instance", sty.cbAccounts)}
                    name={"accounts"}
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "cbAccounts",
                          "value"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }

                      (async value => {
                        const $steps = {};

                        $steps["updateUpdatewallet"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["updatewallet"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateUpdatewallet"] != null &&
                          typeof $steps["updateUpdatewallet"] === "object" &&
                          typeof $steps["updateUpdatewallet"].then ===
                            "function"
                        ) {
                          $steps["updateUpdatewallet"] = await $steps[
                            "updateUpdatewallet"
                          ];
                        }

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    $state.bankAccountList = [];
                                    return ($state.bookDate = "");
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }

                        $steps["updateFirstRequestCount"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["firstRequestCount"]
                                },
                                operation: 2
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, oldValue + 1);
                                return oldValue + 1;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateFirstRequestCount"] != null &&
                          typeof $steps["updateFirstRequestCount"] ===
                            "object" &&
                          typeof $steps["updateFirstRequestCount"].then ===
                            "function"
                        ) {
                          $steps["updateFirstRequestCount"] = await $steps[
                            "updateFirstRequestCount"
                          ];
                        }
                      }).apply(null, eventArgs);
                    }}
                    options={(() => {
                      try {
                        return $state.accounts.map(item => ({
                          value: item.uniqueid.toString(),
                          label: item.name
                        }));
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    placeholder={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ohlL8
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                          "\u0627\u0646\u062a\u062e\u0627\u0628 \u0646\u0645\u0627\u06cc\u06cc\u062f"
                        ) : (
                          <React.Fragment>
                            {(() => {
                              try {
                                return "حساب مورد نظر را انتخاب نمایید";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0645\u0631\u06a9\u0632 \u0645\u0648\u0631\u062f \u0646\u0638\u0631 \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u0646\u0645\u0627\u06cc\u06cc\u062f";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        )}
                      </div>
                    }
                    value={generateStateValueProp($state, [
                      "cbAccounts",
                      "value"
                    ])}
                  />
                </div>
                {(() => {
                  try {
                    return (
                      $state.currentAccountType == "centerid" &&
                      $state.userData?.isDoctor &&
                      !$state.waiting
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__uosbZ)}
                  >
                    {(() => {
                      try {
                        return $state.bookDate == "";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <Button2
                        data-plasmic-name={"btnFilter"}
                        data-plasmic-override={overrides.btnFilter}
                        children2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___8KUms
                            )}
                          >
                            {
                              "\u0645\u0631\u0627\u062c\u0639\u06cc\u0646 \u0627\u0645\u0631\u0648\u0632"
                            }
                          </div>
                        }
                        className={classNames("__wab_instance", sty.btnFilter)}
                        onClick={async event => {
                          const $steps = {};

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return ($state.bookDate = new Date()
                                      .toISOString()
                                      .split("T")[0]);
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }

                          $steps["updateFirstRequestCount"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["firstRequestCount"]
                                  },
                                  operation: 2
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(
                                    objRoot,
                                    variablePath,
                                    oldValue + 1
                                  );
                                  return oldValue + 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateFirstRequestCount"] != null &&
                            typeof $steps["updateFirstRequestCount"] ===
                              "object" &&
                            typeof $steps["updateFirstRequestCount"].then ===
                              "function"
                          ) {
                            $steps["updateFirstRequestCount"] = await $steps[
                              "updateFirstRequestCount"
                            ];
                          }
                        }}
                        size={"compact"}
                      />
                    ) : null}
                    {(() => {
                      try {
                        return $state.bookDate != "";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <Button2
                        data-plasmic-name={"btnFilterClear"}
                        data-plasmic-override={overrides.btnFilterClear}
                        children2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___1V2NI
                            )}
                          >
                            {
                              "\u0646\u0645\u0627\u06cc\u0634 \u0647\u0645\u0647"
                            }
                          </div>
                        }
                        className={classNames(
                          "__wab_instance",
                          sty.btnFilterClear
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      return ($state.bookDate = "");
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }

                          $steps["updateFirstRequestCount"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["firstRequestCount"]
                                  },
                                  operation: 2
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  const oldValue = $stateGet(
                                    objRoot,
                                    variablePath
                                  );
                                  $stateSet(
                                    objRoot,
                                    variablePath,
                                    oldValue + 1
                                  );
                                  return oldValue + 1;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateFirstRequestCount"] != null &&
                            typeof $steps["updateFirstRequestCount"] ===
                              "object" &&
                            typeof $steps["updateFirstRequestCount"].then ===
                              "function"
                          ) {
                            $steps["updateFirstRequestCount"] = await $steps[
                              "updateFirstRequestCount"
                            ];
                          }
                        }}
                        size={"compact"}
                      />
                    ) : null}
                  </div>
                ) : null}
              </div>
            ) : null}
            <section className={classNames(projectcss.all, sty.section__jlUjK)}>
              <div
                data-plasmic-name={"gridInvoice1"}
                data-plasmic-override={overrides.gridInvoice1}
                className={classNames(projectcss.all, sty.gridInvoice1)}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : (() => {
                        try {
                          return !$state.waiting;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })()
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__nQf7B)}
                  >
                    {(() => {
                      try {
                        return !$state.waiting;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        data-plasmic-name={"txtRemainingText"}
                        data-plasmic-override={overrides.txtRemainingText}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.txtRemainingText
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.txtReminderTextValue;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0645\u0627\u0646\u062f\u0647 \u0628\u062f\u0647\u06cc:";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    ) : null}
                    {(() => {
                      try {
                        return !$state.waiting;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        data-plasmic-name={"txtRemainingValue"}
                        data-plasmic-override={overrides.txtRemainingValue}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.txtRemainingValue
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                          <React.Fragment>
                            {(() => {
                              try {
                                return (() => {
                                  return $state.txtReminderValue == 0
                                    ? ""
                                    : $state.txtReminderValue
                                        .toString()
                                        .replace("\u2212", "")
                                        .replace(/\B(?=(\d{3})+(?!\d))/g, ",") +
                                        " ریال";
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "0";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        ) : (
                          <React.Fragment>
                            {(() => {
                              try {
                                return (() => {
                                  return $state.txtReminderValue == 0
                                    ? ""
                                    : $state.txtReminderValue
                                        .toString()
                                        .replace("\u2212", "")
                                        .replace(/\B(?=(\d{3})+(?!\d))/g, ",") +
                                        " ریال";
                                })();
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "0";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        )}
                      </div>
                    ) : null}
                    <Dialog
                      data-plasmic-name={"dialogIncreaseRemaining"}
                      data-plasmic-override={overrides.dialogIncreaseRemaining}
                      body={
                        <React.Fragment>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___5Ra34
                            )}
                          />

                          {(() => {
                            try {
                              return $state.showSelectPriceGrid;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              data-plasmic-name={"gridSelectprice"}
                              data-plasmic-override={overrides.gridSelectprice}
                              className={classNames(
                                projectcss.all,
                                sty.gridSelectprice
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__iELjq
                                )}
                              >
                                {(_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $state.increaseButtonList;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                  const currentItem = __plasmic_item_0;
                                  const currentIndex = __plasmic_idx_0;
                                  return (
                                    <Button
                                      data-plasmic-name={"btnSelectAmount"}
                                      data-plasmic-override={
                                        overrides.btnSelectAmount
                                      }
                                      children2={
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text___9A7K
                                          )}
                                        >
                                          {hasVariant(
                                            globalVariants,
                                            "screen",
                                            "mobileOnly"
                                          ) ? (
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return new Intl.NumberFormat(
                                                    "fa-IR"
                                                  ).format(
                                                    $state.increaseButtonList[
                                                      currentIndex
                                                    ]
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "Button";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          ) : (
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return (
                                                    new Intl.NumberFormat(
                                                      "fa-IR"
                                                    ).format(
                                                      $state.increaseButtonList[
                                                        currentIndex
                                                      ]
                                                    ) + " ریال"
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "Button";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          )}
                                        </div>
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.btnSelectAmount
                                      )}
                                      color={"green"}
                                      key={currentIndex}
                                      onClick={async event => {
                                        const $steps = {};

                                        $steps["updatePaymentAmount"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "paymentAmount"
                                                  ]
                                                },
                                                operation: 0,
                                                value:
                                                  $state.increaseButtonList[
                                                    currentIndex
                                                  ]
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updatePaymentAmount"] !=
                                            null &&
                                          typeof $steps[
                                            "updatePaymentAmount"
                                          ] === "object" &&
                                          typeof $steps["updatePaymentAmount"]
                                            .then === "function"
                                        ) {
                                          $steps["updatePaymentAmount"] =
                                            await $steps["updatePaymentAmount"];
                                        }

                                        $steps["runCode"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                customFunction: async () => {
                                                  return ($state.txtNewPaymentAmount.value =
                                                    $state.increaseButtonList[
                                                      currentIndex
                                                    ]);
                                                }
                                              };
                                              return (({ customFunction }) => {
                                                return customFunction();
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["runCode"] != null &&
                                          typeof $steps["runCode"] ===
                                            "object" &&
                                          typeof $steps["runCode"].then ===
                                            "function"
                                        ) {
                                          $steps["runCode"] = await $steps[
                                            "runCode"
                                          ];
                                        }
                                      }}
                                    />
                                  );
                                })}
                                <Button
                                  children2={"..."}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button__sI5Cf
                                  )}
                                  color={"green"}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["runCode"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            customFunction: async () => {
                                              return ($state.showMyAmount =
                                                !$state.showMyAmount);
                                            }
                                          };
                                          return (({ customFunction }) => {
                                            return customFunction();
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["runCode"] != null &&
                                      typeof $steps["runCode"] === "object" &&
                                      typeof $steps["runCode"].then ===
                                        "function"
                                    ) {
                                      $steps["runCode"] = await $steps[
                                        "runCode"
                                      ];
                                    }
                                  }}
                                />
                              </div>
                            </div>
                          ) : null}
                          {(
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? true
                              : (() => {
                                  try {
                                    return $state.showMyAmount;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })()
                          ) ? (
                            <div
                              data-plasmic-name={"gridMyAmount"}
                              data-plasmic-override={overrides.gridMyAmount}
                              className={classNames(
                                projectcss.all,
                                sty.gridMyAmount
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___9GsoM
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__gAzRa
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? "\u0645\u0628\u0644\u063a:"
                                    : "\u0645\u0628\u0644\u063a:"}
                                </div>
                              </div>
                              {(
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? (() => {
                                      try {
                                        return $state.showMyAmount;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return true;
                                        }
                                        throw e;
                                      }
                                    })()
                                  : true
                              ) ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__szxXd
                                  )}
                                  dir={"rtl"}
                                >
                                  <TextInput
                                    data-plasmic-name={"txtNewPaymentAmount"}
                                    data-plasmic-override={
                                      overrides.txtNewPaymentAmount
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.txtNewPaymentAmount
                                    )}
                                    onChange={async (...eventArgs: any) => {
                                      ((...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "txtNewPaymentAmount",
                                          "value"
                                        ])(
                                          (e => e.target?.value).apply(
                                            null,
                                            eventArgs
                                          )
                                        );
                                      }).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }

                                      (async event => {
                                        const $steps = {};

                                        $steps["updatePaymentAmount"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "paymentAmount"
                                                  ]
                                                },
                                                operation: 0,
                                                value:
                                                  $state.txtNewPaymentAmount
                                                    .value
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["updatePaymentAmount"] !=
                                            null &&
                                          typeof $steps[
                                            "updatePaymentAmount"
                                          ] === "object" &&
                                          typeof $steps["updatePaymentAmount"]
                                            .then === "function"
                                        ) {
                                          $steps["updatePaymentAmount"] =
                                            await $steps["updatePaymentAmount"];
                                        }
                                      }).apply(null, eventArgs);
                                    }}
                                    placeholder={
                                      "\u0645\u0628\u0644\u063a \u0645\u0648\u0631\u062f \u0646\u0638\u0631 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f"
                                    }
                                    type={"number"}
                                    value={
                                      generateStateValueProp($state, [
                                        "txtNewPaymentAmount",
                                        "value"
                                      ]) ?? ""
                                    }
                                  />
                                </div>
                              ) : null}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__vSgg6
                                )}
                              />
                            </div>
                          ) : null}
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__cxN5E
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__xgkdy
                              )}
                            >
                              <Button
                                children2={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__qlqQs
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return (
                                            new Intl.NumberFormat(
                                              "fa-IR"
                                            ).format($state.paymentAmount) +
                                            " ریال" +
                                            " - ارسال به درگاه پرداخت"
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "\u0627\u0631\u0633\u0627\u0644 \u0628\u0647 \u062f\u0631\u06af\u0627\u0647";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                }
                                className={classNames(
                                  "__wab_instance",
                                  sty.button__ejNSt
                                )}
                                onClick={async event => {
                                  const $steps = {};

                                  $steps["showWaitingPayment"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["waitingPayment"]
                                          },
                                          operation: 0,
                                          value: true
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["showWaitingPayment"] != null &&
                                    typeof $steps["showWaitingPayment"] ===
                                      "object" &&
                                    typeof $steps["showWaitingPayment"].then ===
                                      "function"
                                  ) {
                                    $steps["showWaitingPayment"] = await $steps[
                                      "showWaitingPayment"
                                    ];
                                  }

                                  $steps["paymentRequest"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          args: [
                                            "POST",
                                            "https://apigw.paziresh24.com/katibe/v1/paymentlink/p24",
                                            undefined,
                                            (() => {
                                              try {
                                                return {
                                                  productid:
                                                    $state.centerInfo.type_id ==
                                                    1
                                                      ? "1"
                                                      : $state.currentAccountType ==
                                                        "centerid"
                                                      ? "7"
                                                      : "1",
                                                  returnlink:
                                                    "aHR0cHM6Ly93d3cucGF6aXJlc2gyNC5jb20vZGFzaGJvYXJkL2FwcHMva2F0aWJlL2JpbGxzLw==",
                                                  title: "افزایش موجودی",
                                                  amount: $state.paymentAmount,
                                                  centerid:
                                                    $state.currentAccountType ==
                                                    "centerid"
                                                      ? $state.currentAccountId
                                                      : "",
                                                  account:
                                                    $state.currentAccountAccount
                                                };
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()
                                          ]
                                        };
                                        return $globalActions[
                                          "Fragment.apiRequest"
                                        ]?.apply(null, [...actionArgs.args]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["paymentRequest"] != null &&
                                    typeof $steps["paymentRequest"] ===
                                      "object" &&
                                    typeof $steps["paymentRequest"].then ===
                                      "function"
                                  ) {
                                    $steps["paymentRequest"] = await $steps[
                                      "paymentRequest"
                                    ];
                                  }

                                  $steps["updatePaymentLink"] =
                                    $steps.paymentRequest.status == 200 &&
                                    $steps.paymentRequest.data.status == true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["paymentLink"]
                                            },
                                            operation: 0,
                                            value:
                                              $steps.paymentRequest.data.data
                                                .link
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["updatePaymentLink"] != null &&
                                    typeof $steps["updatePaymentLink"] ===
                                      "object" &&
                                    typeof $steps["updatePaymentLink"].then ===
                                      "function"
                                  ) {
                                    $steps["updatePaymentLink"] = await $steps[
                                      "updatePaymentLink"
                                    ];
                                  }

                                  $steps["redirectUser"] =
                                    $steps.paymentRequest.status == 200 &&
                                    $steps.paymentRequest.data.status == true
                                      ? (() => {
                                          const actionArgs = {
                                            args: [
                                              (() => {
                                                try {
                                                  return $state.paymentLink;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()
                                            ]
                                          };
                                          return $globalActions[
                                            "Hamdast.openLink"
                                          ]?.apply(null, [...actionArgs.args]);
                                        })()
                                      : undefined;
                                  if (
                                    $steps["redirectUser"] != null &&
                                    typeof $steps["redirectUser"] ===
                                      "object" &&
                                    typeof $steps["redirectUser"].then ===
                                      "function"
                                  ) {
                                    $steps["redirectUser"] = await $steps[
                                      "redirectUser"
                                    ];
                                  }

                                  $steps["hideWaitingPayment"] = true
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["waitingPayment"]
                                          },
                                          operation: 0,
                                          value: false
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                  if (
                                    $steps["hideWaitingPayment"] != null &&
                                    typeof $steps["hideWaitingPayment"] ===
                                      "object" &&
                                    typeof $steps["hideWaitingPayment"].then ===
                                      "function"
                                  ) {
                                    $steps["hideWaitingPayment"] = await $steps[
                                      "hideWaitingPayment"
                                    ];
                                  }
                                }}
                              />

                              {(() => {
                                try {
                                  return $state.waitingPayment;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <Icon2Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__iPSqa
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                            </div>
                          </div>
                        </React.Fragment>
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.dialogIncreaseRemaining
                      )}
                      onOpenChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "dialogIncreaseRemaining",
                          "open"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      open={generateStateValueProp($state, [
                        "dialogIncreaseRemaining",
                        "open"
                      ])}
                      title={
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__gV9Mg
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__mpy3V
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (() => {
                                    return $state.txtPaymentText + ":";
                                  })();
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u0627\u0641\u0632\u0627\u06cc\u0634 \u0645\u0648\u062c\u0648\u062f\u06cc:";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          {(
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? true
                              : (() => {
                                  try {
                                    return $state.showMyAmount;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })()
                          ) ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__rnEqz
                              )}
                            >
                              {
                                '\u0627\u0628\u062a\u062f\u0627 \u0645\u0628\u0644\u063a \u0645\u0648\u0631\u062f \u0646\u0638\u0631 \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0631\u062f\u0647 \u0648 \u0633\u067e\u0633 \u062f\u06a9\u0645\u0647 "\u0627\u0631\u0633\u0627\u0644 \u0628\u0647 \u062f\u0631\u06af\u0627\u0647" \u0631\u0627 \u0628\u0632\u0646\u06cc\u062f:'
                              }
                            </div>
                          ) : null}
                        </div>
                      }
                      trigger={
                        (() => {
                          try {
                            return $state.reminderWallet < 0;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <Button
                            data-plasmic-name={"btnPay"}
                            data-plasmic-override={overrides.btnPay}
                            children2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__y1NHg
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return $state.txtPaymentText;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "\u067e\u0631\u062f\u0627\u062e\u062a";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            }
                            className={classNames("__wab_instance", sty.btnPay)}
                            color={"green"}
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateShowMyAmount"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["showMyAmount"]
                                      },
                                      operation: 0,
                                      value: false
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateShowMyAmount"] != null &&
                                typeof $steps["updateShowMyAmount"] ===
                                  "object" &&
                                typeof $steps["updateShowMyAmount"].then ===
                                  "function"
                              ) {
                                $steps["updateShowMyAmount"] = await $steps[
                                  "updateShowMyAmount"
                                ];
                              }

                              $steps["buttonList"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return (() => {
                                          $state.increaseButtonList =
                                            $state.reminderWallet < 0
                                              ? [
                                                  Math.abs(
                                                    $state.reminderWallet
                                                  )
                                                ]
                                              : $state.increaseButtonListBase;
                                          $state.paymentAmount =
                                            $state.reminderWallet < 0
                                              ? Math.abs($state.reminderWallet)
                                              : $state
                                                  .increaseButtonListBase[0];
                                          return ($state.showSelectPriceGrid =
                                            $state.reminderWallet < 0
                                              ? false
                                              : true);
                                        })();
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["buttonList"] != null &&
                                typeof $steps["buttonList"] === "object" &&
                                typeof $steps["buttonList"].then === "function"
                              ) {
                                $steps["buttonList"] = await $steps[
                                  "buttonList"
                                ];
                              }

                              $steps["runCode"] = true
                                ? (() => {
                                    const actionArgs = {
                                      customFunction: async () => {
                                        return (() => {
                                          $state.txtNewPaymentAmount.value =
                                            $state.reminderWallet < 0
                                              ? Math.abs($state.reminderWallet)
                                              : $state.reminderWallet;
                                          if ($state.reminderWallet >= 0)
                                            return ($state.showMyAmount =
                                              false);
                                          else
                                            return ($state.showMyAmount = true);
                                        })();
                                      }
                                    };
                                    return (({ customFunction }) => {
                                      return customFunction();
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["runCode"] != null &&
                                typeof $steps["runCode"] === "object" &&
                                typeof $steps["runCode"].then === "function"
                              ) {
                                $steps["runCode"] = await $steps["runCode"];
                              }
                            }}
                          />
                        ) : null
                      }
                    />

                    {(() => {
                      try {
                        return (
                          $state.reminderWallet > 0 &&
                          !$state.waiting &&
                          (($state.currentAccountAccount == "organization" &&
                            $state.currentAccountType == "centerid") ||
                            ($state.currentAccountAccount == "p24" &&
                              $state.currentAccountType == "userid"))
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <Button2
                        data-plasmic-name={"btnSettlement"}
                        data-plasmic-override={overrides.btnSettlement}
                        children2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__h471K
                            )}
                          >
                            {
                              "\u062f\u0631\u062e\u0648\u0627\u0633\u062a \u062a\u0633\u0648\u06cc\u0647"
                            }
                          </div>
                        }
                        className={classNames(
                          "__wab_instance",
                          sty.btnSettlement
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      $state.txtSettlemenAmount.value =
                                        $state.reminderWallet;
                                      $state.settlementResultShow = false;
                                      return ($state.btnRegisterSettlementShow =
                                        true);
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }

                          $steps["getSettlementMessage"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    undefined,
                                    (() => {
                                      try {
                                        return (
                                          "https://apigw.paziresh24.com/ganjname/v1/message" +
                                          ($state.currentAccountType ==
                                          "centerid"
                                            ? "?centerid=" +
                                              $state.currentAccountId
                                            : "")
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["getSettlementMessage"] != null &&
                            typeof $steps["getSettlementMessage"] ===
                              "object" &&
                            typeof $steps["getSettlementMessage"].then ===
                              "function"
                          ) {
                            $steps["getSettlementMessage"] = await $steps[
                              "getSettlementMessage"
                            ];
                          }

                          $steps["runCode3"] =
                            $steps.getSettlementMessage.status == 200
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        if (
                                          $steps.getSettlementMessage.status ==
                                          200
                                        ) {
                                          $state.settlementMessage =
                                            $steps.getSettlementMessage.data.message;
                                          $state.settlementActive =
                                            $steps.getSettlementMessage.data.active;
                                          return ($state.settlementService =
                                            $steps.getSettlementMessage.data.service);
                                        }
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["runCode3"] != null &&
                            typeof $steps["runCode3"] === "object" &&
                            typeof $steps["runCode3"].then === "function"
                          ) {
                            $steps["runCode3"] = await $steps["runCode3"];
                          }

                          $steps["openDialog"] =
                            $state.bankAccountList.length > 0
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return ($state.dialogSettlement.open =
                                        true);
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["openDialog"] != null &&
                            typeof $steps["openDialog"] === "object" &&
                            typeof $steps["openDialog"].then === "function"
                          ) {
                            $steps["openDialog"] = await $steps["openDialog"];
                          }

                          $steps["updateWaiting2"] =
                            $state.bankAccountList.length == 0
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["waiting"]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateWaiting2"] != null &&
                            typeof $steps["updateWaiting2"] === "object" &&
                            typeof $steps["updateWaiting2"].then === "function"
                          ) {
                            $steps["updateWaiting2"] = await $steps[
                              "updateWaiting2"
                            ];
                          }

                          $steps["getUserAccounts"] =
                            $state.bankAccountList.length == 0
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      undefined,
                                      (() => {
                                        try {
                                          return (() => {
                                            if (
                                              $state.currentAccountType ==
                                              "centerid"
                                            )
                                              return (
                                                "https://apigw.paziresh24.com/financialaccount/v1/useraccounts?centerid=" +
                                                $state.currentAccountId
                                              );
                                            else
                                              return "https://apigw.paziresh24.com/financialaccount/v1/useraccounts";
                                          })();
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.apiRequest"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                          if (
                            $steps["getUserAccounts"] != null &&
                            typeof $steps["getUserAccounts"] === "object" &&
                            typeof $steps["getUserAccounts"].then === "function"
                          ) {
                            $steps["getUserAccounts"] = await $steps[
                              "getUserAccounts"
                            ];
                          }

                          $steps["updateBankAccountList"] =
                            $steps.getUserAccounts.status == 200 &&
                            $state.bankAccountList.length == 0
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["bankAccountList"]
                                    },
                                    operation: 0,
                                    value: $steps.getUserAccounts.data.data
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateBankAccountList"] != null &&
                            typeof $steps["updateBankAccountList"] ===
                              "object" &&
                            typeof $steps["updateBankAccountList"].then ===
                              "function"
                          ) {
                            $steps["updateBankAccountList"] = await $steps[
                              "updateBankAccountList"
                            ];
                          }

                          $steps["getRecurringSettlement"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    undefined,
                                    (() => {
                                      try {
                                        return (
                                          "https://apigw.paziresh24.com/ganjname/v1/recurring-settlement/" +
                                          ($state.currentAccountType ==
                                          "centerid"
                                            ? "?centerid=" +
                                              $state.currentAccountId
                                            : "")
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["getRecurringSettlement"] != null &&
                            typeof $steps["getRecurringSettlement"] ===
                              "object" &&
                            typeof $steps["getRecurringSettlement"].then ===
                              "function"
                          ) {
                            $steps["getRecurringSettlement"] = await $steps[
                              "getRecurringSettlement"
                            ];
                          }

                          $steps["updateRecurringSettlement"] =
                            $steps.getRecurringSettlement.status == 200
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["recurringSettlement"]
                                    },
                                    operation: 0,
                                    value:
                                      $steps.getRecurringSettlement.data.data
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["updateRecurringSettlement"] != null &&
                            typeof $steps["updateRecurringSettlement"] ===
                              "object" &&
                            typeof $steps["updateRecurringSettlement"].then ===
                              "function"
                          ) {
                            $steps["updateRecurringSettlement"] = await $steps[
                              "updateRecurringSettlement"
                            ];
                          }

                          $steps["updateWaiting"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["waiting"]
                                  },
                                  operation: 0,
                                  value: false
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateWaiting"] != null &&
                            typeof $steps["updateWaiting"] === "object" &&
                            typeof $steps["updateWaiting"].then === "function"
                          ) {
                            $steps["updateWaiting"] = await $steps[
                              "updateWaiting"
                            ];
                          }

                          $steps["runCode2"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      $state.dialogSettlement.open = true;
                                      if ($state.bankAccountList.length > 0)
                                        return ($state.requestSettlementState =
                                          "request-settlement");
                                      else
                                        return ($state.requestSettlementState =
                                          "register-bank-account");
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode2"] != null &&
                            typeof $steps["runCode2"] === "object" &&
                            typeof $steps["runCode2"].then === "function"
                          ) {
                            $steps["runCode2"] = await $steps["runCode2"];
                          }
                        }}
                        size={"compact"}
                      />
                    ) : null}
                    <Dialog2
                      data-plasmic-name={"dialogSettlement"}
                      data-plasmic-override={overrides.dialogSettlement}
                      body={
                        <React.Fragment>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__w6Bk
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return (
                                    "طلب شما: " +
                                    $state.txtReminderValue +
                                    " ریال"
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u0645\u0648\u062c\u0648\u062f\u06cc \u062d\u0633\u0627\u0628:";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                          {(() => {
                            try {
                              return $state.btnRegisterSettlementShow;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__zdrI4
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__xyeo2
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__yCfYe
                                  )}
                                >
                                  {"\u0645\u0628\u0644\u063a:"}
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__ebw
                                )}
                              >
                                <TabContent
                                  data-plasmic-name={"tabContent"}
                                  data-plasmic-override={overrides.tabContent}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.tabContent
                                  )}
                                >
                                  <TextInput
                                    data-plasmic-name={"txtSettlemenAmount"}
                                    data-plasmic-override={
                                      overrides.txtSettlemenAmount
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.txtSettlemenAmount
                                    )}
                                    onChange={async (...eventArgs: any) => {
                                      ((...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "txtSettlemenAmount",
                                          "value"
                                        ])(
                                          (e => e.target?.value).apply(
                                            null,
                                            eventArgs
                                          )
                                        );
                                      }).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }

                                      (async event => {
                                        const $steps = {};

                                        $steps["runCode"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                customFunction: async () => {
                                                  return (() => {
                                                    if (
                                                      parseInt(
                                                        $state
                                                          .txtSettlemenAmount
                                                          .value
                                                      ) > $state.reminderWallet
                                                    ) {
                                                      return ($state.txtSettlemenAmount.value =
                                                        $state.reminderWallet.toString());
                                                    }
                                                  })();
                                                }
                                              };
                                              return (({ customFunction }) => {
                                                return customFunction();
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["runCode"] != null &&
                                          typeof $steps["runCode"] ===
                                            "object" &&
                                          typeof $steps["runCode"].then ===
                                            "function"
                                        ) {
                                          $steps["runCode"] = await $steps[
                                            "runCode"
                                          ];
                                        }
                                      }).apply(null, eventArgs);
                                    }}
                                    placeholder={
                                      "\u0645\u0628\u0644\u063a \u0645\u0648\u0631\u062f \u0646\u0638\u0631 \u0628\u0647 \u0631\u06cc\u0627\u0644"
                                    }
                                    type={
                                      hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? "number"
                                        : undefined
                                    }
                                    value={
                                      generateStateValueProp($state, [
                                        "txtSettlemenAmount",
                                        "value"
                                      ]) ?? ""
                                    }
                                  />
                                </TabContent>
                              </div>
                            </div>
                          ) : null}
                          {(() => {
                            try {
                              return $state.btnRegisterSettlementShow;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__um9GR
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__pyAb5
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__mbh1C
                                  )}
                                >
                                  {
                                    "\u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a:"
                                  }
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__iSxgv
                                  )}
                                >
                                  <Dialog2
                                    data-plasmic-name={"dialogRegisterAccount"}
                                    data-plasmic-override={
                                      overrides.dialogRegisterAccount
                                    }
                                    body={
                                      <React.Fragment>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__n1VDq
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__d9GVi
                                            )}
                                          >
                                            <TextInput
                                              data-plasmic-name={"txtCardId"}
                                              data-plasmic-override={
                                                overrides.txtCardId
                                              }
                                              className={classNames(
                                                "__wab_instance",
                                                sty.txtCardId
                                              )}
                                              onChange={async (
                                                ...eventArgs: any
                                              ) => {
                                                ((...eventArgs) => {
                                                  generateStateOnChangeProp(
                                                    $state,
                                                    ["txtCardId", "value"]
                                                  )(
                                                    (e =>
                                                      e.target?.value).apply(
                                                      null,
                                                      eventArgs
                                                    )
                                                  );
                                                }).apply(null, eventArgs);

                                                if (
                                                  eventArgs.length > 1 &&
                                                  eventArgs[1] &&
                                                  eventArgs[1]
                                                    ._plasmic_state_init_
                                                ) {
                                                  return;
                                                }

                                                (async event => {
                                                  const $steps = {};

                                                  $steps["runCode"] = true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          customFunction:
                                                            async () => {
                                                              return (() => {
                                                                return ($state.cardInquiry =
                                                                  {});
                                                              })();
                                                            }
                                                        };
                                                        return (({
                                                          customFunction
                                                        }) => {
                                                          return customFunction();
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                  if (
                                                    $steps["runCode"] != null &&
                                                    typeof $steps["runCode"] ===
                                                      "object" &&
                                                    typeof $steps["runCode"]
                                                      .then === "function"
                                                  ) {
                                                    $steps["runCode"] =
                                                      await $steps["runCode"];
                                                  }
                                                }).apply(null, eventArgs);
                                              }}
                                              placeholder={
                                                hasVariant(
                                                  globalVariants,
                                                  "screen",
                                                  "mobileOnly"
                                                )
                                                  ? "\u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a"
                                                  : "\u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f"
                                              }
                                              type={
                                                hasVariant(
                                                  globalVariants,
                                                  "screen",
                                                  "mobileOnly"
                                                )
                                                  ? "number"
                                                  : undefined
                                              }
                                              value={
                                                generateStateValueProp($state, [
                                                  "txtCardId",
                                                  "value"
                                                ]) ?? ""
                                              }
                                            />
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__u34Ms
                                            )}
                                          >
                                            {(() => {
                                              try {
                                                return !(
                                                  $state.cardInquiry &&
                                                  $state.cardInquiry.IBAN &&
                                                  $state.cardInquiry.IBAN
                                                    .length > 0
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return true;
                                                }
                                                throw e;
                                              }
                                            })() ? (
                                              <Button2
                                                children2={
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__k2T0O
                                                    )}
                                                  >
                                                    {
                                                      "\u0627\u0633\u062a\u0639\u0644\u0627\u0645"
                                                    }
                                                  </div>
                                                }
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.button__i80T
                                                )}
                                                color={"green"}
                                                onClick={async event => {
                                                  const $steps = {};

                                                  $steps["runCode"] = true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          customFunction:
                                                            async () => {
                                                              return (() => {
                                                                $state.waitingAccount =
                                                                  true;
                                                                return ($state.cardInquiry =
                                                                  {});
                                                              })();
                                                            }
                                                        };
                                                        return (({
                                                          customFunction
                                                        }) => {
                                                          return customFunction();
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                  if (
                                                    $steps["runCode"] != null &&
                                                    typeof $steps["runCode"] ===
                                                      "object" &&
                                                    typeof $steps["runCode"]
                                                      .then === "function"
                                                  ) {
                                                    $steps["runCode"] =
                                                      await $steps["runCode"];
                                                  }

                                                  $steps["getCardInquiry"] =
                                                    true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            args: [
                                                              undefined,
                                                              (() => {
                                                                try {
                                                                  return (
                                                                    "https://api.paziresh24.com/V1/doctor/payments/iban-inquiry/?card_number=" +
                                                                    $state
                                                                      .txtCardId
                                                                      .value
                                                                  );
                                                                } catch (e) {
                                                                  if (
                                                                    e instanceof
                                                                      TypeError ||
                                                                    e?.plasmicType ===
                                                                      "PlasmicUndefinedDataError"
                                                                  ) {
                                                                    return undefined;
                                                                  }
                                                                  throw e;
                                                                }
                                                              })()
                                                            ]
                                                          };
                                                          return $globalActions[
                                                            "Fragment.apiRequest"
                                                          ]?.apply(null, [
                                                            ...actionArgs.args
                                                          ]);
                                                        })()
                                                      : undefined;
                                                  if (
                                                    $steps["getCardInquiry"] !=
                                                      null &&
                                                    typeof $steps[
                                                      "getCardInquiry"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "getCardInquiry"
                                                    ].then === "function"
                                                  ) {
                                                    $steps["getCardInquiry"] =
                                                      await $steps[
                                                        "getCardInquiry"
                                                      ];
                                                  }

                                                  $steps["updateCardInquiry"] =
                                                    $steps.getCardInquiry
                                                      .status == 200
                                                      ? (() => {
                                                          const actionArgs = {
                                                            variable: {
                                                              objRoot: $state,
                                                              variablePath: [
                                                                "cardInquiry"
                                                              ]
                                                            },
                                                            operation: 0,
                                                            value:
                                                              $steps
                                                                .getCardInquiry
                                                                .data
                                                          };
                                                          return (({
                                                            variable,
                                                            value,
                                                            startIndex,
                                                            deleteCount
                                                          }) => {
                                                            if (!variable) {
                                                              return;
                                                            }
                                                            const {
                                                              objRoot,
                                                              variablePath
                                                            } = variable;

                                                            $stateSet(
                                                              objRoot,
                                                              variablePath,
                                                              value
                                                            );
                                                            return value;
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                  if (
                                                    $steps[
                                                      "updateCardInquiry"
                                                    ] != null &&
                                                    typeof $steps[
                                                      "updateCardInquiry"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "updateCardInquiry"
                                                    ].then === "function"
                                                  ) {
                                                    $steps[
                                                      "updateCardInquiry"
                                                    ] = await $steps[
                                                      "updateCardInquiry"
                                                    ];
                                                  }

                                                  $steps["invokeGlobalAction"] =
                                                    $steps.getCardInquiry
                                                      .status != 200
                                                      ? (() => {
                                                          const actionArgs = {
                                                            args: [
                                                              "error",
                                                              (() => {
                                                                try {
                                                                  return "خطا در عملیات استعلام. لطفا شماره کارت را بررسی کرده و مجددا تلاش نمایید";
                                                                } catch (e) {
                                                                  if (
                                                                    e instanceof
                                                                      TypeError ||
                                                                    e?.plasmicType ===
                                                                      "PlasmicUndefinedDataError"
                                                                  ) {
                                                                    return undefined;
                                                                  }
                                                                  throw e;
                                                                }
                                                              })()
                                                            ]
                                                          };
                                                          return $globalActions[
                                                            "Fragment.showToast"
                                                          ]?.apply(null, [
                                                            ...actionArgs.args
                                                          ]);
                                                        })()
                                                      : undefined;
                                                  if (
                                                    $steps[
                                                      "invokeGlobalAction"
                                                    ] != null &&
                                                    typeof $steps[
                                                      "invokeGlobalAction"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "invokeGlobalAction"
                                                    ].then === "function"
                                                  ) {
                                                    $steps[
                                                      "invokeGlobalAction"
                                                    ] = await $steps[
                                                      "invokeGlobalAction"
                                                    ];
                                                  }

                                                  $steps["runCode2"] = true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          customFunction:
                                                            async () => {
                                                              return ($state.waitingAccount =
                                                                false);
                                                            }
                                                        };
                                                        return (({
                                                          customFunction
                                                        }) => {
                                                          return customFunction();
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                  if (
                                                    $steps["runCode2"] !=
                                                      null &&
                                                    typeof $steps[
                                                      "runCode2"
                                                    ] === "object" &&
                                                    typeof $steps["runCode2"]
                                                      .then === "function"
                                                  ) {
                                                    $steps["runCode2"] =
                                                      await $steps["runCode2"];
                                                  }
                                                }}
                                                size={"compact"}
                                              />
                                            ) : null}
                                          </div>
                                        </div>
                                        {(() => {
                                          try {
                                            return (
                                              $state.cardInquiry &&
                                              $state.cardInquiry.IBAN &&
                                              $state.cardInquiry.IBAN.length > 0
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return true;
                                            }
                                            throw e;
                                          }
                                        })() ? (
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox___1WXy8
                                            )}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__d7Oa
                                              )}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__xeWse
                                                )}
                                              >
                                                {
                                                  "\u0646\u0627\u0645 \u0635\u0627\u062d\u0628 \u062d\u0633\u0627\u0628:"
                                                }
                                              </div>
                                            </div>
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__qcRj
                                              )}
                                            >
                                              <TextInput
                                                data-plasmic-name={
                                                  "txtCardOwner"
                                                }
                                                data-plasmic-override={
                                                  overrides.txtCardOwner
                                                }
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.txtCardOwner
                                                )}
                                                isDisabled={true}
                                                onChange={async (
                                                  ...eventArgs: any
                                                ) => {
                                                  ((...eventArgs) => {
                                                    generateStateOnChangeProp(
                                                      $state,
                                                      ["txtCardOwner", "value"]
                                                    )(
                                                      (e =>
                                                        e.target?.value).apply(
                                                        null,
                                                        eventArgs
                                                      )
                                                    );
                                                  }).apply(null, eventArgs);

                                                  if (
                                                    eventArgs.length > 1 &&
                                                    eventArgs[1] &&
                                                    eventArgs[1]
                                                      ._plasmic_state_init_
                                                  ) {
                                                    return;
                                                  }
                                                }}
                                                placeholder={``}
                                                value={
                                                  generateStateValueProp(
                                                    $state,
                                                    ["txtCardOwner", "value"]
                                                  ) ?? ""
                                                }
                                              />
                                            </div>
                                          </div>
                                        ) : null}
                                        {(() => {
                                          try {
                                            return (
                                              $state.cardInquiry &&
                                              $state.cardInquiry.IBAN &&
                                              $state.cardInquiry.IBAN.length > 0
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return true;
                                            }
                                            throw e;
                                          }
                                        })() ? (
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__hyJej
                                            )}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox___9HWsb
                                              )}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__loGkD
                                                )}
                                              >
                                                {
                                                  "\u0634\u0645\u0627\u0631\u0647 \u0634\u0628\u0627:"
                                                }
                                              </div>
                                            </div>
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__v0Jgd
                                              )}
                                            >
                                              <TextInput
                                                data-plasmic-name={
                                                  "txtCardIban"
                                                }
                                                data-plasmic-override={
                                                  overrides.txtCardIban
                                                }
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.txtCardIban
                                                )}
                                                isDisabled={true}
                                                onChange={async (
                                                  ...eventArgs: any
                                                ) => {
                                                  ((...eventArgs) => {
                                                    generateStateOnChangeProp(
                                                      $state,
                                                      ["txtCardIban", "value"]
                                                    )(
                                                      (e =>
                                                        e.target?.value).apply(
                                                        null,
                                                        eventArgs
                                                      )
                                                    );
                                                  }).apply(null, eventArgs);

                                                  if (
                                                    eventArgs.length > 1 &&
                                                    eventArgs[1] &&
                                                    eventArgs[1]
                                                      ._plasmic_state_init_
                                                  ) {
                                                    return;
                                                  }
                                                }}
                                                placeholder={``}
                                                value={
                                                  generateStateValueProp(
                                                    $state,
                                                    ["txtCardIban", "value"]
                                                  ) ?? ""
                                                }
                                              />
                                            </div>
                                          </div>
                                        ) : null}
                                        {(() => {
                                          try {
                                            return (
                                              $state.cardInquiry &&
                                              $state.cardInquiry.IBAN &&
                                              $state.cardInquiry.IBAN.length > 0
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return true;
                                            }
                                            throw e;
                                          }
                                        })() ? (
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__bR1To
                                            )}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__vJk8H
                                              )}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__j6Dgj
                                                )}
                                              >
                                                {"\u0628\u0627\u0646\u06a9:"}
                                              </div>
                                            </div>
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__lYcw
                                              )}
                                            >
                                              <TextInput
                                                data-plasmic-name={
                                                  "txtCardBankName"
                                                }
                                                data-plasmic-override={
                                                  overrides.txtCardBankName
                                                }
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.txtCardBankName
                                                )}
                                                isDisabled={true}
                                                onChange={async (
                                                  ...eventArgs: any
                                                ) => {
                                                  ((...eventArgs) => {
                                                    generateStateOnChangeProp(
                                                      $state,
                                                      [
                                                        "txtCardBankName",
                                                        "value"
                                                      ]
                                                    )(
                                                      (e =>
                                                        e.target?.value).apply(
                                                        null,
                                                        eventArgs
                                                      )
                                                    );
                                                  }).apply(null, eventArgs);

                                                  if (
                                                    eventArgs.length > 1 &&
                                                    eventArgs[1] &&
                                                    eventArgs[1]
                                                      ._plasmic_state_init_
                                                  ) {
                                                    return;
                                                  }
                                                }}
                                                placeholder={``}
                                                value={
                                                  generateStateValueProp(
                                                    $state,
                                                    ["txtCardBankName", "value"]
                                                  ) ?? ""
                                                }
                                              />
                                            </div>
                                          </div>
                                        ) : null}
                                        {(() => {
                                          try {
                                            return (
                                              $state.cardInquiry &&
                                              $state.cardInquiry.IBAN &&
                                              $state.cardInquiry.IBAN.length > 0
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return true;
                                            }
                                            throw e;
                                          }
                                        })() ? (
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__iZivb
                                            )}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__ks2Tm
                                              )}
                                            >
                                              <Button2
                                                children2={
                                                  "\u062b\u0628\u062a \u062d\u0633\u0627\u0628"
                                                }
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.button___2Zki
                                                )}
                                                onClick={async event => {
                                                  const $steps = {};

                                                  $steps["runCode"] = true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          customFunction:
                                                            async () => {
                                                              return ($state.waitingAccount =
                                                                true);
                                                            }
                                                        };
                                                        return (({
                                                          customFunction
                                                        }) => {
                                                          return customFunction();
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                  if (
                                                    $steps["runCode"] != null &&
                                                    typeof $steps["runCode"] ===
                                                      "object" &&
                                                    typeof $steps["runCode"]
                                                      .then === "function"
                                                  ) {
                                                    $steps["runCode"] =
                                                      await $steps["runCode"];
                                                  }

                                                  $steps["registerAccount"] =
                                                    true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            args: [
                                                              "POST",
                                                              (() => {
                                                                try {
                                                                  return "https://apigw.paziresh24.com/ganjname/v1/useraccountbycardid";
                                                                } catch (e) {
                                                                  if (
                                                                    e instanceof
                                                                      TypeError ||
                                                                    e?.plasmicType ===
                                                                      "PlasmicUndefinedDataError"
                                                                  ) {
                                                                    return undefined;
                                                                  }
                                                                  throw e;
                                                                }
                                                              })(),
                                                              undefined,
                                                              (() => {
                                                                try {
                                                                  return {
                                                                    cardid:
                                                                      $state
                                                                        .txtCardId
                                                                        .value
                                                                  };
                                                                } catch (e) {
                                                                  if (
                                                                    e instanceof
                                                                      TypeError ||
                                                                    e?.plasmicType ===
                                                                      "PlasmicUndefinedDataError"
                                                                  ) {
                                                                    return [];
                                                                  }
                                                                  throw e;
                                                                }
                                                              })()
                                                            ]
                                                          };
                                                          return $globalActions[
                                                            "Fragment.apiRequest"
                                                          ]?.apply(null, [
                                                            ...actionArgs.args
                                                          ]);
                                                        })()
                                                      : undefined;
                                                  if (
                                                    $steps["registerAccount"] !=
                                                      null &&
                                                    typeof $steps[
                                                      "registerAccount"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "registerAccount"
                                                    ].then === "function"
                                                  ) {
                                                    $steps["registerAccount"] =
                                                      await $steps[
                                                        "registerAccount"
                                                      ];
                                                  }

                                                  $steps[
                                                    "updateInsertAccountErrorText"
                                                  ] =
                                                    $steps.registerAccount
                                                      .status != 200
                                                      ? (() => {
                                                          const actionArgs = {
                                                            variable: {
                                                              objRoot: $state,
                                                              variablePath: [
                                                                "insertAccountErrorText"
                                                              ]
                                                            },
                                                            operation: 0,
                                                            value:
                                                              $steps
                                                                .registerAccount
                                                                .data.message
                                                          };
                                                          return (({
                                                            variable,
                                                            value,
                                                            startIndex,
                                                            deleteCount
                                                          }) => {
                                                            if (!variable) {
                                                              return;
                                                            }
                                                            const {
                                                              objRoot,
                                                              variablePath
                                                            } = variable;

                                                            $stateSet(
                                                              objRoot,
                                                              variablePath,
                                                              value
                                                            );
                                                            return value;
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                  if (
                                                    $steps[
                                                      "updateInsertAccountErrorText"
                                                    ] != null &&
                                                    typeof $steps[
                                                      "updateInsertAccountErrorText"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "updateInsertAccountErrorText"
                                                    ].then === "function"
                                                  ) {
                                                    $steps[
                                                      "updateInsertAccountErrorText"
                                                    ] = await $steps[
                                                      "updateInsertAccountErrorText"
                                                    ];
                                                  }

                                                  $steps["errorAlert"] =
                                                    $steps.registerAccount
                                                      .status != 200
                                                      ? (() => {
                                                          const actionArgs = {
                                                            args: [
                                                              "error",
                                                              (() => {
                                                                try {
                                                                  return (
                                                                    "خطا در ثبت اطلاعات حساب" +
                                                                    ": " +
                                                                    $state.insertAccountErrorText
                                                                  ).replaceAll(
                                                                    "undefined",
                                                                    ""
                                                                  );
                                                                } catch (e) {
                                                                  if (
                                                                    e instanceof
                                                                      TypeError ||
                                                                    e?.plasmicType ===
                                                                      "PlasmicUndefinedDataError"
                                                                  ) {
                                                                    return undefined;
                                                                  }
                                                                  throw e;
                                                                }
                                                              })()
                                                            ]
                                                          };
                                                          return $globalActions[
                                                            "Fragment.showToast"
                                                          ]?.apply(null, [
                                                            ...actionArgs.args
                                                          ]);
                                                        })()
                                                      : undefined;
                                                  if (
                                                    $steps["errorAlert"] !=
                                                      null &&
                                                    typeof $steps[
                                                      "errorAlert"
                                                    ] === "object" &&
                                                    typeof $steps["errorAlert"]
                                                      .then === "function"
                                                  ) {
                                                    $steps["errorAlert"] =
                                                      await $steps[
                                                        "errorAlert"
                                                      ];
                                                  }

                                                  $steps["successAlert"] =
                                                    $steps.registerAccount
                                                      .status == 200
                                                      ? (() => {
                                                          const actionArgs = {
                                                            args: [
                                                              undefined,
                                                              (() => {
                                                                try {
                                                                  return "اطلاعات حساب با موفقیت ثبت گردید";
                                                                } catch (e) {
                                                                  if (
                                                                    e instanceof
                                                                      TypeError ||
                                                                    e?.plasmicType ===
                                                                      "PlasmicUndefinedDataError"
                                                                  ) {
                                                                    return undefined;
                                                                  }
                                                                  throw e;
                                                                }
                                                              })()
                                                            ]
                                                          };
                                                          return $globalActions[
                                                            "Fragment.showToast"
                                                          ]?.apply(null, [
                                                            ...actionArgs.args
                                                          ]);
                                                        })()
                                                      : undefined;
                                                  if (
                                                    $steps["successAlert"] !=
                                                      null &&
                                                    typeof $steps[
                                                      "successAlert"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "successAlert"
                                                    ].then === "function"
                                                  ) {
                                                    $steps["successAlert"] =
                                                      await $steps[
                                                        "successAlert"
                                                      ];
                                                  }

                                                  $steps["getUserAccounts"] =
                                                    true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            args: [
                                                              undefined,
                                                              "https://apigw.paziresh24.com/ganjname/v1/useraccounts"
                                                            ]
                                                          };
                                                          return $globalActions[
                                                            "Fragment.apiRequest"
                                                          ]?.apply(null, [
                                                            ...actionArgs.args
                                                          ]);
                                                        })()
                                                      : undefined;
                                                  if (
                                                    $steps["getUserAccounts"] !=
                                                      null &&
                                                    typeof $steps[
                                                      "getUserAccounts"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "getUserAccounts"
                                                    ].then === "function"
                                                  ) {
                                                    $steps["getUserAccounts"] =
                                                      await $steps[
                                                        "getUserAccounts"
                                                      ];
                                                  }

                                                  $steps[
                                                    "updateBankAccountList"
                                                  ] =
                                                    $steps.getUserAccounts
                                                      .status == 200
                                                      ? (() => {
                                                          const actionArgs = {
                                                            variable: {
                                                              objRoot: $state,
                                                              variablePath: [
                                                                "bankAccountList"
                                                              ]
                                                            },
                                                            operation: 0,
                                                            value:
                                                              $steps
                                                                .getUserAccounts
                                                                .data.data
                                                          };
                                                          return (({
                                                            variable,
                                                            value,
                                                            startIndex,
                                                            deleteCount
                                                          }) => {
                                                            if (!variable) {
                                                              return;
                                                            }
                                                            const {
                                                              objRoot,
                                                              variablePath
                                                            } = variable;

                                                            $stateSet(
                                                              objRoot,
                                                              variablePath,
                                                              value
                                                            );
                                                            return value;
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                  if (
                                                    $steps[
                                                      "updateBankAccountList"
                                                    ] != null &&
                                                    typeof $steps[
                                                      "updateBankAccountList"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "updateBankAccountList"
                                                    ].then === "function"
                                                  ) {
                                                    $steps[
                                                      "updateBankAccountList"
                                                    ] = await $steps[
                                                      "updateBankAccountList"
                                                    ];
                                                  }

                                                  $steps["hideWaitingAccount"] =
                                                    true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            variable: {
                                                              objRoot: $state,
                                                              variablePath: [
                                                                "waitingAccount"
                                                              ]
                                                            },
                                                            operation: 0,
                                                            value: false
                                                          };
                                                          return (({
                                                            variable,
                                                            value,
                                                            startIndex,
                                                            deleteCount
                                                          }) => {
                                                            if (!variable) {
                                                              return;
                                                            }
                                                            const {
                                                              objRoot,
                                                              variablePath
                                                            } = variable;

                                                            $stateSet(
                                                              objRoot,
                                                              variablePath,
                                                              value
                                                            );
                                                            return value;
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                  if (
                                                    $steps[
                                                      "hideWaitingAccount"
                                                    ] != null &&
                                                    typeof $steps[
                                                      "hideWaitingAccount"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "hideWaitingAccount"
                                                    ].then === "function"
                                                  ) {
                                                    $steps[
                                                      "hideWaitingAccount"
                                                    ] = await $steps[
                                                      "hideWaitingAccount"
                                                    ];
                                                  }

                                                  $steps["runCode2"] =
                                                    $steps.registerAccount
                                                      .status == 200
                                                      ? (() => {
                                                          const actionArgs = {
                                                            customFunction:
                                                              async () => {
                                                                return (() => {
                                                                  $state.dialogRegisterAccount.open =
                                                                    false;
                                                                  return ($state.cardInquiry =
                                                                    {});
                                                                })();
                                                              }
                                                          };
                                                          return (({
                                                            customFunction
                                                          }) => {
                                                            return customFunction();
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                  if (
                                                    $steps["runCode2"] !=
                                                      null &&
                                                    typeof $steps[
                                                      "runCode2"
                                                    ] === "object" &&
                                                    typeof $steps["runCode2"]
                                                      .then === "function"
                                                  ) {
                                                    $steps["runCode2"] =
                                                      await $steps["runCode2"];
                                                  }
                                                }}
                                              />
                                            </div>
                                          </div>
                                        ) : null}
                                      </React.Fragment>
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.dialogRegisterAccount
                                    )}
                                    onOpenChange={async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "dialogRegisterAccount",
                                        "open"
                                      ]).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    }}
                                    open={generateStateValueProp($state, [
                                      "dialogRegisterAccount",
                                      "open"
                                    ])}
                                    title={
                                      <React.Fragment>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__bD9E
                                          )}
                                        >
                                          {
                                            "\u062b\u0628\u062a \u062d\u0633\u0627\u0628"
                                          }
                                        </div>
                                        {(() => {
                                          try {
                                            return $state.waitingAccount;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return true;
                                            }
                                            throw e;
                                          }
                                        })() ? (
                                          <Icon2Icon
                                            className={classNames(
                                              projectcss.all,
                                              sty.svg__jGyD
                                            )}
                                            role={"img"}
                                          />
                                        ) : null}
                                      </React.Fragment>
                                    }
                                    trigger={
                                      <Button2
                                        children2={
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text___3P0Tt
                                            )}
                                          >
                                            {
                                              "\u062d\u0633\u0627\u0628 \u062c\u062f\u06cc\u062f"
                                            }
                                          </div>
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.button__q2Xbb
                                        )}
                                        color={"blue"}
                                        size={"minimal"}
                                      />
                                    }
                                  />
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___0J2IS
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__s5MKb
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__hRemA
                                    )}
                                  >
                                    {(() => {
                                      try {
                                        return (
                                          $state.bankAccountList.length > 0
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return true;
                                        }
                                        throw e;
                                      }
                                    })() ? (
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__yN2Xi
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return $state
                                                .bankAccountList[0] != undefined
                                                ? $state.bankAccountList[0]
                                                    .name +
                                                    " - " +
                                                    ($state.bankAccountList[0]
                                                      .cardid
                                                      ? $state
                                                          .bankAccountList[0]
                                                          .cardid
                                                      : $state
                                                          .bankAccountList[0]
                                                          .iban)
                                                : "";
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    ) : null}
                                    {(() => {
                                      try {
                                        return (
                                          $state.bankAccountList.length > 0
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return true;
                                        }
                                        throw e;
                                      }
                                    })() ? (
                                      <Button2
                                        children2={
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__wu0Yc
                                            )}
                                          >
                                            {
                                              "\u0645\u062f\u06cc\u0631\u06cc\u062a \u062d\u0633\u0627\u0628"
                                            }
                                          </div>
                                        }
                                        className={classNames(
                                          "__wab_instance",
                                          sty.button__y0Pj8
                                        )}
                                        color={"softBlue"}
                                        onClick={async event => {
                                          const $steps = {};

                                          $steps["invokeGlobalAction"] = true
                                            ? (() => {
                                                const actionArgs = {
                                                  args: [
                                                    "https://www.paziresh24.com/dashboard/apps/katibe/setting/"
                                                  ]
                                                };
                                                return $globalActions[
                                                  "Hamdast.openLink"
                                                ]?.apply(null, [
                                                  ...actionArgs.args
                                                ]);
                                              })()
                                            : undefined;
                                          if (
                                            $steps["invokeGlobalAction"] !=
                                              null &&
                                            typeof $steps[
                                              "invokeGlobalAction"
                                            ] === "object" &&
                                            typeof $steps["invokeGlobalAction"]
                                              .then === "function"
                                          ) {
                                            $steps["invokeGlobalAction"] =
                                              await $steps[
                                                "invokeGlobalAction"
                                              ];
                                          }
                                        }}
                                        size={"minimal"}
                                      />
                                    ) : null}
                                  </div>
                                </div>
                                {(() => {
                                  try {
                                    return $state.bankAccountList.length == 0;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <TextInput
                                    data-plasmic-name={"txtCardNumber"}
                                    data-plasmic-override={
                                      overrides.txtCardNumber
                                    }
                                    autoFocus={true}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.txtCardNumber
                                    )}
                                    onChange={async (...eventArgs: any) => {
                                      ((...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "txtCardNumber",
                                          "value"
                                        ])(
                                          (e => e.target?.value).apply(
                                            null,
                                            eventArgs
                                          )
                                        );
                                      }).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    }}
                                    placeholder={
                                      "\u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f (\u063a\u06cc\u0631 \u0627\u0632 \u0628\u0644\u0648 \u0628\u0627\u0646\u06a9)"
                                    }
                                    value={
                                      generateStateValueProp($state, [
                                        "txtCardNumber",
                                        "value"
                                      ]) ?? ""
                                    }
                                  />
                                ) : null}
                              </div>
                            </div>
                          ) : null}
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__tKosu
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__uiHf2
                              )}
                            >
                              {(() => {
                                try {
                                  return (
                                    $state.txtCardNumber.value.length != 16 &&
                                    $state.txtCardNumber.value.length > 0
                                  );
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__xfGwz
                                  )}
                                >
                                  {
                                    "\u0644\u0637\u0641\u0627 \u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a \u0631\u0627 \u0628\u0647\u200c\u0635\u0648\u0631\u062a \u0635\u062d\u06cc\u062d \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."
                                  }
                                </div>
                              ) : null}
                              {(() => {
                                try {
                                  return $state.btnRegisterSettlementShow;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <Button2
                                  children2={
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__w6Eu
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return (
                                              new Intl.NumberFormat(
                                                "fa-IR"
                                              ).format(
                                                $state.txtSettlemenAmount.value
                                              ) +
                                              " ریال" +
                                              " - ثبت درخواست"
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "\u062b\u0628\u062a \u062f\u0631\u062e\u0648\u0627\u0633\u062a";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  }
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button__xokEq
                                  )}
                                  isDisabled={(() => {
                                    try {
                                      return (
                                        $state.waitingSettlement ||
                                        !$state.settlementActive ||
                                        ($state.bankAccountList.length == 0 &&
                                          $state.txtCardNumber.value.length !=
                                            16)
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["updateWaitingSettlement3"] =
                                      $state.requestSettlementState ==
                                      "register-bank-account"
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: [
                                                  "waitingSettlement"
                                                ]
                                              },
                                              operation: 0,
                                              value: true
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["updateWaitingSettlement3"] !=
                                        null &&
                                      typeof $steps[
                                        "updateWaitingSettlement3"
                                      ] === "object" &&
                                      typeof $steps["updateWaitingSettlement3"]
                                        .then === "function"
                                    ) {
                                      $steps["updateWaitingSettlement3"] =
                                        await $steps[
                                          "updateWaitingSettlement3"
                                        ];
                                    }

                                    $steps["registerCardNumber"] =
                                      $state.requestSettlementState ==
                                      "register-bank-account"
                                        ? (() => {
                                            const actionArgs = {
                                              args: [
                                                "POST",
                                                "https://apigw.paziresh24.com/financialaccount/v1/useraccount",
                                                undefined,
                                                (() => {
                                                  try {
                                                    return {
                                                      cardid:
                                                        $state.txtCardNumber
                                                          .value,
                                                      centerid:
                                                        $state.currentAccountType ==
                                                        "centerid"
                                                          ? $state.currentAccountId
                                                          : ""
                                                    };
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return undefined;
                                                    }
                                                    throw e;
                                                  }
                                                })()
                                              ]
                                            };
                                            return $globalActions[
                                              "Fragment.apiRequest"
                                            ]?.apply(null, [
                                              ...actionArgs.args
                                            ]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["registerCardNumber"] != null &&
                                      typeof $steps["registerCardNumber"] ===
                                        "object" &&
                                      typeof $steps["registerCardNumber"]
                                        .then === "function"
                                    ) {
                                      $steps["registerCardNumber"] =
                                        await $steps["registerCardNumber"];
                                    }

                                    $steps["updateWaitingSettlement4"] =
                                      $state.requestSettlementState ==
                                      "register-bank-account"
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: [
                                                  "waitingSettlement"
                                                ]
                                              },
                                              operation: 0,
                                              value: false
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["updateWaitingSettlement4"] !=
                                        null &&
                                      typeof $steps[
                                        "updateWaitingSettlement4"
                                      ] === "object" &&
                                      typeof $steps["updateWaitingSettlement4"]
                                        .then === "function"
                                    ) {
                                      $steps["updateWaitingSettlement4"] =
                                        await $steps[
                                          "updateWaitingSettlement4"
                                        ];
                                    }

                                    $steps["updateRequestSettlementMessage"] =
                                      $state.requestSettlementState ==
                                      "register-bank-account"
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: [
                                                  "requestSettlementMessage"
                                                ]
                                              },
                                              operation: 0,
                                              value:
                                                $steps.registerCardNumber.data
                                                  .message
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps[
                                        "updateRequestSettlementMessage"
                                      ] != null &&
                                      typeof $steps[
                                        "updateRequestSettlementMessage"
                                      ] === "object" &&
                                      typeof $steps[
                                        "updateRequestSettlementMessage"
                                      ].then === "function"
                                    ) {
                                      $steps["updateRequestSettlementMessage"] =
                                        await $steps[
                                          "updateRequestSettlementMessage"
                                        ];
                                    }

                                    $steps["toastSalam"] = false
                                      ? (() => {
                                          const actionArgs = {
                                            args: [undefined, "salam"]
                                          };
                                          return $globalActions[
                                            "Fragment.showToast"
                                          ]?.apply(null, [...actionArgs.args]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["toastSalam"] != null &&
                                      typeof $steps["toastSalam"] ===
                                        "object" &&
                                      typeof $steps["toastSalam"].then ===
                                        "function"
                                    ) {
                                      $steps["toastSalam"] = await $steps[
                                        "toastSalam"
                                      ];
                                    }

                                    $steps["toastError"] =
                                      $state.requestSettlementState ==
                                        "register-bank-account" &&
                                      $steps.registerCardNumber.status != 200
                                        ? (() => {
                                            const actionArgs = {
                                              args: [
                                                "error",
                                                (() => {
                                                  try {
                                                    return $state.requestSettlementMessage;
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return undefined;
                                                    }
                                                    throw e;
                                                  }
                                                })()
                                              ]
                                            };
                                            return $globalActions[
                                              "Fragment.showToast"
                                            ]?.apply(null, [
                                              ...actionArgs.args
                                            ]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["toastError"] != null &&
                                      typeof $steps["toastError"] ===
                                        "object" &&
                                      typeof $steps["toastError"].then ===
                                        "function"
                                    ) {
                                      $steps["toastError"] = await $steps[
                                        "toastError"
                                      ];
                                    }

                                    $steps["getUserAccounts"] =
                                      $state.requestSettlementState ==
                                      "register-bank-account"
                                        ? (() => {
                                            const actionArgs = {
                                              args: [
                                                undefined,
                                                (() => {
                                                  try {
                                                    return (() => {
                                                      if (
                                                        $state.currentAccountType ==
                                                        "centerid"
                                                      )
                                                        return (
                                                          "https://apigw.paziresh24.com/financialaccount/v1/useraccounts?centerid=" +
                                                          $state.currentAccountId
                                                        );
                                                      else
                                                        return "https://apigw.paziresh24.com/financialaccount/v1/useraccounts";
                                                    })();
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return undefined;
                                                    }
                                                    throw e;
                                                  }
                                                })()
                                              ]
                                            };
                                            return $globalActions[
                                              "Fragment.apiRequest"
                                            ]?.apply(null, [
                                              ...actionArgs.args
                                            ]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["getUserAccounts"] != null &&
                                      typeof $steps["getUserAccounts"] ===
                                        "object" &&
                                      typeof $steps["getUserAccounts"].then ===
                                        "function"
                                    ) {
                                      $steps["getUserAccounts"] = await $steps[
                                        "getUserAccounts"
                                      ];
                                    }

                                    $steps["updateBankAccountList"] =
                                      $state.requestSettlementState ==
                                      "register-bank-account"
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: [
                                                  "bankAccountList"
                                                ]
                                              },
                                              operation: 0,
                                              value:
                                                $steps.getUserAccounts.data.data
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["updateBankAccountList"] != null &&
                                      typeof $steps["updateBankAccountList"] ===
                                        "object" &&
                                      typeof $steps["updateBankAccountList"]
                                        .then === "function"
                                    ) {
                                      $steps["updateBankAccountList"] =
                                        await $steps["updateBankAccountList"];
                                    }

                                    $steps["updateRequestSettlementState"] =
                                      $state.requestSettlementState ==
                                        "register-bank-account" &&
                                      $steps.registerCardNumber.status == 200
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: [
                                                  "requestSettlementState"
                                                ]
                                              },
                                              operation: 0,
                                              value: "request-settlement"
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["updateRequestSettlementState"] !=
                                        null &&
                                      typeof $steps[
                                        "updateRequestSettlementState"
                                      ] === "object" &&
                                      typeof $steps[
                                        "updateRequestSettlementState"
                                      ].then === "function"
                                    ) {
                                      $steps["updateRequestSettlementState"] =
                                        await $steps[
                                          "updateRequestSettlementState"
                                        ];
                                    }

                                    $steps["alertSelectAccount"] = false
                                      ? (() => {
                                          const actionArgs = {
                                            args: [
                                              "error",
                                              "\u0644\u0637\u0641\u0627 \u062d\u0633\u0627\u0628 \u0628\u0627\u0646\u06a9\u06cc \u062a\u0639\u0631\u06cc\u0641 \u06a9\u0631\u062f\u0647 \u0648 \u0633\u067e\u0633 \u062f\u0631\u062e\u0648\u0627\u0633\u062a \u062a\u0633\u0648\u06cc\u0647 \u062b\u0628\u062a \u0646\u0645\u0627\u06cc\u06cc\u062f."
                                            ]
                                          };
                                          return $globalActions[
                                            "Fragment.showToast"
                                          ]?.apply(null, [...actionArgs.args]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["alertSelectAccount"] != null &&
                                      typeof $steps["alertSelectAccount"] ===
                                        "object" &&
                                      typeof $steps["alertSelectAccount"]
                                        .then === "function"
                                    ) {
                                      $steps["alertSelectAccount"] =
                                        await $steps["alertSelectAccount"];
                                    }

                                    $steps["updateWaitingSettlement"] =
                                      $state.bankAccountList.length > 0
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: [
                                                  "waitingSettlement"
                                                ]
                                              },
                                              operation: 0,
                                              value: true
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["updateWaitingSettlement"] !=
                                        null &&
                                      typeof $steps[
                                        "updateWaitingSettlement"
                                      ] === "object" &&
                                      typeof $steps["updateWaitingSettlement"]
                                        .then === "function"
                                    ) {
                                      $steps["updateWaitingSettlement"] =
                                        await $steps["updateWaitingSettlement"];
                                    }

                                    $steps["requestSettlement"] =
                                      $state.bankAccountList.length > 0
                                        ? (() => {
                                            const actionArgs = {
                                              args: [
                                                "POST",
                                                (() => {
                                                  try {
                                                    return (
                                                      "https://apigw.paziresh24.com/ganjname/v1/settlement/" +
                                                      $state.settlementService
                                                    );
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return undefined;
                                                    }
                                                    throw e;
                                                  }
                                                })(),
                                                undefined,
                                                (() => {
                                                  try {
                                                    return {
                                                      accountid: parseInt(
                                                        $state
                                                          .bankAccountList[0]
                                                          .accountid
                                                      ),
                                                      amount: parseInt(
                                                        $state
                                                          .txtSettlemenAmount
                                                          .value
                                                      )
                                                    };
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return undefined;
                                                    }
                                                    throw e;
                                                  }
                                                })()
                                              ]
                                            };
                                            return $globalActions[
                                              "Fragment.apiRequest"
                                            ]?.apply(null, [
                                              ...actionArgs.args
                                            ]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["requestSettlement"] != null &&
                                      typeof $steps["requestSettlement"] ===
                                        "object" &&
                                      typeof $steps["requestSettlement"]
                                        .then === "function"
                                    ) {
                                      $steps["requestSettlement"] =
                                        await $steps["requestSettlement"];
                                    }

                                    $steps["setSettlementMeessage"] =
                                      $steps.requestSettlement.data.message !=
                                      undefined
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: [
                                                  "requestSettlementMessage"
                                                ]
                                              },
                                              operation: 0,
                                              value:
                                                $steps.requestSettlement.data
                                                  .message
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["setSettlementMeessage"] != null &&
                                      typeof $steps["setSettlementMeessage"] ===
                                        "object" &&
                                      typeof $steps["setSettlementMeessage"]
                                        .then === "function"
                                    ) {
                                      $steps["setSettlementMeessage"] =
                                        await $steps["setSettlementMeessage"];
                                    }

                                    $steps["alertError"] =
                                      $steps.requestSettlement.status != 200
                                        ? (() => {
                                            const actionArgs = {
                                              args: [
                                                "error",
                                                (() => {
                                                  try {
                                                    return $state.requestSettlementMessage;
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return undefined;
                                                    }
                                                    throw e;
                                                  }
                                                })()
                                              ]
                                            };
                                            return $globalActions[
                                              "Fragment.showToast"
                                            ]?.apply(null, [
                                              ...actionArgs.args
                                            ]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["alertError"] != null &&
                                      typeof $steps["alertError"] ===
                                        "object" &&
                                      typeof $steps["alertError"].then ===
                                        "function"
                                    ) {
                                      $steps["alertError"] = await $steps[
                                        "alertError"
                                      ];
                                    }

                                    $steps["updateWaitingSettlement2"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: [
                                                "waitingSettlement"
                                              ]
                                            },
                                            operation: 0,
                                            value: false
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateWaitingSettlement2"] !=
                                        null &&
                                      typeof $steps[
                                        "updateWaitingSettlement2"
                                      ] === "object" &&
                                      typeof $steps["updateWaitingSettlement2"]
                                        .then === "function"
                                    ) {
                                      $steps["updateWaitingSettlement2"] =
                                        await $steps[
                                          "updateWaitingSettlement2"
                                        ];
                                    }

                                    $steps["runCode"] =
                                      $steps.requestSettlement.status == 200
                                        ? (() => {
                                            const actionArgs = {
                                              customFunction: async () => {
                                                return (() => {
                                                  $state.settlementResultShow =
                                                    true;
                                                  return ($state.btnRegisterSettlementShow =
                                                    false);
                                                })();
                                              }
                                            };
                                            return (({ customFunction }) => {
                                              return customFunction();
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["runCode"] != null &&
                                      typeof $steps["runCode"] === "object" &&
                                      typeof $steps["runCode"].then ===
                                        "function"
                                    ) {
                                      $steps["runCode"] = await $steps[
                                        "runCode"
                                      ];
                                    }

                                    $steps["refresh"] =
                                      $steps.requestSettlement.status == 200
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: [
                                                  "firstRequestCount"
                                                ]
                                              },
                                              operation: 2
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              const oldValue = $stateGet(
                                                objRoot,
                                                variablePath
                                              );
                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                oldValue + 1
                                              );
                                              return oldValue + 1;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["refresh"] != null &&
                                      typeof $steps["refresh"] === "object" &&
                                      typeof $steps["refresh"].then ===
                                        "function"
                                    ) {
                                      $steps["refresh"] = await $steps[
                                        "refresh"
                                      ];
                                    }
                                  }}
                                  size={
                                    hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? "compact"
                                      : undefined
                                  }
                                />
                              ) : null}
                              {(() => {
                                try {
                                  return $state.settlementResultShow;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <div
                                  data-plasmic-name={"txtSettlementResult"}
                                  data-plasmic-override={
                                    overrides.txtSettlementResult
                                  }
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.txtSettlementResult
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $state.requestSettlementMessage;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "\u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0634\u0645\u0627 \u062b\u0628\u062a \u0634\u062f \u0648 \u067e\u0633 \u0627\u0632 \u0627\u0646\u062c\u0627\u0645 \u0686\u0631\u062e\u0647 \u0628\u0627\u0646\u06a9\u06cc\u060c \u0628\u0647 \u062d\u0633\u0627\u0628\u200c\u062a\u0627\u0646 \u0648\u0627\u0631\u06cc\u0632 \u0645\u06cc\u200c\u0634\u0648\u062f.";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              ) : null}
                            </div>
                            {(() => {
                              try {
                                return (
                                  $state.userData.isDoctor &&
                                  $state.recurringSettlement.length == 0
                                );
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__fsk0R
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__qtFsi
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? "\u0628\u0627 \u0641\u0639\u0627\u0644\u200c\u0633\u0627\u0632\u06cc \u0627\u0645\u06a9\u0627\u0646 \u062a\u0633\u0648\u06cc\u0647\u200c\u062d\u0633\u0627\u0628 \u062e\u0648\u062f\u06a9\u0627\u0631\u060c \u0647\u0631 \u0631\u0648\u0632 \u0635\u0628\u062d \u0628\u0647\u200c\u0635\u0648\u0631\u062a \u062e\u0648\u062f\u06a9\u0627\u0631 \u0645\u0648\u062c\u0648\u062f\u06cc \u0634\u0645\u0627 \u0628\u0647 \u062d\u0633\u0627\u0628\u062a\u0627\u0646 \u0648\u0627\u0631\u06cc\u0632 \u062e\u0648\u0627\u0647\u062f \u0634\u062f."
                                    : "\u0628\u0627 \u0641\u0639\u0627\u0644\u200c\u0633\u0627\u0632\u06cc \u0627\u0645\u06a9\u0627\u0646 \u062a\u0633\u0648\u06cc\u0647 \u062d\u0633\u0627\u0628 \u062e\u0648\u062f\u06a9\u0627\u0631\u060c \u0647\u0631 \u0631\u0648\u0632 \u0635\u0628\u062d \u0628\u0647\u200c\u0635\u0648\u0631\u062a \u062e\u0648\u062f\u06a9\u0627\u0631 \u0645\u0648\u062c\u0648\u062f\u06cc  \u0634\u0645\u0627 \u0628\u0647 \u062d\u0633\u0627\u0628 \u0628\u0627\u0646\u06a9\u06cc\u200c\u062a\u0627\u0646 \u0648\u0627\u0631\u06cc\u0632 \u062e\u0648\u0627\u0647\u062f \u0634\u062f!"}
                                </div>
                                <Button2
                                  children2={
                                    "\u0641\u0639\u0627\u0644 \u0633\u0627\u0632\u06cc \u062a\u0633\u0648\u06cc\u0647 \u062d\u0633\u0627\u0628 \u062e\u0648\u062f\u06a9\u0627\u0631"
                                  }
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button__iXuW8
                                  )}
                                  color={"softBlue"}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["invokeGlobalAction"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            args: [
                                              "https://www.paziresh24.com/dashboard/apps/katibe/setting/"
                                            ]
                                          };
                                          return $globalActions[
                                            "Hamdast.openLink"
                                          ]?.apply(null, [...actionArgs.args]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["invokeGlobalAction"] != null &&
                                      typeof $steps["invokeGlobalAction"] ===
                                        "object" &&
                                      typeof $steps["invokeGlobalAction"]
                                        .then === "function"
                                    ) {
                                      $steps["invokeGlobalAction"] =
                                        await $steps["invokeGlobalAction"];
                                    }
                                  }}
                                  size={"compact"}
                                />
                              </div>
                            ) : null}
                          </div>
                          {(() => {
                            try {
                              return $state.settlementMessage.length > 0;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__gad6C
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__uIkZw
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__ii5A3
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $state.settlementMessage;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                            </div>
                          ) : null}
                        </React.Fragment>
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.dialogSettlement
                      )}
                      onOpenChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "dialogSettlement",
                          "open"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      open={generateStateValueProp($state, [
                        "dialogSettlement",
                        "open"
                      ])}
                      title={
                        <React.Fragment>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__oJpQ
                            )}
                          >
                            {
                              "\u062f\u0631\u062e\u0648\u0627\u0633\u062a \u062a\u0633\u0648\u06cc\u0647 \u062d\u0633\u0627\u0628"
                            }
                          </div>
                          {(() => {
                            try {
                              return $state.waitingSettlement;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <Icon2Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__juwXn
                              )}
                              role={"img"}
                            />
                          ) : null}
                        </React.Fragment>
                      }
                      trigger={null}
                    />

                    <Dialog2
                      data-plasmic-name={"dialogTransfer"}
                      data-plasmic-override={overrides.dialogTransfer}
                      body={
                        <TransferToAnotherWallet
                          data-plasmic-name={"transferToAnotherWallet"}
                          data-plasmic-override={
                            overrides.transferToAnotherWallet
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.transferToAnotherWallet
                          )}
                          onTransferCenteridChange={async (
                            ...eventArgs: any
                          ) => {
                            generateStateOnChangeProp($state, [
                              "transferToAnotherWallet",
                              "transferCenterid"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          onTransferedCountChange={async (
                            ...eventArgs: any
                          ) => {
                            generateStateOnChangeProp($state, [
                              "transferToAnotherWallet",
                              "transferedCount"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          transferCenterid={generateStateValueProp($state, [
                            "transferToAnotherWallet",
                            "transferCenterid"
                          ])}
                          transferEvent={async () => {
                            const $steps = {};

                            $steps["closeDialog"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return ($state.dialogTransfer.open =
                                        false);
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["closeDialog"] != null &&
                              typeof $steps["closeDialog"] === "object" &&
                              typeof $steps["closeDialog"].then === "function"
                            ) {
                              $steps["closeDialog"] = await $steps[
                                "closeDialog"
                              ];
                            }

                            $steps["updateFirstRequestCount"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["firstRequestCount"]
                                    },
                                    operation: 2
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    const oldValue = $stateGet(
                                      objRoot,
                                      variablePath
                                    );
                                    $stateSet(
                                      objRoot,
                                      variablePath,
                                      oldValue + 1
                                    );
                                    return oldValue + 1;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateFirstRequestCount"] != null &&
                              typeof $steps["updateFirstRequestCount"] ===
                                "object" &&
                              typeof $steps["updateFirstRequestCount"].then ===
                                "function"
                            ) {
                              $steps["updateFirstRequestCount"] = await $steps[
                                "updateFirstRequestCount"
                              ];
                            }
                          }}
                        />
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.dialogTransfer
                      )}
                      onOpenChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "dialogTransfer",
                          "open"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      open={generateStateValueProp($state, [
                        "dialogTransfer",
                        "open"
                      ])}
                      title={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___690FN
                          )}
                        >
                          {
                            "\u0627\u0646\u062a\u0642\u0627\u0644 \u0648\u062c\u0647 \u0628\u0647 \u06a9\u0627\u0631\u0628\u0631 \u062f\u06cc\u06af\u0631"
                          }
                        </div>
                      }
                      trigger={
                        (() => {
                          try {
                            return (
                              !$ctx.GrowthBook.features[
                                "transfer-to-another-wallet"
                              ].hide &&
                              $state.reminderWallet > 0 &&
                              !$state.waiting &&
                              (($state.currentAccountAccount ==
                                "organization" &&
                                $state.currentAccountType == "centerid") ||
                                ($state.currentAccountAccount == "p24" &&
                                  $state.currentAccountType == "userid"))
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return false;
                            }
                            throw e;
                          }
                        })() ? (
                          <Button2
                            children2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___7Ujb5
                                )}
                              >
                                {
                                  "\u0627\u0646\u062a\u0642\u0627\u0644 \u0648\u062c\u0640\u0640\u0647"
                                }
                              </div>
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.button__tt2JA
                            )}
                            size={"compact"}
                          />
                        ) : null
                      }
                    />
                  </div>
                ) : null}
                {(() => {
                  try {
                    return $state.userData?.isDoctor && !$state.waiting;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___2BtoD)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wQg70
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.bookDate == ""
                                ? "کل درآمد: "
                                : "درآمد امروز: ";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u06a9\u0644 \u062f\u0631\u0622\u0645\u062f: ";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      ) : (
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.transactionsReport?.data?.deposit
                                ? "کل درآمد: " +
                                    ($state.transactionsReport.data.deposit.toLocaleString(
                                      "fa-IR"
                                    ) +
                                      " ریال")
                                : "";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u06a9\u0644 \u062f\u0631\u0622\u0645\u062f:  000\u0631\u06cc\u0627\u0644";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      )}
                    </div>
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : (() => {
                            try {
                              return $state.transactionsReport.data.deposit > 0;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })()
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__aa1Jv
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.transactionsReport?.data?.deposit
                                  ? $state.transactionsReport.data.deposit.toLocaleString(
                                      "fa-IR"
                                    ) + " ریال"
                                  : "0 ریال";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u06a9\u0644 \u062f\u0631\u0622\u0645\u062f:  000\u0631\u06cc\u0627\u0644";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        ) : (
                          <React.Fragment>
                            {(() => {
                              try {
                                return $state.transactionsReport?.data?.deposit
                                  ? ($state.bookDate == ""
                                      ? "کل درآمد: "
                                      : "درآمد امروز: ") +
                                      ($state.transactionsReport.data.deposit.toLocaleString(
                                        "fa-IR"
                                      ) +
                                        " ریال")
                                  : "";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u06a9\u0644 \u062f\u0631\u0622\u0645\u062f:  000\u0631\u06cc\u0627\u0644";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        )}
                      </div>
                    ) : null}
                  </div>
                ) : null}
                {(() => {
                  try {
                    return $state.waiting;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__wkNii)}
                  >
                    <Icon2Icon
                      className={classNames(projectcss.all, sty.svg__dWtdr)}
                      role={"img"}
                    />
                  </div>
                ) : null}
              </div>
              <div
                data-plasmic-name={"gridInvoice13"}
                data-plasmic-override={overrides.gridInvoice13}
                className={classNames(projectcss.all, sty.gridInvoice13)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__wCEa,
                    "grid_calculator"
                  )}
                  id={"grid_calculator"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jgywZ
                    )}
                  >
                    {"\u0631\u062f\u06cc\u0641"}
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__hmBj5,
                    "grid_calculator"
                  )}
                  id={"grid_calculator"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hlRy9
                    )}
                  >
                    {"\u062a\u0627\u0631\u06cc\u062e"}
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__pItef,
                    "grid_calculator"
                  )}
                  id={"grid_calculator"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__mbCvb)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__rnFbu)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__a7Zen
                        )}
                      >
                        {"\u0639\u0646\u0648\u0627\u0646"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__baC4H)}
                    />
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__juTKa,
                    "grid_calculator"
                  )}
                  id={"grid_calculator"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gxD4N
                    )}
                  >
                    {"\u0645\u0628\u0644\u063a "}
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__ti8Db,
                    "grid_calculator"
                  )}
                  id={"grid_calculator"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__yhUa4)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__dHjY2)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__egtYl
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "\u0645\u0627\u0646\u062f\u0647"
                          : "\u0645\u0627\u0646\u062f\u0647"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yvEUs
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "(\u0631\u06cc\u0627\u0644)"
                          : " (\u0631\u06cc\u0627\u0644)"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__yTpnk)}
                    />
                  </div>
                </div>
              </div>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $state.invoicelist;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    data-plasmic-name={"gridInvoice12"}
                    data-plasmic-override={overrides.gridInvoice12}
                    className={classNames(projectcss.all, sty.gridInvoice12)}
                    key={currentIndex}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___79Fi3,
                        "grid_calculator"
                      )}
                      id={"grid_calculator"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__dnCW
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                $state.invoicelist.findIndex(
                                  item =>
                                    item.transactionid ===
                                    $state.invoicelist[currentIndex]
                                      .transactionid
                                ) + 1
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "1";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___9AGe,
                        "grid_calculator"
                      )}
                      id={"grid_calculator"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xt3H4
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                "" +
                                (() => {
                                  const gregorianDate = new Date(
                                    $state.invoicelist[
                                      currentIndex
                                    ].register_date
                                  );
                                  const persianDate = new Intl.DateTimeFormat(
                                    "fa-IR"
                                  ).format(gregorianDate);
                                  return persianDate;
                                })()
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "1403/05/01";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__sDrrB,
                        "grid_calculator"
                      )}
                      id={"grid_calculator"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__oq7Ka
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__vw0BX
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__eRfYh
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $state.invoicelist[currentIndex].title;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u0635\u0648\u0631\u062a \u062d\u0633\u0627\u0628 \u0647\u0632\u06cc\u0646\u0647 \u0646\u0648\u0628\u062a \u062f\u0647\u06cc \u062a\u06cc\u0631 \u0645\u0627\u0647 1403";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__vypev
                          )}
                        >
                          {(() => {
                            try {
                              return (
                                (currentItem.productid == 6 ||
                                  currentItem.title.includes("تسویه")) &&
                                !currentItem.title.includes("بازگشت")
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })()
                            ? (() => {
                                const child$Props = {
                                  body: (
                                    <ApiRequest
                                      data-plasmic-name={
                                        "detailsDataApiRequest"
                                      }
                                      data-plasmic-override={
                                        overrides.detailsDataApiRequest
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.detailsDataApiRequest
                                      )}
                                      errorDisplay={
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__yw4
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return "خطا در دریافت اطلاعات، لطفا دوباره تلاش نمایید.";
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "Error fetching data";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      }
                                      loadingDisplay={
                                        <Icon2Icon
                                          data-plasmic-name={"waitingIcon3"}
                                          data-plasmic-override={
                                            overrides.waitingIcon3
                                          }
                                          className={classNames(
                                            projectcss.all,
                                            sty.waitingIcon3
                                          )}
                                          role={"img"}
                                        />
                                      }
                                      method={"GET"}
                                      onError={async (...eventArgs: any) => {
                                        generateStateOnChangeProp($state, [
                                          "detailsDataApiRequest",
                                          __plasmic_idx_0,
                                          "error"
                                        ]).apply(null, eventArgs);
                                      }}
                                      onLoading={async (...eventArgs: any) => {
                                        generateStateOnChangeProp($state, [
                                          "detailsDataApiRequest",
                                          __plasmic_idx_0,
                                          "loading"
                                        ]).apply(null, eventArgs);
                                      }}
                                      onSuccess={async (...eventArgs: any) => {
                                        generateStateOnChangeProp($state, [
                                          "detailsDataApiRequest",
                                          __plasmic_idx_0,
                                          "data"
                                        ]).apply(null, eventArgs);
                                      }}
                                      ref={ref => {
                                        $refs["detailsDataApiRequest"] = ref;
                                      }}
                                      url={(() => {
                                        try {
                                          return (
                                            "https://apigw.paziresh24.com/katibe/v1/transactions/p24/" +
                                            $state.invoicelist[currentIndex]
                                              .transactionid
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__h3IzX
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox___0Yj7
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__cz8TE
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return $state
                                                    .detailsDataApiRequest[
                                                    currentIndex
                                                  ].data.data.title;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      </div>
                                      {(_par =>
                                        !_par
                                          ? []
                                          : Array.isArray(_par)
                                          ? _par
                                          : [_par])(
                                        (() => {
                                          try {
                                            return $state.detailsDataApiRequest[
                                              currentIndex
                                            ].data.data.services;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return [];
                                            }
                                            throw e;
                                          }
                                        })()
                                      ).map(
                                        (__plasmic_item_1, __plasmic_idx_1) => {
                                          const currentItem = __plasmic_item_1;
                                          const currentIndex = __plasmic_idx_1;
                                          return (
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__ljqV8
                                              )}
                                              dir={"rtl"}
                                              key={currentIndex}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__b7Bz3
                                                )}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__bThOo
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return "جزئیات:";
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "\u062c\u0632\u0626\u06cc\u0627\u062a:";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                              </div>
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__g5Zyu
                                                )}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__pl20H
                                                  )}
                                                  dir={"rtl"}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return (() => {
                                                          return currentItem.count >
                                                            1
                                                            ? currentItem.service +
                                                                " - " +
                                                                new Intl.NumberFormat(
                                                                  "fa-IR"
                                                                ).format(
                                                                  currentItem.count
                                                                ) +
                                                                "عدد"
                                                            : currentItem.service;
                                                        })();
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                              </div>
                                              <Stack__
                                                as={"div"}
                                                hasGap={true}
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__hklwu
                                                )}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text___4ZDte
                                                  )}
                                                >
                                                  {"\u0645\u0628\u0644\u063a:"}
                                                </div>
                                              </Stack__>
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__eiK6X
                                                )}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__txDbl
                                                  )}
                                                >
                                                  <React.Fragment>
                                                    {(() => {
                                                      try {
                                                        return (
                                                          new Intl.NumberFormat(
                                                            "fa-IR"
                                                          ).format(
                                                            currentItem.price *
                                                              currentItem.count
                                                          ) +
                                                          " " +
                                                          "ریال"
                                                        );
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "";
                                                        }
                                                        throw e;
                                                      }
                                                    })()}
                                                  </React.Fragment>
                                                </div>
                                              </div>
                                            </div>
                                          );
                                        }
                                      )}
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__k3Ell
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__kGqd1
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__mzAi
                                            )}
                                          >
                                            {
                                              "\u062a\u0627\u0631\u06cc\u062e \u062b\u0628\u062a:"
                                            }
                                          </div>
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__ni1DC
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__pkPec
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return (
                                                    $state.invoicelist[
                                                      currentIndex
                                                    ].register_time +
                                                    " " +
                                                    new Date(
                                                      $state.invoicelist[
                                                        currentIndex
                                                      ].register_date
                                                    ).toLocaleDateString(
                                                      "fa-IR"
                                                    )
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      </div>
                                      {(() => {
                                        try {
                                          return (
                                            $state.detailsDataApiRequest[
                                              currentIndex
                                            ].data.transaction_type == "book"
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__uL7Ud
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox___4Ddl4
                                            )}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__txu5
                                              )}
                                            >
                                              {
                                                "\u062a\u0627\u0631\u06cc\u062e \u0646\u0648\u0628\u062a:"
                                              }
                                            </div>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox___2B2H5
                                            )}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__kwCg
                                              )}
                                            >
                                              <React.Fragment>
                                                {(() => {
                                                  try {
                                                    return (
                                                      new Date(
                                                        $state
                                                          .detailsDataApiRequest[
                                                          currentIndex
                                                        ].data.data.metadata
                                                          .book_time * 1000
                                                      ).getHours() +
                                                      ":" +
                                                      new Date(
                                                        $state
                                                          .detailsDataApiRequest[
                                                          currentIndex
                                                        ].data.data.metadata
                                                          .book_time * 1000
                                                      ).getMinutes() +
                                                      ":00" +
                                                      " " +
                                                      new Date(
                                                        $state
                                                          .detailsDataApiRequest[
                                                          currentIndex
                                                        ].data.data.metadata
                                                          .book_time * 1000
                                                      ).toLocaleDateString(
                                                        "fa-IR"
                                                      )
                                                    );
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return "";
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                              </React.Fragment>
                                            </div>
                                          </div>
                                        </div>
                                      ) : null}
                                      {(() => {
                                        try {
                                          return (
                                            $state.detailsDataApiRequest[
                                              currentIndex
                                            ].data.transaction_type == "book" &&
                                            $state.detailsDataApiRequest[
                                              currentIndex
                                            ].data.data.fromuserid ==
                                              $state.userData.result.id
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__s68Rn
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__xqvX7
                                            )}
                                          >
                                            <PlasmicLink__
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.a,
                                                sty.link__ht0H0
                                              )}
                                              component={Link}
                                              href={(() => {
                                                try {
                                                  return (
                                                    "https://www.paziresh24.com/receipt/" +
                                                    $state
                                                      .detailsDataApiRequest[
                                                      currentIndex
                                                    ].data.data.metadata
                                                      .center_id +
                                                    "/" +
                                                    $state
                                                      .detailsDataApiRequest[
                                                      currentIndex
                                                    ].data.data.metadata
                                                      .book_id +
                                                    "/"
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                              platform={"nextjs"}
                                              target={"_blank"}
                                            >
                                              <Button2
                                                children2={
                                                  "\u0642\u0628\u0636 \u0646\u0648\u0628\u062a"
                                                }
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.button__ciCdX
                                                )}
                                                color={"softBlue"}
                                                onClick={async event => {
                                                  const $steps = {};

                                                  $steps["updateUser"] = true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          variable: {
                                                            objRoot: $state,
                                                            variablePath: [
                                                              "user"
                                                            ]
                                                          },
                                                          operation: 0
                                                        };
                                                        return (({
                                                          variable,
                                                          value,
                                                          startIndex,
                                                          deleteCount
                                                        }) => {
                                                          if (!variable) {
                                                            return;
                                                          }
                                                          const {
                                                            objRoot,
                                                            variablePath
                                                          } = variable;

                                                          $stateSet(
                                                            objRoot,
                                                            variablePath,
                                                            value
                                                          );
                                                          return value;
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                  if (
                                                    $steps["updateUser"] !=
                                                      null &&
                                                    typeof $steps[
                                                      "updateUser"
                                                    ] === "object" &&
                                                    typeof $steps["updateUser"]
                                                      .then === "function"
                                                  ) {
                                                    $steps["updateUser"] =
                                                      await $steps[
                                                        "updateUser"
                                                      ];
                                                  }
                                                }}
                                                size={"compact"}
                                              />
                                            </PlasmicLink__>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox___6EQl
                                            )}
                                          >
                                            <PlasmicLink__
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.a,
                                                sty.link__oE7Ki
                                              )}
                                              component={Link}
                                              href={(() => {
                                                try {
                                                  return (
                                                    "https://www.paziresh24.com/invoice/" +
                                                    $state
                                                      .detailsDataApiRequest[
                                                      currentIndex
                                                    ].data.data.metadata
                                                      .center_id +
                                                    "/" +
                                                    $state
                                                      .detailsDataApiRequest[
                                                      currentIndex
                                                    ].data.data.metadata
                                                      .book_id +
                                                    "/"
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                              platform={"nextjs"}
                                              target={"_blank"}
                                            >
                                              <Button2
                                                children2={
                                                  "\u0686\u0627\u067e \u0641\u0627\u06a9\u062a\u0648\u0631"
                                                }
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.button___0Pzzd
                                                )}
                                                color={"softBlue"}
                                                size={"compact"}
                                              />
                                            </PlasmicLink__>
                                          </div>
                                        </div>
                                      ) : null}
                                      {(() => {
                                        try {
                                          return (
                                            $state.detailsDataApiRequest[
                                              currentIndex
                                            ].data.transaction_type ==
                                            "settlement"
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__g3Huk
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__munBy
                                            )}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text___2H3Dy
                                              )}
                                            >
                                              {
                                                "\u0634\u0646\u0627\u0633\u0647 \u067e\u06cc\u06af\u06cc\u0631\u06cc:"
                                              }
                                            </div>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__dpCpu
                                            )}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__amr4N
                                              )}
                                            >
                                              <React.Fragment>
                                                {(() => {
                                                  try {
                                                    return (
                                                      $state
                                                        .detailsDataApiRequest[
                                                        currentIndex
                                                      ].data.data
                                                        .referenceNumber || "-"
                                                    );
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return "";
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                              </React.Fragment>
                                            </div>
                                          </div>
                                        </div>
                                      ) : null}
                                      {(() => {
                                        try {
                                          return (
                                            $state.detailsDataApiRequest[
                                              currentIndex
                                            ].data.transaction_type ==
                                            "settlement"
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__tcQ6F
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__m7LLb
                                            )}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text___0W17O
                                              )}
                                            >
                                              {
                                                "\u0634\u0645\u0627\u0631\u0647 \u0634\u0628\u0627:"
                                              }
                                            </div>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__dahuW
                                            )}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__n7Ue0
                                              )}
                                            >
                                              <React.Fragment>
                                                {(() => {
                                                  try {
                                                    return (
                                                      $state
                                                        .detailsDataApiRequest[
                                                        currentIndex
                                                      ].data.data.iban || "-"
                                                    );
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return "";
                                                    }
                                                    throw e;
                                                  }
                                                })()}
                                              </React.Fragment>
                                            </div>
                                          </div>
                                        </div>
                                      ) : null}
                                      {(() => {
                                        try {
                                          return (
                                            $state.detailsDataApiRequest[
                                              currentIndex
                                            ].data.transaction_type ==
                                            "settlement"
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__qnnOv
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__jJr
                                            )}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__kFztQ
                                              )}
                                            >
                                              {
                                                "\u0648\u0636\u0639\u06cc\u062a:"
                                              }
                                            </div>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__fnOgw
                                            )}
                                          >
                                            {(() => {
                                              try {
                                                return (
                                                  $state.detailsDataApiRequest[
                                                    currentIndex
                                                  ].data.data.status == "DONE"
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return true;
                                                }
                                                throw e;
                                              }
                                            })() ? (
                                              <Button2
                                                children2={
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text___9Zmh
                                                    )}
                                                  >
                                                    {
                                                      "\u067e\u0631\u062f\u0627\u062e\u062a \u0634\u062f\u0647"
                                                    }
                                                  </div>
                                                }
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.button___2VZf
                                                )}
                                                color={"softGreen"}
                                                size={"minimal"}
                                              />
                                            ) : null}
                                            {(() => {
                                              try {
                                                return (
                                                  $state.detailsDataApiRequest[
                                                    currentIndex
                                                  ].data.data.status !=
                                                    "DONE" &&
                                                  $state.detailsDataApiRequest[
                                                    currentIndex
                                                  ].data.data.status !=
                                                    "FAILED" &&
                                                  $state.detailsDataApiRequest[
                                                    currentIndex
                                                  ].data.data.status !=
                                                    "REJECTED"
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return true;
                                                }
                                                throw e;
                                              }
                                            })() ? (
                                              <Button2
                                                children2={
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__pIPpq
                                                    )}
                                                  >
                                                    {
                                                      "\u0627\u0631\u0633\u0627\u0644 \u0634\u062f\u0647"
                                                    }
                                                  </div>
                                                }
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.button__d0JsY
                                                )}
                                                color={"softSand"}
                                                size={"minimal"}
                                              />
                                            ) : null}
                                            {(() => {
                                              try {
                                                return (
                                                  $state.detailsDataApiRequest[
                                                    currentIndex
                                                  ].data.data.status ==
                                                    "FAILED" ||
                                                  $state.detailsDataApiRequest[
                                                    currentIndex
                                                  ].data.data.status ==
                                                    "REJECTED"
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return true;
                                                }
                                                throw e;
                                              }
                                            })() ? (
                                              <Button2
                                                children2={
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__oszHz
                                                    )}
                                                  >
                                                    {
                                                      "\u0628\u0631\u06af\u0634\u062a \u062e\u0648\u0631\u062f\u0647"
                                                    }
                                                  </div>
                                                }
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.button___70Kzs
                                                )}
                                                color={"softRed"}
                                                size={"minimal"}
                                              />
                                            ) : null}
                                          </div>
                                        </div>
                                      ) : null}
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__ffrgj
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__cvdzv
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__k4GR
                                            )}
                                          >
                                            {
                                              "\u0642\u0628\u0636 \u0646\u0648\u0628\u062a:"
                                            }
                                          </div>
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__qMemg
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              projectcss.__wab_text,
                                              sty.text__v5YEk
                                            )}
                                          >
                                            <React.Fragment>
                                              {(() => {
                                                try {
                                                  return (
                                                    "https://www.paziresh24.com/receipt/" +
                                                    $state
                                                      .detailsDataApiRequest[
                                                      currentIndex
                                                    ].data.data.metadata
                                                      .center_id +
                                                    "/" +
                                                    $state
                                                      .detailsDataApiRequest[
                                                      currentIndex
                                                    ].data.data.metadata.book_id
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return "";
                                                  }
                                                  throw e;
                                                }
                                              })()}
                                            </React.Fragment>
                                          </div>
                                        </div>
                                      </div>
                                      {(() => {
                                        try {
                                          return $state.detailsDataApiRequest[
                                            currentIndex
                                          ].data.data !== undefined &&
                                            $state.detailsDataApiRequest[
                                              currentIndex
                                            ].data.data.meta !== undefined &&
                                            $state.detailsDataApiRequest[
                                              currentIndex
                                            ].data.data.meta.RefNum !==
                                              undefined
                                            ? true
                                            : false;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__ePzDe
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__fuMq
                                            )}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__rwal
                                              )}
                                            >
                                              {
                                                "\u0634\u0646\u0627\u0633\u0647 \u067e\u0631\u062f\u0627\u062e\u062a:"
                                              }
                                            </div>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__fZvD
                                            )}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__lza2H
                                              )}
                                            >
                                              {hasVariant(
                                                globalVariants,
                                                "screen",
                                                "mobileOnly"
                                              ) ? (
                                                <React.Fragment>
                                                  {(() => {
                                                    try {
                                                      return $state
                                                        .detailsDataApiRequest[
                                                        currentIndex
                                                      ].data.data.meta.RRN;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                </React.Fragment>
                                              ) : (
                                                <React.Fragment>
                                                  {(() => {
                                                    try {
                                                      return $state
                                                        .detailsDataApiRequest[
                                                        currentIndex
                                                      ].data.data.meta.RRN;
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                </React.Fragment>
                                              )}
                                            </div>
                                          </div>
                                        </div>
                                      ) : null}
                                    </ApiRequest>
                                  ),
                                  className: classNames(
                                    "__wab_instance",
                                    sty.dialogNewInvoiceDetails
                                  ),
                                  onOpenChange: async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "dialogNewInvoiceDetails",
                                      __plasmic_idx_0,
                                      "open"
                                    ]).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  },
                                  open: generateStateValueProp($state, [
                                    "dialogNewInvoiceDetails",
                                    __plasmic_idx_0,
                                    "open"
                                  ]),
                                  title: (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__s2Pz
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__dt8V1,
                                          ``
                                        )}
                                        dir={"rtl"}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__sEqkN
                                          )}
                                        >
                                          {
                                            "\u062c\u0632\u0626\u06cc\u0627\u062a \u062a\u0631\u0627\u06a9\u0646\u0634"
                                          }
                                        </div>
                                      </div>
                                    </div>
                                  ),
                                  trigger: (
                                    <Icon47Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__nUmde
                                      )}
                                      role={"img"}
                                    />
                                  )
                                };

                                initializePlasmicStates(
                                  $state,
                                  [
                                    {
                                      name: "dialogNewInvoiceDetails[].open",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) => false
                                    }
                                  ],
                                  [__plasmic_idx_0]
                                );
                                return (
                                  <Dialog
                                    data-plasmic-name={
                                      "dialogNewInvoiceDetails"
                                    }
                                    data-plasmic-override={
                                      overrides.dialogNewInvoiceDetails
                                    }
                                    {...child$Props}
                                  />
                                );
                              })()
                            : null}
                        </div>
                      </div>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___0NIcW,
                        "grid_calculator"
                      )}
                      id={"grid_calculator"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__iZkK
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return new Intl.NumberFormat("fa-IR").format(
                                $state.invoicelist[currentIndex].amount
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0635\u0648\u0631\u062a \u062d\u0633\u0627\u0628 \u0647\u0632\u06cc\u0646\u0647 \u0646\u0648\u0628\u062a \u062f\u0647\u06cc \u062a\u06cc\u0631 \u0645\u0627\u0647 1403";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      {(() => {
                        try {
                          return currentItem.type == "deposit";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <Icon44Icon
                          className={classNames(projectcss.all, sty.svg__miQg)}
                          role={"img"}
                        />
                      ) : null}
                      {(() => {
                        try {
                          return currentItem.type == "withdraw";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <Icon45Icon
                          className={classNames(projectcss.all, sty.svg__dWf9Y)}
                          role={"img"}
                        />
                      ) : null}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox__uNzEt,
                        "grid_calculator"
                      )}
                      id={"grid_calculator"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__uT85B
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return new Intl.NumberFormat("fa-IR").format(
                                $state.invoicelist[currentIndex].balance
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "25.300.000";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                  </div>
                );
              })}
              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? (() => {
                      try {
                        return (
                          (!$state.waiting &&
                            $state.invoicelist.length > 0 &&
                            $state.showMoreBtn) ||
                          $state.waitingLoading
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
                  : (() => {
                      try {
                        return (
                          (!$state.waiting &&
                            $state.invoicelist.length > 0 &&
                            $state.showMoreBtn) ||
                          $state.waitingLoading
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
              ) ? (
                <div
                  data-plasmic-name={"gridNoData2"}
                  data-plasmic-override={overrides.gridNoData2}
                  className={classNames(projectcss.all, sty.gridNoData2)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__pepAw,
                      "grid_calculator"
                    )}
                    id={"grid_calculator"}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? (() => {
                            try {
                              return !$state.waitingLoading;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })()
                        : (() => {
                            try {
                              return !$state.waitingLoading;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })()
                    ) ? (
                      <Button2
                        children2={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vVwD4
                            )}
                          >
                            {
                              "\u0646\u0645\u0627\u06cc\u0634 \u0628\u06cc\u0634\u062a\u0631..."
                            }
                          </div>
                        }
                        className={classNames(
                          "__wab_instance",
                          sty.button__wSsDp
                        )}
                        color={"softBlue"}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateWaitingLoading"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["waitingLoading"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateWaitingLoading"] != null &&
                            typeof $steps["updateWaitingLoading"] ===
                              "object" &&
                            typeof $steps["updateWaitingLoading"].then ===
                              "function"
                          ) {
                            $steps["updateWaitingLoading"] = await $steps[
                              "updateWaitingLoading"
                            ];
                          }

                          $steps["runCode"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return ($state.pageNumber += 1);
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["runCode"] != null &&
                            typeof $steps["runCode"] === "object" &&
                            typeof $steps["runCode"].then === "function"
                          ) {
                            $steps["runCode"] = await $steps["runCode"];
                          }

                          $steps["getInvoiceList"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    undefined,
                                    (() => {
                                      try {
                                        return (() => {
                                          if (
                                            $state.currentAccountType ==
                                            "centerid"
                                          )
                                            return (
                                              "https://apigw.paziresh24.com/katibe/v1/transactions/search/p24?centerid=" +
                                              $state.currentAccountId +
                                              "&limit=" +
                                              $state.limit +
                                              "&page=" +
                                              $state.pageNumber +
                                              "&account=" +
                                              $state.currentAccountAccount
                                            );
                                          else
                                            return (
                                              "https://apigw.paziresh24.com/katibe/v1/transactions/search/p24?productid=0&limit=" +
                                              $state.limit +
                                              "&page=" +
                                              $state.pageNumber +
                                              "&account=" +
                                              $state.currentAccountAccount
                                            );
                                        })();
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["getInvoiceList"] != null &&
                            typeof $steps["getInvoiceList"] === "object" &&
                            typeof $steps["getInvoiceList"].then === "function"
                          ) {
                            $steps["getInvoiceList"] = await $steps[
                              "getInvoiceList"
                            ];
                          }

                          $steps["runCode2"] =
                            $steps.getInvoiceList.status == 200 &&
                            $steps.getInvoiceList.data.status == true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        return ($state.invoicelist = [
                                          ...$state.invoicelist,
                                          ...$steps.getInvoiceList.data.data
                                        ]);
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                          if (
                            $steps["runCode2"] != null &&
                            typeof $steps["runCode2"] === "object" &&
                            typeof $steps["runCode2"].then === "function"
                          ) {
                            $steps["runCode2"] = await $steps["runCode2"];
                          }

                          $steps["updateWaitingLoading2"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["waitingLoading"]
                                  },
                                  operation: 0,
                                  value: false
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateWaitingLoading2"] != null &&
                            typeof $steps["updateWaitingLoading2"] ===
                              "object" &&
                            typeof $steps["updateWaitingLoading2"].then ===
                              "function"
                          ) {
                            $steps["updateWaitingLoading2"] = await $steps[
                              "updateWaitingLoading2"
                            ];
                          }

                          $steps["showMoreBtn"] = true
                            ? (() => {
                                const actionArgs = {
                                  customFunction: async () => {
                                    return (() => {
                                      if (
                                        $steps.getInvoiceList.status != 200 ||
                                        $steps.getInvoiceList.data.data
                                          .length != $state.limit
                                      )
                                        return ($state.showMoreBtn = false);
                                    })();
                                  }
                                };
                                return (({ customFunction }) => {
                                  return customFunction();
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["showMoreBtn"] != null &&
                            typeof $steps["showMoreBtn"] === "object" &&
                            typeof $steps["showMoreBtn"].then === "function"
                          ) {
                            $steps["showMoreBtn"] = await $steps["showMoreBtn"];
                          }
                        }}
                        size={"compact"}
                      />
                    ) : null}
                    {(() => {
                      try {
                        return $state.waitingLoading;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <Icon2Icon
                        className={classNames(projectcss.all, sty.svg__uYAd)}
                        role={"img"}
                      />
                    ) : null}
                  </div>
                </div>
              ) : null}
              {(() => {
                try {
                  return (() => {
                    return $state.invoicelist.length == 0 && !$state.waiting
                      ? true
                      : false;
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  data-plasmic-name={"gridNoData"}
                  data-plasmic-override={overrides.gridNoData}
                  className={classNames(projectcss.all, sty.gridNoData)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__sZh3Z,
                      "grid_calculator"
                    )}
                    id={"grid_calculator"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__x2Zjy
                      )}
                    >
                      {
                        "\u0645\u062d\u062a\u0648\u0627\u06cc\u06cc \u062c\u0647\u062a \u0646\u0645\u0627\u06cc\u0634 \u0648\u062c\u0648\u062f \u0646\u062f\u0627\u0631\u062f"
                      }
                    </div>
                  </div>
                </div>
              ) : null}
            </section>
            {(() => {
              try {
                return $state.userData?.isDoctor;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div className={classNames(projectcss.all, sty.freeBox___9VWgP)}>
                <div className={classNames(projectcss.all, sty.freeBox__cR6Zz)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___6Eou
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                      <React.Fragment>
                        <React.Fragment>
                          {
                            "\u0645\u0645\u06a9\u0646 \u0627\u0633\u062a \u0628\u0631\u062e\u06cc \u0627\u0632 \u062a\u0631\u0627\u06a9\u0646\u0634\u200c\u0647\u0627\u06cc \u0634\u0645\u0627 \u062f\u0631 \u0633\u06cc\u0633\u062a\u0645 \u0645\u0627\u0644\u06cc \u0642\u0628\u0644\u06cc \u062b\u0628\u062a \u0634\u062f\u0647 \u0628\u0627\u0634\u062f. \u062c\u0647\u062a \u0628\u0631\u0631\u0633\u06cc\u060c \u0644\u0637\u0641\u0627\u064b \u0628\u0647 "
                          }
                        </React.Fragment>
                        {
                          <PlasmicLink__
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.link__okEcB
                            )}
                            component={Link}
                            href={""}
                            onClick={async event => {
                              const $steps = {};

                              $steps["invokeGlobalAction"] = true
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "https://dr.paziresh24.com/setting/payment"
                                      ]
                                    };
                                    return $globalActions[
                                      "Hamdast.openLink"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["invokeGlobalAction"] != null &&
                                typeof $steps["invokeGlobalAction"] ===
                                  "object" &&
                                typeof $steps["invokeGlobalAction"].then ===
                                  "function"
                              ) {
                                $steps["invokeGlobalAction"] = await $steps[
                                  "invokeGlobalAction"
                                ];
                              }
                            }}
                            platform={"nextjs"}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "\u0627\u06cc\u0646 \u0635\u0641\u062d\u0647"
                              : "\u0627\u06cc\u0646 \u0635\u0641\u062d\u0647"}
                          </PlasmicLink__>
                        }
                        <React.Fragment>
                          {
                            " \u0645\u0631\u0627\u062c\u0639\u0647 \u06a9\u0646\u06cc\u062f."
                          }
                        </React.Fragment>
                      </React.Fragment>
                    ) : (
                      <React.Fragment>
                        <React.Fragment>
                          {
                            "\u0645\u0645\u06a9\u0646 \u0627\u0633\u062a \u0628\u0631\u062e\u06cc \u0627\u0632 \u062a\u0631\u0627\u06a9\u0646\u0634\u200c\u0647\u0627\u06cc \u0634\u0645\u0627 \u062f\u0631 \u0633\u06cc\u0633\u062a\u0645 \u0645\u0627\u0644\u06cc \u0642\u0628\u0644\u06cc \u062b\u0628\u062a \u0634\u062f\u0647 \u0628\u0627\u0634\u062f. \u062c\u0647\u062a \u0628\u0631\u0631\u0633\u06cc\u060c \u0644\u0637\u0641\u0627\u064b \u0628\u0647 "
                          }
                        </React.Fragment>
                        {
                          <PlasmicLink__
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.link__okEcB
                            )}
                            component={Link}
                            href={""}
                            onClick={async event => {
                              const $steps = {};

                              $steps["invokeGlobalAction"] = true
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "https://dr.paziresh24.com/setting/payment"
                                      ]
                                    };
                                    return $globalActions[
                                      "Hamdast.openLink"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["invokeGlobalAction"] != null &&
                                typeof $steps["invokeGlobalAction"] ===
                                  "object" &&
                                typeof $steps["invokeGlobalAction"].then ===
                                  "function"
                              ) {
                                $steps["invokeGlobalAction"] = await $steps[
                                  "invokeGlobalAction"
                                ];
                              }
                            }}
                            platform={"nextjs"}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "\u0627\u06cc\u0646 \u0635\u0641\u062d\u0647"
                              : "\u0627\u06cc\u0646 \u0635\u0641\u062d\u0647"}
                          </PlasmicLink__>
                        }
                        <React.Fragment>
                          {
                            " \u0645\u0631\u0627\u062c\u0639\u0647 \u06a9\u0646\u06cc\u062f."
                          }
                        </React.Fragment>
                      </React.Fragment>
                    )}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nTaMo
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                      <React.Fragment>
                        <React.Fragment>
                          {
                            "\u062f\u0631\u0635\u0648\u0631\u062a \u0646\u06cc\u0627\u0632 \u0628\u0647 \u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc "
                          }
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {
                            "\u067e\u06cc\u0631\u0627\u0645\u0648\u0646 \u0627\u06cc\u0646 \u0635\u0641\u062d\u0647"
                          }
                        </span>
                        <React.Fragment>
                          {
                            "\u060c \u0628\u0647 \u0622\u06cc\u200c\u062f\u06cc "
                          }
                        </React.Fragment>
                        {
                          <PlasmicLink__
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.link__thlGx
                            )}
                            component={Link}
                            href={""}
                            onClick={async event => {
                              const $steps = {};

                              $steps["openLink"] = true
                                ? (() => {
                                    const actionArgs = {
                                      args: ["https://t.me/hojatkhajavi"]
                                    };
                                    return $globalActions[
                                      "Hamdast.openLink"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["openLink"] != null &&
                                typeof $steps["openLink"] === "object" &&
                                typeof $steps["openLink"].then === "function"
                              ) {
                                $steps["openLink"] = await $steps["openLink"];
                              }
                            }}
                            platform={"nextjs"}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "@hojatkhajavi"
                              : "@hojatkhajavi"}
                          </PlasmicLink__>
                        }
                        <React.Fragment>
                          {
                            " \u062f\u0631 \u062a\u0644\u06af\u0631\u0627\u0645 \u067e\u06cc\u0627\u0645 \u062f\u0647\u06cc\u062f."
                          }
                        </React.Fragment>
                      </React.Fragment>
                    ) : (
                      <React.Fragment>
                        <React.Fragment>
                          {
                            "\u067e\u0632\u0634\u06a9 \u06af\u0631\u0627\u0645\u06cc\u060c \u062a\u0631\u0627\u06a9\u0646\u0634\u200c\u0647\u0627\u06cc \u0645\u0648\u062c\u0648\u062f \u062f\u0631 "
                          }
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {
                            "\u0632\u0645\u0627\u0646 \u0627\u062e\u0630 \u0646\u0648\u0628\u062a"
                          }
                        </span>
                        <React.Fragment>
                          {
                            " \u062b\u0628\u062a \u0634\u062f\u0647\u200c \u0648 \u0628\u0647 \u0645\u0646\u0638\u0648\u0631 "
                          }
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {
                            "\u062a\u0627\u0631\u06cc\u062e \u0646\u0648\u0628\u062a"
                          }
                        </span>
                        <React.Fragment>
                          {" \u0646\u0645\u06cc\u200c\u0628\u0627\u0634\u062f."}
                        </React.Fragment>
                      </React.Fragment>
                    )}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wtKMd
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                      <React.Fragment>
                        <React.Fragment>
                          {
                            "\u062f\u0631\u0635\u0648\u0631\u062a \u0646\u06cc\u0627\u0632 \u0628\u0647 \u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc "
                          }
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {
                            "\u067e\u06cc\u0631\u0627\u0645\u0648\u0646 \u0627\u06cc\u0646 \u0635\u0641\u062d\u0647"
                          }
                        </span>
                        <React.Fragment>
                          {
                            "\u060c \u0628\u0647 \u0622\u06cc\u200c\u062f\u06cc "
                          }
                        </React.Fragment>
                        {
                          <PlasmicLink__
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.link__kvcEd
                            )}
                            component={Link}
                            href={""}
                            onClick={async event => {
                              const $steps = {};

                              $steps["openLink"] = true
                                ? (() => {
                                    const actionArgs = {
                                      args: ["https://t.me/hojatkhajavi"]
                                    };
                                    return $globalActions[
                                      "Hamdast.openLink"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["openLink"] != null &&
                                typeof $steps["openLink"] === "object" &&
                                typeof $steps["openLink"].then === "function"
                              ) {
                                $steps["openLink"] = await $steps["openLink"];
                              }
                            }}
                            platform={"nextjs"}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "@hojatkhajavi"
                              : "@hojatkhajavi"}
                          </PlasmicLink__>
                        }
                        <React.Fragment>
                          {
                            " \u062f\u0631 \u062a\u0644\u06af\u0631\u0627\u0645 \u067e\u06cc\u0627\u0645 \u062f\u0647\u06cc\u062f."
                          }
                        </React.Fragment>
                      </React.Fragment>
                    ) : (
                      <React.Fragment>
                        <React.Fragment>
                          {
                            "\u062f\u0631\u0635\u0648\u0631\u062a \u0646\u06cc\u0627\u0632 \u0628\u0647 \u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc "
                          }
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {
                            "\u067e\u06cc\u0631\u0627\u0645\u0648\u0646 \u0627\u06cc\u0646 \u0635\u0641\u062d\u0647"
                          }
                        </span>
                        <React.Fragment>
                          {
                            "\u060c \u0628\u0647 \u0622\u06cc\u200c\u062f\u06cc "
                          }
                        </React.Fragment>
                        {
                          <PlasmicLink__
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              projectcss.__wab_text,
                              projectcss.plasmic_default__inline,
                              sty.link__kvcEd
                            )}
                            component={Link}
                            href={""}
                            onClick={async event => {
                              const $steps = {};

                              $steps["openLink"] = true
                                ? (() => {
                                    const actionArgs = {
                                      args: ["https://t.me/hojatkhajavi"]
                                    };
                                    return $globalActions[
                                      "Hamdast.openLink"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                              if (
                                $steps["openLink"] != null &&
                                typeof $steps["openLink"] === "object" &&
                                typeof $steps["openLink"].then === "function"
                              ) {
                                $steps["openLink"] = await $steps["openLink"];
                              }
                            }}
                            platform={"nextjs"}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "@hojatkhajavi"
                              : "@hojatkhajavi"}
                          </PlasmicLink__>
                        }
                        <React.Fragment>
                          {
                            " \u062f\u0631 \u062a\u0644\u06af\u0631\u0627\u0645 \u067e\u06cc\u0627\u0645 \u062f\u0647\u06cc\u062f."
                          }
                        </React.Fragment>
                      </React.Fragment>
                    )}
                  </div>
                </div>
              </div>
            ) : null}
          </section>
          <SideEffect
            data-plasmic-name={"sideEffectPageLoad"}
            data-plasmic-override={overrides.sideEffectPageLoad}
            className={classNames("__wab_instance", sty.sideEffectPageLoad)}
            onMount={async () => {
              const $steps = {};

              $steps["showWaiting"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["waiting"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["showWaiting"] != null &&
                typeof $steps["showWaiting"] === "object" &&
                typeof $steps["showWaiting"].then === "function"
              ) {
                $steps["showWaiting"] = await $steps["showWaiting"];
              }

              $steps["getUsers"] = true
                ? (() => {
                    const actionArgs = {
                      args: ["POST", "https://www.paziresh24.com/api/getUser"]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["getUsers"] != null &&
                typeof $steps["getUsers"] === "object" &&
                typeof $steps["getUsers"].then === "function"
              ) {
                $steps["getUsers"] = await $steps["getUsers"];
              }

              $steps["updateUserData"] =
                $steps.getUsers.status == 200
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["userData"]
                        },
                        operation: 0,
                        value: $steps.getUsers.data
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateUserData"] != null &&
                typeof $steps["updateUserData"] === "object" &&
                typeof $steps["updateUserData"].then === "function"
              ) {
                $steps["updateUserData"] = await $steps["updateUserData"];
              }

              $steps["getUserAccounts"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        (() => {
                          try {
                            return (
                              "https://apigw.paziresh24.com/katibe-useraccounts?user_id=" +
                              ($state.userData?.result?.id ||
                                Math.random().toString(36).substring(2, 15))
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["getUserAccounts"] != null &&
                typeof $steps["getUserAccounts"] === "object" &&
                typeof $steps["getUserAccounts"].then === "function"
              ) {
                $steps["getUserAccounts"] = await $steps["getUserAccounts"];
              }

              $steps["runCode"] =
                $steps.getUserAccounts.status == 200
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return ($state.accounts =
                            $steps.getUserAccounts.data.data);
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["userAccount200"] =
                $steps.getUserAccounts.status != 200
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return ($state.accounts = [
                            {
                              id: $state.userData.result.id,
                              name:
                                $state.userData.result.name +
                                " " +
                                $state.userData.result.family,
                              type: "userid",
                              account: "p24",
                              uniqueid: "p24" + $state.userData.result.id
                            }
                          ]);
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["userAccount200"] != null &&
                typeof $steps["userAccount200"] === "object" &&
                typeof $steps["userAccount200"].then === "function"
              ) {
                $steps["userAccount200"] = await $steps["userAccount200"];
              }

              $steps["updateUserData"] =
                $steps.getUsers.status == 200
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            if ($steps.getUsers.data.isDoctor == true) {
                              return $state.accounts.forEach(item => {
                                if (item.account === "p24") {
                                  item.name = "ویزیت آنلاین " + item.name;
                                }
                              });
                            }
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateUserData"] != null &&
                typeof $steps["updateUserData"] === "object" &&
                typeof $steps["updateUserData"].then === "function"
              ) {
                $steps["updateUserData"] = await $steps["updateUserData"];
              }

              $steps["runCode2"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          if ($state.accounts.length > 0)
                            return ($state.cbAccounts.value =
                              $state.accounts[
                                $state.accounts.length - 1
                              ].uniqueid);
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode2"] != null &&
                typeof $steps["runCode2"] === "object" &&
                typeof $steps["runCode2"].then === "function"
              ) {
                $steps["runCode2"] = await $steps["runCode2"];
              }

              $steps["isLoadAccountTrue"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["isLoadAccount"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["isLoadAccountTrue"] != null &&
                typeof $steps["isLoadAccountTrue"] === "object" &&
                typeof $steps["isLoadAccountTrue"].then === "function"
              ) {
                $steps["isLoadAccountTrue"] = await $steps["isLoadAccountTrue"];
              }

              $steps["updateFirstRequestCount"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["firstRequestCount"]
                      },
                      operation: 2
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      const oldValue = $stateGet(objRoot, variablePath);
                      $stateSet(objRoot, variablePath, oldValue + 1);
                      return oldValue + 1;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateFirstRequestCount"] != null &&
                typeof $steps["updateFirstRequestCount"] === "object" &&
                typeof $steps["updateFirstRequestCount"].then === "function"
              ) {
                $steps["updateFirstRequestCount"] = await $steps[
                  "updateFirstRequestCount"
                ];
              }
            }}
          />

          <SideEffect
            data-plasmic-name={"sideEffectRefresh"}
            data-plasmic-override={overrides.sideEffectRefresh}
            className={classNames("__wab_instance", sty.sideEffectRefresh)}
            deps={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? (() => {
                    try {
                      return [$state.firstRequestCount];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
                : (() => {
                    try {
                      return [$state.firstRequestCount];
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()
            }
            onMount={async () => {
              const $steps = {};

              $steps["runCode"] = $state.isLoadAccount
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          $state.waiting = true;
                          $state.centerInfo = {};
                          $state.recurringSettlement = [];
                          if ($state.updatewallet) {
                            $state.txtReminderTextValue = "";
                            $state.reminderWallet = 0;
                            $state.txtReminderValue = "";
                          }
                          $state.offset = 0;
                          $state.pageNumber = 1;
                          $state.invoicelist = [];
                          $state.invoiceDetials = {};
                          return $state.accounts.forEach(account => {
                            if (account.uniqueid == $state.cbAccounts.value) {
                              $state.currentAccountId = account.id;
                              $state.currentAccountAccount = account.account;
                              if (account.type == "userid") {
                                $state.currentAccountType = "userid";
                                $state.requestInvoiceUrl =
                                  "https://apigw.paziresh24.com/katibe/v1/transactions/search/p24?productid=0&limit=" +
                                  $state.limit +
                                  "&page=" +
                                  $state.pageNumber +
                                  "&account=" +
                                  account.account;
                                +"&book_date=" + $state.bookDate;
                                $state.currentCenterid = "";
                                $state.requestWalletUrl =
                                  "https://apigw.paziresh24.com/katibe/v1/transactions/balance/p24?productid=0&account=" +
                                  account.account;
                              }
                              if (account.type == "centerid") {
                                $state.currentAccountType = "centerid";
                                $state.currentCenterid =
                                  $state.cbAccounts.value;
                                $state.requestInvoiceUrl =
                                  "https://apigw.paziresh24.com/katibe/v1/transactions/search/p24?productid=0&limit=" +
                                  $state.limit +
                                  "&page=" +
                                  $state.pageNumber +
                                  "&centerid=" +
                                  account.id +
                                  "&account=" +
                                  account.account +
                                  "&book_date=" +
                                  $state.bookDate;
                                $state.requestWalletUrl =
                                  "https://apigw.paziresh24.com/katibe/v1/transactions/balance/p24?productid=7&centerid=" +
                                  account.id +
                                  "&account=" +
                                  account.account;
                              }
                            }
                          });
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["getProductWallet"] =
                $state.updatewallet && $state.isLoadAccount
                  ? (() => {
                      const actionArgs = {
                        args: [
                          undefined,
                          (() => {
                            try {
                              return $state.requestWalletUrl;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
              if (
                $steps["getProductWallet"] != null &&
                typeof $steps["getProductWallet"] === "object" &&
                typeof $steps["getProductWallet"].then === "function"
              ) {
                $steps["getProductWallet"] = await $steps["getProductWallet"];
              }

              $steps["txtReminderText"] =
                $steps.getProductWallet.status == 200 &&
                $steps.getProductWallet.data.status == true &&
                $state.updatewallet == true &&
                $state.isLoadAccount
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            if ($steps.getProductWallet.data.data.balance > 0)
                              $state.txtReminderTextValue = "موجودی: ";
                            else if (
                              $steps.getProductWallet.data.data.balance == 0
                            )
                              $state.txtReminderTextValue = "موجودی: ";
                            else $state.txtReminderTextValue = "بدهی شما: ";
                            return $steps.getProductWallet.data.data.balance >=
                              0
                              ? ($state.txtPaymentText = "پرداخت")
                              : ($state.txtPaymentText = "پرداخت");
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["txtReminderText"] != null &&
                typeof $steps["txtReminderText"] === "object" &&
                typeof $steps["txtReminderText"].then === "function"
              ) {
                $steps["txtReminderText"] = await $steps["txtReminderText"];
              }

              $steps["txtReminderValue"] =
                $steps.getProductWallet.status == 200 &&
                $steps.getProductWallet.data.status == true &&
                $state.updatewallet == true &&
                $state.isLoadAccount
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return ($state.txtReminderValue =
                            new Intl.NumberFormat("fa-IR").format(
                              $steps.getProductWallet.data.data.balance
                            ));
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["txtReminderValue"] != null &&
                typeof $steps["txtReminderValue"] === "object" &&
                typeof $steps["txtReminderValue"].then === "function"
              ) {
                $steps["txtReminderValue"] = await $steps["txtReminderValue"];
              }

              $steps["updateReminderWallet"] =
                $steps.getProductWallet.status == 200 &&
                $steps.getProductWallet.data.status == true &&
                $state.updatewallet == true &&
                $state.isLoadAccount
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["reminderWallet"]
                        },
                        operation: 0,
                        value: $steps.getProductWallet.data.data.balance
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateReminderWallet"] != null &&
                typeof $steps["updateReminderWallet"] === "object" &&
                typeof $steps["updateReminderWallet"].then === "function"
              ) {
                $steps["updateReminderWallet"] = await $steps[
                  "updateReminderWallet"
                ];
              }

              $steps["getInvoiceList"] = $state.isLoadAccount
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        (() => {
                          try {
                            return $state.requestInvoiceUrl;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["getInvoiceList"] != null &&
                typeof $steps["getInvoiceList"] === "object" &&
                typeof $steps["getInvoiceList"].then === "function"
              ) {
                $steps["getInvoiceList"] = await $steps["getInvoiceList"];
              }

              $steps["updateInvoicelist"] =
                $steps.getInvoiceList.status == 200 &&
                $steps.getInvoiceList.data.status == true &&
                $state.isLoadAccount
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["invoicelist"]
                        },
                        operation: 0,
                        value: $steps.getInvoiceList.data.data
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateInvoicelist"] != null &&
                typeof $steps["updateInvoicelist"] === "object" &&
                typeof $steps["updateInvoicelist"].then === "function"
              ) {
                $steps["updateInvoicelist"] = await $steps["updateInvoicelist"];
              }

              $steps["runCode2"] = $state.isLoadAccount
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          if (
                            $steps.getInvoiceList.status == 200 &&
                            $steps.getInvoiceList.data.data !== undefined &&
                            $steps.getInvoiceList.data.data.length ==
                              $state.limit
                          )
                            return ($state.showMoreBtn = true);
                          else return ($state.showMoreBtn = false);
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode2"] != null &&
                typeof $steps["runCode2"] === "object" &&
                typeof $steps["runCode2"].then === "function"
              ) {
                $steps["runCode2"] = await $steps["runCode2"];
              }

              $steps["updateWaiting"] =
                $state.updatewallet == false && $state.isLoadAccount
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["waiting"]
                        },
                        operation: 0,
                        value: false
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateWaiting"] != null &&
                typeof $steps["updateWaiting"] === "object" &&
                typeof $steps["updateWaiting"].then === "function"
              ) {
                $steps["updateWaiting"] = await $steps["updateWaiting"];
              }

              $steps["runCode3"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return ($state.waiting = false && $state.isLoadAccount);
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode3"] != null &&
                typeof $steps["runCode3"] === "object" &&
                typeof $steps["runCode3"].then === "function"
              ) {
                $steps["runCode3"] = await $steps["runCode3"];
              }

              $steps["getTransactionsReport"] = $state.userData?.isDoctor
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        (() => {
                          try {
                            return (
                              "https://apigw.paziresh24.com/katibe/v1/transactions/report/p24?book_date=" +
                              $state.bookDate +
                              ($state.currentAccountType == "centerid"
                                ? "&centerid=" + $state.currentAccountId
                                : "")
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["getTransactionsReport"] != null &&
                typeof $steps["getTransactionsReport"] === "object" &&
                typeof $steps["getTransactionsReport"].then === "function"
              ) {
                $steps["getTransactionsReport"] = await $steps[
                  "getTransactionsReport"
                ];
              }

              $steps["updateTransactionsReport"] =
                $steps.getTransactionsReport.status == 200 &&
                $state.userData?.isDoctor
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["transactionsReport"]
                        },
                        operation: 0,
                        value: $steps.getTransactionsReport.data
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateTransactionsReport"] != null &&
                typeof $steps["updateTransactionsReport"] === "object" &&
                typeof $steps["updateTransactionsReport"].then === "function"
              ) {
                $steps["updateTransactionsReport"] = await $steps[
                  "updateTransactionsReport"
                ];
              }

              $steps["getCentersInfo"] =
                $state.currentAccountType == "centerid"
                  ? (() => {
                      const actionArgs = {
                        args: [
                          undefined,
                          (() => {
                            try {
                              return (
                                "https://apigw.paziresh24.com/v1/centers/" +
                                $state.currentAccountId
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
              if (
                $steps["getCentersInfo"] != null &&
                typeof $steps["getCentersInfo"] === "object" &&
                typeof $steps["getCentersInfo"].then === "function"
              ) {
                $steps["getCentersInfo"] = await $steps["getCentersInfo"];
              }

              $steps["updateCenterInfo"] =
                $steps.getCentersInfo.status == 200
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["centerInfo"]
                        },
                        operation: 0,
                        value: $steps.getCentersInfo.data
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateCenterInfo"] != null &&
                typeof $steps["updateCenterInfo"] === "object" &&
                typeof $steps["updateCenterInfo"].then === "function"
              ) {
                $steps["updateCenterInfo"] = await $steps["updateCenterInfo"];
              }
            }}
          />

          <SideEffect
            data-plasmic-name={"growthBook"}
            data-plasmic-override={overrides.growthBook}
            className={classNames("__wab_instance", sty.growthBook)}
            deps={(() => {
              try {
                return [$ctx.GrowthBook.isReady];
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            onMount={async () => {
              const $steps = {};

              $steps["me"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://apigw.paziresh24.com/v1/auth/me"
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["me"] != null &&
                typeof $steps["me"] === "object" &&
                typeof $steps["me"].then === "function"
              ) {
                $steps["me"] = await $steps["me"];
              }

              $steps["invokeGlobalAction"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        (() => {
                          try {
                            return { user_id: $steps.me.data.users[0].id };
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["GrowthBook.setAttributes"]?.apply(
                      null,
                      [...actionArgs.args]
                    );
                  })()
                : undefined;
              if (
                $steps["invokeGlobalAction"] != null &&
                typeof $steps["invokeGlobalAction"] === "object" &&
                typeof $steps["invokeGlobalAction"].then === "function"
              ) {
                $steps["invokeGlobalAction"] = await $steps[
                  "invokeGlobalAction"
                ];
              }
            }}
          />

          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml)}
            code={
              '<script type="text/javascript">\r\n    (function(c,l,a,r,i,t,y){\r\n        c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};\r\n        t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;\r\n        y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);\r\n    })(window, document, "clarity", "script", "pq37fqev3s");\r\n</script>'
            }
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "h1",
    "btnDashboard3",
    "lblUser",
    "btnLogout",
    "btnLogin",
    "cbAccounts",
    "btnFilter",
    "btnFilterClear",
    "gridInvoice1",
    "txtRemainingText",
    "txtRemainingValue",
    "dialogIncreaseRemaining",
    "btnPay",
    "gridSelectprice",
    "btnSelectAmount",
    "gridMyAmount",
    "txtNewPaymentAmount",
    "btnSettlement",
    "dialogSettlement",
    "tabContent",
    "txtSettlemenAmount",
    "dialogRegisterAccount",
    "txtCardId",
    "txtCardOwner",
    "txtCardIban",
    "txtCardBankName",
    "txtCardNumber",
    "txtSettlementResult",
    "dialogTransfer",
    "transferToAnotherWallet",
    "gridInvoice13",
    "gridInvoice12",
    "dialogNewInvoiceDetails",
    "detailsDataApiRequest",
    "waitingIcon3",
    "gridNoData2",
    "gridNoData",
    "sideEffectPageLoad",
    "sideEffectRefresh",
    "growthBook",
    "embedHtml"
  ],
  h1: ["h1"],
  btnDashboard3: ["btnDashboard3"],
  lblUser: ["lblUser"],
  btnLogout: ["btnLogout"],
  btnLogin: ["btnLogin"],
  cbAccounts: ["cbAccounts"],
  btnFilter: ["btnFilter"],
  btnFilterClear: ["btnFilterClear"],
  gridInvoice1: [
    "gridInvoice1",
    "txtRemainingText",
    "txtRemainingValue",
    "dialogIncreaseRemaining",
    "btnPay",
    "gridSelectprice",
    "btnSelectAmount",
    "gridMyAmount",
    "txtNewPaymentAmount",
    "btnSettlement",
    "dialogSettlement",
    "tabContent",
    "txtSettlemenAmount",
    "dialogRegisterAccount",
    "txtCardId",
    "txtCardOwner",
    "txtCardIban",
    "txtCardBankName",
    "txtCardNumber",
    "txtSettlementResult",
    "dialogTransfer",
    "transferToAnotherWallet"
  ],
  txtRemainingText: ["txtRemainingText"],
  txtRemainingValue: ["txtRemainingValue"],
  dialogIncreaseRemaining: [
    "dialogIncreaseRemaining",
    "btnPay",
    "gridSelectprice",
    "btnSelectAmount",
    "gridMyAmount",
    "txtNewPaymentAmount"
  ],
  btnPay: ["btnPay"],
  gridSelectprice: ["gridSelectprice", "btnSelectAmount"],
  btnSelectAmount: ["btnSelectAmount"],
  gridMyAmount: ["gridMyAmount", "txtNewPaymentAmount"],
  txtNewPaymentAmount: ["txtNewPaymentAmount"],
  btnSettlement: ["btnSettlement"],
  dialogSettlement: [
    "dialogSettlement",
    "tabContent",
    "txtSettlemenAmount",
    "dialogRegisterAccount",
    "txtCardId",
    "txtCardOwner",
    "txtCardIban",
    "txtCardBankName",
    "txtCardNumber",
    "txtSettlementResult"
  ],
  tabContent: ["tabContent", "txtSettlemenAmount"],
  txtSettlemenAmount: ["txtSettlemenAmount"],
  dialogRegisterAccount: [
    "dialogRegisterAccount",
    "txtCardId",
    "txtCardOwner",
    "txtCardIban",
    "txtCardBankName"
  ],
  txtCardId: ["txtCardId"],
  txtCardOwner: ["txtCardOwner"],
  txtCardIban: ["txtCardIban"],
  txtCardBankName: ["txtCardBankName"],
  txtCardNumber: ["txtCardNumber"],
  txtSettlementResult: ["txtSettlementResult"],
  dialogTransfer: ["dialogTransfer", "transferToAnotherWallet"],
  transferToAnotherWallet: ["transferToAnotherWallet"],
  gridInvoice13: ["gridInvoice13"],
  gridInvoice12: [
    "gridInvoice12",
    "dialogNewInvoiceDetails",
    "detailsDataApiRequest",
    "waitingIcon3"
  ],
  dialogNewInvoiceDetails: [
    "dialogNewInvoiceDetails",
    "detailsDataApiRequest",
    "waitingIcon3"
  ],
  detailsDataApiRequest: ["detailsDataApiRequest", "waitingIcon3"],
  waitingIcon3: ["waitingIcon3"],
  gridNoData2: ["gridNoData2"],
  gridNoData: ["gridNoData"],
  sideEffectPageLoad: ["sideEffectPageLoad"],
  sideEffectRefresh: ["sideEffectRefresh"],
  growthBook: ["growthBook"],
  embedHtml: ["embedHtml"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h1: "h1";
  btnDashboard3: "div";
  lblUser: "div";
  btnLogout: "a";
  btnLogin: typeof Button;
  cbAccounts: typeof Select;
  btnFilter: typeof Button2;
  btnFilterClear: typeof Button2;
  gridInvoice1: "div";
  txtRemainingText: "div";
  txtRemainingValue: "div";
  dialogIncreaseRemaining: typeof Dialog;
  btnPay: typeof Button;
  gridSelectprice: "div";
  btnSelectAmount: typeof Button;
  gridMyAmount: "div";
  txtNewPaymentAmount: typeof TextInput;
  btnSettlement: typeof Button2;
  dialogSettlement: typeof Dialog2;
  tabContent: typeof TabContent;
  txtSettlemenAmount: typeof TextInput;
  dialogRegisterAccount: typeof Dialog2;
  txtCardId: typeof TextInput;
  txtCardOwner: typeof TextInput;
  txtCardIban: typeof TextInput;
  txtCardBankName: typeof TextInput;
  txtCardNumber: typeof TextInput;
  txtSettlementResult: "div";
  dialogTransfer: typeof Dialog2;
  transferToAnotherWallet: typeof TransferToAnotherWallet;
  gridInvoice13: "div";
  gridInvoice12: "div";
  dialogNewInvoiceDetails: typeof Dialog;
  detailsDataApiRequest: typeof ApiRequest;
  waitingIcon3: "svg";
  gridNoData2: "div";
  gridNoData: "div";
  sideEffectPageLoad: typeof SideEffect;
  sideEffectRefresh: typeof SideEffect;
  growthBook: typeof SideEffect;
  embedHtml: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTransactionsSearch__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTransactionsSearch__VariantsArgs;
    args?: PlasmicTransactionsSearch__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTransactionsSearch__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTransactionsSearch__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTransactionsSearch__ArgProps,
          internalVariantPropNames: PlasmicTransactionsSearch__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTransactionsSearch__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTransactionsSearch";
  } else {
    func.displayName = `PlasmicTransactionsSearch.${nodeName}`;
  }
  return func;
}

export const PlasmicTransactionsSearch = Object.assign(
  // Top-level PlasmicTransactionsSearch renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    btnDashboard3: makeNodeComponent("btnDashboard3"),
    lblUser: makeNodeComponent("lblUser"),
    btnLogout: makeNodeComponent("btnLogout"),
    btnLogin: makeNodeComponent("btnLogin"),
    cbAccounts: makeNodeComponent("cbAccounts"),
    btnFilter: makeNodeComponent("btnFilter"),
    btnFilterClear: makeNodeComponent("btnFilterClear"),
    gridInvoice1: makeNodeComponent("gridInvoice1"),
    txtRemainingText: makeNodeComponent("txtRemainingText"),
    txtRemainingValue: makeNodeComponent("txtRemainingValue"),
    dialogIncreaseRemaining: makeNodeComponent("dialogIncreaseRemaining"),
    btnPay: makeNodeComponent("btnPay"),
    gridSelectprice: makeNodeComponent("gridSelectprice"),
    btnSelectAmount: makeNodeComponent("btnSelectAmount"),
    gridMyAmount: makeNodeComponent("gridMyAmount"),
    txtNewPaymentAmount: makeNodeComponent("txtNewPaymentAmount"),
    btnSettlement: makeNodeComponent("btnSettlement"),
    dialogSettlement: makeNodeComponent("dialogSettlement"),
    tabContent: makeNodeComponent("tabContent"),
    txtSettlemenAmount: makeNodeComponent("txtSettlemenAmount"),
    dialogRegisterAccount: makeNodeComponent("dialogRegisterAccount"),
    txtCardId: makeNodeComponent("txtCardId"),
    txtCardOwner: makeNodeComponent("txtCardOwner"),
    txtCardIban: makeNodeComponent("txtCardIban"),
    txtCardBankName: makeNodeComponent("txtCardBankName"),
    txtCardNumber: makeNodeComponent("txtCardNumber"),
    txtSettlementResult: makeNodeComponent("txtSettlementResult"),
    dialogTransfer: makeNodeComponent("dialogTransfer"),
    transferToAnotherWallet: makeNodeComponent("transferToAnotherWallet"),
    gridInvoice13: makeNodeComponent("gridInvoice13"),
    gridInvoice12: makeNodeComponent("gridInvoice12"),
    dialogNewInvoiceDetails: makeNodeComponent("dialogNewInvoiceDetails"),
    detailsDataApiRequest: makeNodeComponent("detailsDataApiRequest"),
    waitingIcon3: makeNodeComponent("waitingIcon3"),
    gridNoData2: makeNodeComponent("gridNoData2"),
    gridNoData: makeNodeComponent("gridNoData"),
    sideEffectPageLoad: makeNodeComponent("sideEffectPageLoad"),
    sideEffectRefresh: makeNodeComponent("sideEffectRefresh"),
    growthBook: makeNodeComponent("growthBook"),
    embedHtml: makeNodeComponent("embedHtml"),

    // Metadata about props expected for PlasmicTransactionsSearch
    internalVariantProps: PlasmicTransactionsSearch__VariantProps,
    internalArgProps: PlasmicTransactionsSearch__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "کتیبه، مدیریت امور مالی",
      description: "لیست تراکنش ها و عملیات حساب",
      ogImageSrc:
        "https://site-assets.plasmic.app/49b5e4e62d4fd1407285906a0f5e6382.svg",
      canonical: ""
    }
  }
);

export default PlasmicTransactionsSearch;
/* prettier-ignore-end */
