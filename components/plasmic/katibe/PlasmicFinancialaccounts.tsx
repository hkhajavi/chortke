// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: afXULSfGYmou2jFpEc2QWJ
// Component: Nb8_yMmNDQBL

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import TextInput from "../../TextInput"; // plasmic-import: SePhlRlvEn3n/component
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";

import { useScreenVariants as useScreenVariantsbr2UhI7UlpvR } from "../fragment_icons/PlasmicGlobalVariant__Screen"; // plasmic-import: BR2UhI7ulpvR/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "../chortke/plasmic.module.css"; // plasmic-import: afXULSfGYmou2jFpEc2QWJ/projectcss
import sty from "./PlasmicFinancialaccounts.module.css"; // plasmic-import: Nb8_yMmNDQBL/css

import Icon2Icon from "../chortke/icons/PlasmicIcon__Icon2"; // plasmic-import: eeiQdsLura6L/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import SearchSvgIcon from "../chortke/icons/PlasmicIcon__SearchSvg"; // plasmic-import: fjupp6w2fUeo/icon
import CheckSvgIcon from "../chortke/icons/PlasmicIcon__CheckSvg"; // plasmic-import: VZ6Vl-sB0jLM/icon

createPlasmicElementProxy;

export type PlasmicFinancialaccounts__VariantMembers = {};
export type PlasmicFinancialaccounts__VariantsArgs = {};
type VariantPropType = keyof PlasmicFinancialaccounts__VariantsArgs;
export const PlasmicFinancialaccounts__VariantProps =
  new Array<VariantPropType>();

export type PlasmicFinancialaccounts__ArgsType = {};
type ArgPropType = keyof PlasmicFinancialaccounts__ArgsType;
export const PlasmicFinancialaccounts__ArgProps = new Array<ArgPropType>();

export type PlasmicFinancialaccounts__OverridesType = {
  root?: Flex__<"div">;
  section?: Flex__<"section">;
  dialog2?: Flex__<typeof Dialog>;
  txtCardNumber?: Flex__<typeof TextInput>;
  txtName?: Flex__<typeof TextInput>;
  txtBan?: Flex__<typeof TextInput>;
  txtBank?: Flex__<typeof TextInput>;
  dialogDelete?: Flex__<typeof Dialog>;
  sideEffect?: Flex__<typeof SideEffect>;
};

export interface DefaultFinancialaccountsProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFinancialaccounts__RenderFunc(props: {
  variants: PlasmicFinancialaccounts__VariantsArgs;
  args: PlasmicFinancialaccounts__ArgsType;
  overrides: PlasmicFinancialaccounts__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "waiting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "useraccounts",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "dialogDelete[].open",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "dialog2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "txtCardNumber.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "txtName.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.cardInquiry.deposit_owners[0];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "txtBan.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.cardInquiry.IBAN;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "txtBank.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.cardInquiry.bank_name;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "waitingRegister",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "cardInquiry",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "insertAccountMessage",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "pageloadcount",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbr2UhI7UlpvR()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicFinancialaccounts.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicFinancialaccounts.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicFinancialaccounts.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            plasmic_fragment_design_system_css.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <div className={classNames(projectcss.all, sty.freeBox___3ZJqF)}>
              <div className={classNames(projectcss.all, sty.freeBox__svMlS)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__seYcE
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {
                        "\u0644\u06cc\u0633\u062a \u062d\u0633\u0627\u0628\u200c\u0647\u0627\u06cc \u0628\u0627\u0646\u06a9\u06cc"
                      }
                    </span>
                  </React.Fragment>
                </div>
                {(() => {
                  try {
                    return $state.waiting;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Icon2Icon
                    className={classNames(projectcss.all, sty.svg__rdKef)}
                    role={"img"}
                  />
                ) : null}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__jVnEv)}>
                <Dialog
                  data-plasmic-name={"dialog2"}
                  data-plasmic-override={overrides.dialog2}
                  body={
                    <React.Fragment>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__kEd6I
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__jndjY
                          )}
                        >
                          <TextInput
                            data-plasmic-name={"txtCardNumber"}
                            data-plasmic-override={overrides.txtCardNumber}
                            className={classNames(
                              "__wab_instance",
                              sty.txtCardNumber
                            )}
                            onChange={async (...eventArgs: any) => {
                              ((...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "txtCardNumber",
                                  "value"
                                ])(
                                  (e => e.target?.value).apply(null, eventArgs)
                                );
                              }).apply(null, eventArgs);
                              (async event => {
                                const $steps = {};

                                $steps["runCode"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return (() => {
                                            return ($state.cardInquiry = {});
                                          })();
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["runCode"] != null &&
                                  typeof $steps["runCode"] === "object" &&
                                  typeof $steps["runCode"].then === "function"
                                ) {
                                  $steps["runCode"] = await $steps["runCode"];
                                }
                              }).apply(null, eventArgs);
                            }}
                            placeholder={
                              "\u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a"
                            }
                            value={
                              generateStateValueProp($state, [
                                "txtCardNumber",
                                "value"
                              ]) ?? ""
                            }
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ixqR
                          )}
                        >
                          {(() => {
                            try {
                              return !(
                                $state.cardInquiry &&
                                $state.cardInquiry.IBAN &&
                                $state.cardInquiry.IBAN.length > 0
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })() ? (
                            <Button
                              children2={
                                "\u0627\u0633\u062a\u0639\u0644\u0627\u0645"
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.button__ruiUf
                              )}
                              color={"green"}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateWaitingRegister"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["waitingRegister"]
                                        },
                                        operation: 0,
                                        value: true
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateWaitingRegister"] != null &&
                                  typeof $steps["updateWaitingRegister"] ===
                                    "object" &&
                                  typeof $steps["updateWaitingRegister"]
                                    .then === "function"
                                ) {
                                  $steps["updateWaitingRegister"] =
                                    await $steps["updateWaitingRegister"];
                                }

                                $steps["runCode"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return ($state.cardInquiry = {});
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["runCode"] != null &&
                                  typeof $steps["runCode"] === "object" &&
                                  typeof $steps["runCode"].then === "function"
                                ) {
                                  $steps["runCode"] = await $steps["runCode"];
                                }

                                $steps["getCardInquiry"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          undefined,
                                          (() => {
                                            try {
                                              return (
                                                "https://api.paziresh24.com/V1/doctor/payments/iban-inquiry/?card_number=" +
                                                $state.txtCardNumber.value
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.apiRequest"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["getCardInquiry"] != null &&
                                  typeof $steps["getCardInquiry"] ===
                                    "object" &&
                                  typeof $steps["getCardInquiry"].then ===
                                    "function"
                                ) {
                                  $steps["getCardInquiry"] = await $steps[
                                    "getCardInquiry"
                                  ];
                                }

                                $steps["updateCardInquiry"] =
                                  $steps.getCardInquiry.status == 200
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["cardInquiry"]
                                          },
                                          operation: 0,
                                          value: $steps.getCardInquiry.data
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["updateCardInquiry"] != null &&
                                  typeof $steps["updateCardInquiry"] ===
                                    "object" &&
                                  typeof $steps["updateCardInquiry"].then ===
                                    "function"
                                ) {
                                  $steps["updateCardInquiry"] = await $steps[
                                    "updateCardInquiry"
                                  ];
                                }

                                $steps["invokeGlobalAction"] =
                                  $steps.getCardInquiry.status != 200
                                    ? (() => {
                                        const actionArgs = {
                                          args: [
                                            "error",
                                            "\u062e\u0637\u0627 \u062f\u0631 \u0639\u0645\u0644\u06cc\u0627\u062a \u0627\u0633\u062a\u0639\u0644\u0627\u0645. \u0644\u0637\u0641\u0627 \u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a \u0631\u0627 \u0628\u0631\u0631\u0633\u06cc \u06a9\u0631\u062f\u0647 \u0648 \u0645\u062c\u062f\u062f\u0627 \u062a\u0644\u0627\u0634 \u0646\u0645\u0627\u06cc\u06cc\u062f"
                                          ]
                                        };
                                        return $globalActions[
                                          "Fragment.showToast"
                                        ]?.apply(null, [...actionArgs.args]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["invokeGlobalAction"] != null &&
                                  typeof $steps["invokeGlobalAction"] ===
                                    "object" &&
                                  typeof $steps["invokeGlobalAction"].then ===
                                    "function"
                                ) {
                                  $steps["invokeGlobalAction"] = await $steps[
                                    "invokeGlobalAction"
                                  ];
                                }

                                $steps["updateWaitingRegister2"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["waitingRegister"]
                                        },
                                        operation: 0,
                                        value: false
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateWaitingRegister2"] != null &&
                                  typeof $steps["updateWaitingRegister2"] ===
                                    "object" &&
                                  typeof $steps["updateWaitingRegister2"]
                                    .then === "function"
                                ) {
                                  $steps["updateWaitingRegister2"] =
                                    await $steps["updateWaitingRegister2"];
                                }
                              }}
                              size={"compact"}
                            />
                          ) : null}
                        </div>
                      </div>
                      {(() => {
                        try {
                          return (
                            $state.cardInquiry &&
                            $state.cardInquiry.IBAN &&
                            $state.cardInquiry.IBAN.length > 0
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ctCdM
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__yLtZy
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__pBt7G
                              )}
                            >
                              {
                                "\u0646\u0627\u0645 \u0648 \u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc:"
                              }
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__qczrs
                            )}
                          >
                            <TextInput
                              data-plasmic-name={"txtName"}
                              data-plasmic-override={overrides.txtName}
                              className={classNames(
                                "__wab_instance",
                                sty.txtName
                              )}
                              onChange={(...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "txtName",
                                  "value"
                                ])(
                                  (e => e.target?.value).apply(null, eventArgs)
                                );
                              }}
                              value={
                                generateStateValueProp($state, [
                                  "txtName",
                                  "value"
                                ]) ?? ""
                              }
                            />
                          </div>
                        </div>
                      ) : null}
                      {(() => {
                        try {
                          return (
                            $state.cardInquiry &&
                            $state.cardInquiry.IBAN &&
                            $state.cardInquiry.IBAN.length > 0
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__bg1Hr
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__sZXlm
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__pWmKm
                              )}
                            >
                              {"\u0634\u0628\u0627:"}
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__y8V5M
                            )}
                          >
                            <TextInput
                              data-plasmic-name={"txtBan"}
                              data-plasmic-override={overrides.txtBan}
                              className={classNames(
                                "__wab_instance",
                                sty.txtBan
                              )}
                              onChange={(...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "txtBan",
                                  "value"
                                ])(
                                  (e => e.target?.value).apply(null, eventArgs)
                                );
                              }}
                              value={
                                generateStateValueProp($state, [
                                  "txtBan",
                                  "value"
                                ]) ?? ""
                              }
                            />
                          </div>
                        </div>
                      ) : null}
                      {(() => {
                        try {
                          return (
                            $state.cardInquiry &&
                            $state.cardInquiry.IBAN &&
                            $state.cardInquiry.IBAN.length > 0
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___2Vltj
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___7GX1B
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ftRpy
                              )}
                            >
                              {"\u0628\u0627\u0646\u06a9:"}
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__wgxxz
                            )}
                          >
                            <TextInput
                              data-plasmic-name={"txtBank"}
                              data-plasmic-override={overrides.txtBank}
                              className={classNames(
                                "__wab_instance",
                                sty.txtBank
                              )}
                              onChange={(...eventArgs) => {
                                generateStateOnChangeProp($state, [
                                  "txtBank",
                                  "value"
                                ])(
                                  (e => e.target?.value).apply(null, eventArgs)
                                );
                              }}
                              value={
                                generateStateValueProp($state, [
                                  "txtBank",
                                  "value"
                                ]) ?? ""
                              }
                            />
                          </div>
                        </div>
                      ) : null}
                      {(() => {
                        try {
                          return (
                            $state.cardInquiry &&
                            $state.cardInquiry.IBAN &&
                            $state.cardInquiry.IBAN.length > 0
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__fsMku
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__glNyP
                            )}
                          >
                            <Button
                              children2={"\u062b\u0628\u062a"}
                              className={classNames(
                                "__wab_instance",
                                sty.button__hGky
                              )}
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateInsertAccountMessage"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["insertAccountMessage"]
                                        },
                                        operation: 0,
                                        value: ""
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateInsertAccountMessage"] !=
                                    null &&
                                  typeof $steps[
                                    "updateInsertAccountMessage"
                                  ] === "object" &&
                                  typeof $steps["updateInsertAccountMessage"]
                                    .then === "function"
                                ) {
                                  $steps["updateInsertAccountMessage"] =
                                    await $steps["updateInsertAccountMessage"];
                                }

                                $steps["updateWaitingRegister"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["waitingRegister"]
                                        },
                                        operation: 0,
                                        value: true
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateWaitingRegister"] != null &&
                                  typeof $steps["updateWaitingRegister"] ===
                                    "object" &&
                                  typeof $steps["updateWaitingRegister"]
                                    .then === "function"
                                ) {
                                  $steps["updateWaitingRegister"] =
                                    await $steps["updateWaitingRegister"];
                                }

                                $steps["registerAccount"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        args: [
                                          "POST",
                                          "https://apigw.paziresh24.com/financialaccount/v1/useraccountbycardid",
                                          undefined,
                                          (() => {
                                            try {
                                              return {
                                                cardid:
                                                  $state.txtCardNumber.value
                                              };
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                        ]
                                      };
                                      return $globalActions[
                                        "Fragment.apiRequest"
                                      ]?.apply(null, [...actionArgs.args]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["registerAccount"] != null &&
                                  typeof $steps["registerAccount"] ===
                                    "object" &&
                                  typeof $steps["registerAccount"].then ===
                                    "function"
                                ) {
                                  $steps["registerAccount"] = await $steps[
                                    "registerAccount"
                                  ];
                                }

                                $steps["updateInsertAccountMessage2"] =
                                  $steps.registerAccount.status != 200
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: [
                                              "insertAccountMessage"
                                            ]
                                          },
                                          operation: 0,
                                          value:
                                            $steps.registerAccount.data.message
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["updateInsertAccountMessage2"] !=
                                    null &&
                                  typeof $steps[
                                    "updateInsertAccountMessage2"
                                  ] === "object" &&
                                  typeof $steps["updateInsertAccountMessage2"]
                                    .then === "function"
                                ) {
                                  $steps["updateInsertAccountMessage2"] =
                                    await $steps["updateInsertAccountMessage2"];
                                }

                                $steps["updateWaiting2"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["waitingRegister"]
                                        },
                                        operation: 0,
                                        value: false
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateWaiting2"] != null &&
                                  typeof $steps["updateWaiting2"] ===
                                    "object" &&
                                  typeof $steps["updateWaiting2"].then ===
                                    "function"
                                ) {
                                  $steps["updateWaiting2"] = await $steps[
                                    "updateWaiting2"
                                  ];
                                }

                                $steps["refreshList"] =
                                  $steps.registerAccount.status == 200
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["pageloadcount"]
                                          },
                                          operation: 2
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          const oldValue = $stateGet(
                                            objRoot,
                                            variablePath
                                          );
                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            oldValue + 1
                                          );
                                          return oldValue + 1;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["refreshList"] != null &&
                                  typeof $steps["refreshList"] === "object" &&
                                  typeof $steps["refreshList"].then ===
                                    "function"
                                ) {
                                  $steps["refreshList"] = await $steps[
                                    "refreshList"
                                  ];
                                }

                                $steps["alertSuccess"] =
                                  $steps.registerAccount.status == 200
                                    ? (() => {
                                        const actionArgs = {
                                          args: [
                                            undefined,
                                            "\u062d\u0633\u0627\u0628 \u0645\u0648\u0631\u062f \u0646\u0638\u0631 \u062b\u0628\u062a \u06af\u0631\u062f\u06cc\u062f"
                                          ]
                                        };
                                        return $globalActions[
                                          "Fragment.showToast"
                                        ]?.apply(null, [...actionArgs.args]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["alertSuccess"] != null &&
                                  typeof $steps["alertSuccess"] === "object" &&
                                  typeof $steps["alertSuccess"].then ===
                                    "function"
                                ) {
                                  $steps["alertSuccess"] = await $steps[
                                    "alertSuccess"
                                  ];
                                }

                                $steps["alertError"] =
                                  $steps.registerAccount.status != 200
                                    ? (() => {
                                        const actionArgs = {
                                          args: [
                                            "error",
                                            (() => {
                                              try {
                                                return (
                                                  "خطا در ثبت حساب: " +
                                                  $state.insertAccountMessage
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return undefined;
                                                }
                                                throw e;
                                              }
                                            })()
                                          ]
                                        };
                                        return $globalActions[
                                          "Fragment.showToast"
                                        ]?.apply(null, [...actionArgs.args]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["alertError"] != null &&
                                  typeof $steps["alertError"] === "object" &&
                                  typeof $steps["alertError"].then ===
                                    "function"
                                ) {
                                  $steps["alertError"] = await $steps[
                                    "alertError"
                                  ];
                                }

                                $steps["updateWaiting3"] =
                                  $steps.registerAccount.status == 200
                                    ? (() => {
                                        const actionArgs = {
                                          variable: {
                                            objRoot: $state,
                                            variablePath: ["dialog2", "open"]
                                          },
                                          operation: 0,
                                          value: false
                                        };
                                        return (({
                                          variable,
                                          value,
                                          startIndex,
                                          deleteCount
                                        }) => {
                                          if (!variable) {
                                            return;
                                          }
                                          const { objRoot, variablePath } =
                                            variable;

                                          $stateSet(
                                            objRoot,
                                            variablePath,
                                            value
                                          );
                                          return value;
                                        })?.apply(null, [actionArgs]);
                                      })()
                                    : undefined;
                                if (
                                  $steps["updateWaiting3"] != null &&
                                  typeof $steps["updateWaiting3"] ===
                                    "object" &&
                                  typeof $steps["updateWaiting3"].then ===
                                    "function"
                                ) {
                                  $steps["updateWaiting3"] = await $steps[
                                    "updateWaiting3"
                                  ];
                                }
                              }}
                              size={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? "compact"
                                  : undefined
                              }
                            />
                          </div>
                        </div>
                      ) : null}
                    </React.Fragment>
                  }
                  className={classNames("__wab_instance", sty.dialog2)}
                  onOpenChange={generateStateOnChangeProp($state, [
                    "dialog2",
                    "open"
                  ])}
                  open={generateStateValueProp($state, ["dialog2", "open"])}
                  title={
                    <div
                      className={classNames(projectcss.all, sty.freeBox__tpmsl)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__styHd
                        )}
                      >
                        {"\u062b\u0628\u062a \u062d\u0633\u0627\u0628"}
                      </div>
                      {(() => {
                        try {
                          return $state.waitingRegister;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <Icon2Icon
                          className={classNames(projectcss.all, sty.svg__z463)}
                          role={"img"}
                        />
                      ) : null}
                    </div>
                  }
                  trigger={
                    <Button
                      children2={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__umN9X
                          )}
                        >
                          {"\u062d\u0633\u0627\u0628 \u062c\u062f\u06cc\u062f"}
                        </div>
                      }
                      endIcon={
                        <ChevronLeftIcon
                          className={classNames(projectcss.all, sty.svg__bhXcQ)}
                          role={"img"}
                        />
                      }
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateWaitingRegister"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["waitingRegister"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateWaitingRegister"] != null &&
                          typeof $steps["updateWaitingRegister"] === "object" &&
                          typeof $steps["updateWaitingRegister"].then ===
                            "function"
                        ) {
                          $steps["updateWaitingRegister"] = await $steps[
                            "updateWaitingRegister"
                          ];
                        }
                      }}
                      size={"compact"}
                      startIcon={
                        <ChevronRightIcon
                          className={classNames(projectcss.all, sty.svg__knZpp)}
                          role={"img"}
                        />
                      }
                    />
                  }
                />
              </div>
            </div>
            {(() => {
              try {
                return $state.useraccounts.length > 0;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div className={classNames(projectcss.all, sty.freeBox___5XxFc)}>
                <div className={classNames(projectcss.all, sty.freeBox__b6C2H)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___65Kei
                    )}
                  >
                    {"\u0631\u062f\u06cc\u0641"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox___4HUL)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__oiRDy
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "\u0646\u0627\u0645"
                      : "\u0646\u0627\u0645 \u0648 \u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__xus6P)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__d49O4
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "\u06a9\u0627\u0631\u062a"
                      : "\u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__r15Js)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mDAxs
                    )}
                  >
                    {"\u0634\u0628\u0627"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__csYlM)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__h2Jw
                    )}
                  >
                    {"\u0628\u0627\u0646\u06a9"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__cJkB)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xTn3I
                    )}
                  >
                    {"\u0639\u0645\u0644\u06cc\u0627\u062a"}
                  </div>
                </div>
              </div>
            ) : null}
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $state.useraccounts;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <div
                  className={classNames(projectcss.all, sty.freeBox__uzKtl)}
                  key={currentIndex}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__dapO)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___02ZUw
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentIndex + 1;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0631\u062f\u06cc\u0641";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__srAQf)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bokq2
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.ownername;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0646\u0627\u0645 \u0648 \u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__jk7Eh)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___8LP7N
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.cardid;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ejo7F)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vguLl
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.iban;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0634\u0628\u0627";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vuRab)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___6Yflh
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return currentItem.name;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0628\u0627\u0646\u06a9";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ax76I)}
                  >
                    {(() => {
                      const child$Props = {
                        body: (
                          <React.Fragment>
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__cnYrs
                              )}
                            >
                              <React.Fragment>
                                {(() => {
                                  try {
                                    return (
                                      "آیا مایل به حذف حساب با شماره کارت " +
                                      currentItem.cardid +
                                      " " +
                                      "می‌باشید؟"
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return "\u0622\u06cc\u0627 \u0645\u0627\u06cc\u0644 \u0628\u0647 \u062d\u0630\u0641 \u062d\u0633\u0627\u0628 ";
                                    }
                                    throw e;
                                  }
                                })()}
                              </React.Fragment>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__doNT
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__kER
                                )}
                              >
                                <Button
                                  children2={
                                    "\u0628\u0627\u0632\u06af\u0634\u062a"
                                  }
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button__mwJuE
                                  )}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["updateDialogDelete0Open"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: [
                                                "dialogDelete",
                                                "0",
                                                "open"
                                              ]
                                            },
                                            operation: 0,
                                            value: false
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateDialogDelete0Open"] !=
                                        null &&
                                      typeof $steps[
                                        "updateDialogDelete0Open"
                                      ] === "object" &&
                                      typeof $steps["updateDialogDelete0Open"]
                                        .then === "function"
                                    ) {
                                      $steps["updateDialogDelete0Open"] =
                                        await $steps["updateDialogDelete0Open"];
                                    }
                                  }}
                                  size={"compact"}
                                />
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__gj3BV
                                )}
                              >
                                <Button
                                  children2={
                                    "\u062d\u0630\u0641 \u0634\u0648\u062f"
                                  }
                                  className={classNames(
                                    "__wab_instance",
                                    sty.button__aKVpX
                                  )}
                                  color={"red"}
                                  onClick={async event => {
                                    const $steps = {};

                                    $steps["updateWaitingRegister"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["waitingRegister"]
                                            },
                                            operation: 0,
                                            value: true
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateWaitingRegister"] != null &&
                                      typeof $steps["updateWaitingRegister"] ===
                                        "object" &&
                                      typeof $steps["updateWaitingRegister"]
                                        .then === "function"
                                    ) {
                                      $steps["updateWaitingRegister"] =
                                        await $steps["updateWaitingRegister"];
                                    }

                                    $steps["deleteRequest"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            args: [
                                              "PUT",
                                              (() => {
                                                try {
                                                  return (
                                                    "https://apigw.paziresh24.com/financialaccount/v1/useraccounts?accountid=" +
                                                    currentItem.accountid
                                                  );
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return undefined;
                                                  }
                                                  throw e;
                                                }
                                              })()
                                            ]
                                          };
                                          return $globalActions[
                                            "Fragment.apiRequest"
                                          ]?.apply(null, [...actionArgs.args]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["deleteRequest"] != null &&
                                      typeof $steps["deleteRequest"] ===
                                        "object" &&
                                      typeof $steps["deleteRequest"].then ===
                                        "function"
                                    ) {
                                      $steps["deleteRequest"] = await $steps[
                                        "deleteRequest"
                                      ];
                                    }

                                    $steps["updateWaiting"] = true
                                      ? (() => {
                                          const actionArgs = {
                                            variable: {
                                              objRoot: $state,
                                              variablePath: ["waiting"]
                                            },
                                            operation: 0,
                                            value: false
                                          };
                                          return (({
                                            variable,
                                            value,
                                            startIndex,
                                            deleteCount
                                          }) => {
                                            if (!variable) {
                                              return;
                                            }
                                            const { objRoot, variablePath } =
                                              variable;

                                            $stateSet(
                                              objRoot,
                                              variablePath,
                                              value
                                            );
                                            return value;
                                          })?.apply(null, [actionArgs]);
                                        })()
                                      : undefined;
                                    if (
                                      $steps["updateWaiting"] != null &&
                                      typeof $steps["updateWaiting"] ===
                                        "object" &&
                                      typeof $steps["updateWaiting"].then ===
                                        "function"
                                    ) {
                                      $steps["updateWaiting"] = await $steps[
                                        "updateWaiting"
                                      ];
                                    }

                                    $steps["closeModal"] =
                                      $steps.deleteRequest.status == 200
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: [
                                                  "dialogDelete",
                                                  "0",
                                                  "open"
                                                ]
                                              },
                                              operation: 0,
                                              value: false
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["closeModal"] != null &&
                                      typeof $steps["closeModal"] ===
                                        "object" &&
                                      typeof $steps["closeModal"].then ===
                                        "function"
                                    ) {
                                      $steps["closeModal"] = await $steps[
                                        "closeModal"
                                      ];
                                    }

                                    $steps["refreshList"] =
                                      $steps.deleteRequest.status == 200
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["pageloadcount"]
                                              },
                                              operation: 2
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              const oldValue = $stateGet(
                                                objRoot,
                                                variablePath
                                              );
                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                oldValue + 1
                                              );
                                              return oldValue + 1;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["refreshList"] != null &&
                                      typeof $steps["refreshList"] ===
                                        "object" &&
                                      typeof $steps["refreshList"].then ===
                                        "function"
                                    ) {
                                      $steps["refreshList"] = await $steps[
                                        "refreshList"
                                      ];
                                    }

                                    $steps["alertError"] =
                                      $steps.deleteRequest.status != 200
                                        ? (() => {
                                            const actionArgs = {
                                              args: [
                                                "error",
                                                "\u062e\u0637\u0627 \u062f\u0631 \u062d\u0630\u0641 \u062d\u0633\u0627\u0628 \u0628\u0627\u0646\u06a9\u06cc"
                                              ]
                                            };
                                            return $globalActions[
                                              "Fragment.showToast"
                                            ]?.apply(null, [
                                              ...actionArgs.args
                                            ]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["alertError"] != null &&
                                      typeof $steps["alertError"] ===
                                        "object" &&
                                      typeof $steps["alertError"].then ===
                                        "function"
                                    ) {
                                      $steps["alertError"] = await $steps[
                                        "alertError"
                                      ];
                                    }

                                    $steps["alertOk"] =
                                      $steps.deleteRequest.status == 200
                                        ? (() => {
                                            const actionArgs = {
                                              args: [
                                                undefined,
                                                "\u062d\u0633\u0627\u0628 \u0645\u0648\u0631\u062f \u0646\u0638\u0631 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062d\u0630\u0641 \u0634\u062f."
                                              ]
                                            };
                                            return $globalActions[
                                              "Fragment.showToast"
                                            ]?.apply(null, [
                                              ...actionArgs.args
                                            ]);
                                          })()
                                        : undefined;
                                    if (
                                      $steps["alertOk"] != null &&
                                      typeof $steps["alertOk"] === "object" &&
                                      typeof $steps["alertOk"].then ===
                                        "function"
                                    ) {
                                      $steps["alertOk"] = await $steps[
                                        "alertOk"
                                      ];
                                    }
                                  }}
                                  size={"compact"}
                                />
                              </div>
                            </div>
                          </React.Fragment>
                        ),
                        className: classNames(
                          "__wab_instance",
                          sty.dialogDelete
                        ),
                        onOpenChange: generateStateOnChangeProp($state, [
                          "dialogDelete",
                          __plasmic_idx_0,
                          "open"
                        ]),
                        open: generateStateValueProp($state, [
                          "dialogDelete",
                          __plasmic_idx_0,
                          "open"
                        ]),
                        title: (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__bQuiU
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__sjVWq
                              )}
                            >
                              {
                                "\u062d\u0630\u0641 \u062d\u0633\u0627\u0628 \u0628\u0627\u0646\u06a9\u06cc"
                              }
                            </div>
                            {(() => {
                              try {
                                return $state.waitingRegister;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <Icon2Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__y8Juj
                                )}
                                role={"img"}
                              />
                            ) : null}
                          </div>
                        ),
                        trigger: (
                          <Button
                            children2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__sceD5
                                )}
                              >
                                {"\u062d\u0630\u0641"}
                              </div>
                            }
                            color={"red"}
                            endIcon={
                              <ChevronLeftIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__kyFoW
                                )}
                                role={"img"}
                              />
                            }
                            onClick={async event => {
                              const $steps = {};

                              $steps["updateWaitingRegister"] = true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["waitingRegister"]
                                      },
                                      operation: 0,
                                      value: false
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["updateWaitingRegister"] != null &&
                                typeof $steps["updateWaitingRegister"] ===
                                  "object" &&
                                typeof $steps["updateWaitingRegister"].then ===
                                  "function"
                              ) {
                                $steps["updateWaitingRegister"] = await $steps[
                                  "updateWaitingRegister"
                                ];
                              }
                            }}
                            size={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? "compact"
                                : "compact"
                            }
                            startIcon={
                              <ChevronRightIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__yQ7M
                                )}
                                role={"img"}
                              />
                            }
                          />
                        )
                      };

                      initializePlasmicStates(
                        $state,
                        [
                          {
                            name: "dialogDelete[].open",
                            initFunc: ({ $props, $state, $queries }) =>
                              undefined
                          }
                        ],
                        [__plasmic_idx_0]
                      );
                      return (
                        <Dialog
                          data-plasmic-name={"dialogDelete"}
                          data-plasmic-override={overrides.dialogDelete}
                          {...child$Props}
                        />
                      );
                    })()}
                  </div>
                </div>
              );
            })}
          </section>
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            deps={(() => {
              try {
                return [$state.pageloadcount];
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            onMount={async () => {
              const $steps = {};

              $steps["updateWaiting"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["waiting"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateWaiting"] != null &&
                typeof $steps["updateWaiting"] === "object" &&
                typeof $steps["updateWaiting"].then === "function"
              ) {
                $steps["updateWaiting"] = await $steps["updateWaiting"];
              }

              $steps["getUserAccounts"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://apigw.paziresh24.com/financialaccount/v1/useraccounts"
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["getUserAccounts"] != null &&
                typeof $steps["getUserAccounts"] === "object" &&
                typeof $steps["getUserAccounts"].then === "function"
              ) {
                $steps["getUserAccounts"] = await $steps["getUserAccounts"];
              }

              $steps["updateWaiting3"] = ($steps.getUserAccounts.status = 200)
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["useraccounts"]
                      },
                      operation: 0,
                      value: $steps.getUserAccounts.data.data
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateWaiting3"] != null &&
                typeof $steps["updateWaiting3"] === "object" &&
                typeof $steps["updateWaiting3"].then === "function"
              ) {
                $steps["updateWaiting3"] = await $steps["updateWaiting3"];
              }

              $steps["updateWaiting2"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["waiting"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateWaiting2"] != null &&
                typeof $steps["updateWaiting2"] === "object" &&
                typeof $steps["updateWaiting2"].then === "function"
              ) {
                $steps["updateWaiting2"] = await $steps["updateWaiting2"];
              }
            }}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "dialog2",
    "txtCardNumber",
    "txtName",
    "txtBan",
    "txtBank",
    "dialogDelete",
    "sideEffect"
  ],
  section: [
    "section",
    "dialog2",
    "txtCardNumber",
    "txtName",
    "txtBan",
    "txtBank",
    "dialogDelete"
  ],
  dialog2: ["dialog2", "txtCardNumber", "txtName", "txtBan", "txtBank"],
  txtCardNumber: ["txtCardNumber"],
  txtName: ["txtName"],
  txtBan: ["txtBan"],
  txtBank: ["txtBank"],
  dialogDelete: ["dialogDelete"],
  sideEffect: ["sideEffect"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
  dialog2: typeof Dialog;
  txtCardNumber: typeof TextInput;
  txtName: typeof TextInput;
  txtBan: typeof TextInput;
  txtBank: typeof TextInput;
  dialogDelete: typeof Dialog;
  sideEffect: typeof SideEffect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFinancialaccounts__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFinancialaccounts__VariantsArgs;
    args?: PlasmicFinancialaccounts__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFinancialaccounts__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFinancialaccounts__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFinancialaccounts__ArgProps,
          internalVariantPropNames: PlasmicFinancialaccounts__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFinancialaccounts__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFinancialaccounts";
  } else {
    func.displayName = `PlasmicFinancialaccounts.${nodeName}`;
  }
  return func;
}

export const PlasmicFinancialaccounts = Object.assign(
  // Top-level PlasmicFinancialaccounts renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    dialog2: makeNodeComponent("dialog2"),
    txtCardNumber: makeNodeComponent("txtCardNumber"),
    txtName: makeNodeComponent("txtName"),
    txtBan: makeNodeComponent("txtBan"),
    txtBank: makeNodeComponent("txtBank"),
    dialogDelete: makeNodeComponent("dialogDelete"),
    sideEffect: makeNodeComponent("sideEffect"),

    // Metadata about props expected for PlasmicFinancialaccounts
    internalVariantProps: PlasmicFinancialaccounts__VariantProps,
    internalArgProps: PlasmicFinancialaccounts__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "حساب‌های بانکی",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicFinancialaccounts;
/* prettier-ignore-end */
