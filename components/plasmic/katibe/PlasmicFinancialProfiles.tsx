// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: afXULSfGYmou2jFpEc2QWJ
// Component: N2OZ5reJWy2r

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Select from "../../Select"; // plasmic-import: 7wkEfmUYAcMf/component
import TextInput from "../../TextInput"; // plasmic-import: SePhlRlvEn3n/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";

import { useScreenVariants as useScreenVariantsbr2UhI7UlpvR } from "../fragment_icons/PlasmicGlobalVariant__Screen"; // plasmic-import: BR2UhI7ulpvR/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "../chortke/plasmic.module.css"; // plasmic-import: afXULSfGYmou2jFpEc2QWJ/projectcss
import sty from "./PlasmicFinancialProfiles.module.css"; // plasmic-import: N2OZ5reJWy2r/css

import Icon2Icon from "../chortke/icons/PlasmicIcon__Icon2"; // plasmic-import: eeiQdsLura6L/icon
import SearchSvgIcon from "../chortke/icons/PlasmicIcon__SearchSvg"; // plasmic-import: fjupp6w2fUeo/icon
import CheckSvgIcon from "../chortke/icons/PlasmicIcon__CheckSvg"; // plasmic-import: VZ6Vl-sB0jLM/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicFinancialProfiles__VariantMembers = {};
export type PlasmicFinancialProfiles__VariantsArgs = {};
type VariantPropType = keyof PlasmicFinancialProfiles__VariantsArgs;
export const PlasmicFinancialProfiles__VariantProps =
  new Array<VariantPropType>();

export type PlasmicFinancialProfiles__ArgsType = {};
type ArgPropType = keyof PlasmicFinancialProfiles__ArgsType;
export const PlasmicFinancialProfiles__ArgProps = new Array<ArgPropType>();

export type PlasmicFinancialProfiles__OverridesType = {
  root?: Flex__<"div">;
  section?: Flex__<"section">;
  cbAccounts?: Flex__<typeof Select>;
  svg?: Flex__<"svg">;
  txtName?: Flex__<typeof TextInput>;
  txtNationalId?: Flex__<typeof TextInput>;
  txtRegistrationNumber?: Flex__<typeof TextInput>;
  txtEconomicCode?: Flex__<typeof TextInput>;
  txtPostalCode?: Flex__<typeof TextInput>;
  txtPhone?: Flex__<typeof TextInput>;
  txtAddress?: Flex__<typeof TextInput>;
  button?: Flex__<typeof Button>;
  sideEffectPageLoad?: Flex__<typeof SideEffect>;
  loadProfile?: Flex__<typeof SideEffect>;
};

export interface DefaultFinancialProfilesProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFinancialProfiles__RenderFunc(props: {
  variants: PlasmicFinancialProfiles__VariantsArgs;
  args: PlasmicFinancialProfiles__ArgsType;
  overrides: PlasmicFinancialProfiles__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "cbAccounts.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.accounts[0].id;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "waiting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "accounts",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "currentAccountType",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "txtName.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.profile.name;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "txtNationalId.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.profile.national_id;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "txtRegistrationNumber.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.profile.registration_number;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "txtEconomicCode.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.profile.economic_code;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "txtPostalCode.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.profile.postal_code;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "txtPhone.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.profile.phone;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "txtAddress.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.profile.address;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "loadProfileCount",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "currentAccountId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "profile",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "message",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbr2UhI7UlpvR()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicFinancialProfiles.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicFinancialProfiles.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicFinancialProfiles.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            plasmic_fragment_design_system_css.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            {(() => {
              try {
                return $state.accounts.length > 1;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div className={classNames(projectcss.all, sty.freeBox__qe33O)}>
                <div className={classNames(projectcss.all, sty.freeBox__gV9Nh)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gE6BR
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return "حساب کاربری:  ";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "\u062d\u0633\u0627\u0628 \u06a9\u0627\u0631\u0628\u0631\u06cc: ";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <Select
                    data-plasmic-name={"cbAccounts"}
                    data-plasmic-override={overrides.cbAccounts}
                    aria-label={"name"}
                    aria-labelledby={"id"}
                    className={classNames("__wab_instance", sty.cbAccounts)}
                    name={"accounts"}
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "cbAccounts",
                          "value"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }

                      (async value => {
                        const $steps = {};

                        $steps["updateLoadProfileCount"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["loadProfileCount"]
                                },
                                operation: 2
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                const oldValue = $stateGet(
                                  objRoot,
                                  variablePath
                                );
                                $stateSet(objRoot, variablePath, oldValue + 1);
                                return oldValue + 1;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateLoadProfileCount"] != null &&
                          typeof $steps["updateLoadProfileCount"] ===
                            "object" &&
                          typeof $steps["updateLoadProfileCount"].then ===
                            "function"
                        ) {
                          $steps["updateLoadProfileCount"] = await $steps[
                            "updateLoadProfileCount"
                          ];
                        }
                      }).apply(null, eventArgs);
                    }}
                    options={(() => {
                      try {
                        return $state.accounts.map(item => ({
                          value: item.uniqueid.toString(),
                          label: item.name
                        }));
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    placeholder={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kJlzb
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                          "\u0627\u0646\u062a\u062e\u0627\u0628 \u0646\u0645\u0627\u06cc\u06cc\u062f"
                        ) : (
                          <React.Fragment>
                            {(() => {
                              try {
                                return "حساب مورد نظر را انتخاب نمایید";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0645\u0631\u06a9\u0632 \u0645\u0648\u0631\u062f \u0646\u0638\u0631 \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u0646\u0645\u0627\u06cc\u06cc\u062f";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        )}
                      </div>
                    }
                    value={generateStateValueProp($state, [
                      "cbAccounts",
                      "value"
                    ])}
                  />
                </div>
              </div>
            ) : null}
            <div className={classNames(projectcss.all, sty.freeBox__q6TzB)}>
              <div className={classNames(projectcss.all, sty.freeBox__uNz82)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__m52Md
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.currentAccountType == "userid"
                          ? "اطلاعات حقیقی"
                          : "اطلاعات حقوقی";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                {(() => {
                  try {
                    return $state.waiting;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Icon2Icon
                    data-plasmic-name={"svg"}
                    data-plasmic-override={overrides.svg}
                    className={classNames(projectcss.all, sty.svg)}
                    role={"img"}
                  />
                ) : null}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__clHzs)}>
                <div className={classNames(projectcss.all, sty.freeBox__btbzD)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__akwEi)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___7ZJLe
                      )}
                    >
                      {"\u0646\u0627\u0645:"}
                    </div>
                    {(() => {
                      try {
                        return true;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <TextInput
                        data-plasmic-name={"txtName"}
                        data-plasmic-override={overrides.txtName}
                        className={classNames("__wab_instance", sty.txtName)}
                        isDisabled={(() => {
                          try {
                            return $state.currentAccountType == "userid";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        onChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "txtName",
                              "value"
                            ])((e => e.target?.value).apply(null, eventArgs));
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        placeholder={"\u0646\u0627\u0645"}
                        value={
                          generateStateValueProp($state, [
                            "txtName",
                            "value"
                          ]) ?? ""
                        }
                      />
                    ) : null}
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qgZry)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jaktj
                      )}
                    >
                      {"\u0634\u0646\u0627\u0633\u0647 \u0645\u0644\u06cc:"}
                    </div>
                    <TextInput
                      data-plasmic-name={"txtNationalId"}
                      data-plasmic-override={overrides.txtNationalId}
                      className={classNames(
                        "__wab_instance",
                        sty.txtNationalId
                      )}
                      isDisabled={(() => {
                        try {
                          return $state.currentAccountType == "userid";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "txtNationalId",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      placeholder={
                        "\u0634\u0646\u0627\u0633\u0647 \u0645\u0644\u06cc"
                      }
                      value={
                        generateStateValueProp($state, [
                          "txtNationalId",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__a4Il)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bboMg
                      )}
                    >
                      {"\u0634\u0646\u0627\u0633\u0647 \u062b\u0628\u062a:"}
                    </div>
                    <TextInput
                      data-plasmic-name={"txtRegistrationNumber"}
                      data-plasmic-override={overrides.txtRegistrationNumber}
                      className={classNames(
                        "__wab_instance",
                        sty.txtRegistrationNumber
                      )}
                      isDisabled={(() => {
                        try {
                          return $state.currentAccountType == "userid";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "txtRegistrationNumber",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      placeholder={
                        "\u0634\u0646\u0627\u0633\u0647 \u062b\u0628\u062a"
                      }
                      value={
                        generateStateValueProp($state, [
                          "txtRegistrationNumber",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__z8RSz)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jGnrG
                      )}
                    >
                      {
                        "\u0634\u0646\u0627\u0633\u0647 \u0627\u0642\u062a\u0635\u0627\u062f\u06cc:"
                      }
                    </div>
                    <TextInput
                      data-plasmic-name={"txtEconomicCode"}
                      data-plasmic-override={overrides.txtEconomicCode}
                      className={classNames(
                        "__wab_instance",
                        sty.txtEconomicCode
                      )}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "txtEconomicCode",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      placeholder={
                        "\u0634\u0646\u0627\u0633\u0647 \u0627\u0642\u062a\u0635\u0627\u062f\u06cc"
                      }
                      value={
                        generateStateValueProp($state, [
                          "txtEconomicCode",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__iWlLl)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kap5T
                      )}
                    >
                      {"\u06a9\u062f \u067e\u0633\u062a\u06cc:"}
                    </div>
                    <TextInput
                      data-plasmic-name={"txtPostalCode"}
                      data-plasmic-override={overrides.txtPostalCode}
                      className={classNames(
                        "__wab_instance",
                        sty.txtPostalCode
                      )}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "txtPostalCode",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      placeholder={"\u06a9\u062f \u067e\u0633\u062a\u06cc"}
                      value={
                        generateStateValueProp($state, [
                          "txtPostalCode",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__eo2Sw)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wYbLn
                      )}
                    >
                      {
                        "\u0634\u0645\u0627\u0631\u0647 \u062a\u0645\u0627\u0633:"
                      }
                    </div>
                    <TextInput
                      data-plasmic-name={"txtPhone"}
                      data-plasmic-override={overrides.txtPhone}
                      className={classNames("__wab_instance", sty.txtPhone)}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "txtPhone",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      placeholder={
                        "\u0634\u0645\u0627\u0631\u0647 \u062a\u0645\u0627\u0633:"
                      }
                      value={
                        generateStateValueProp($state, ["txtPhone", "value"]) ??
                        ""
                      }
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__tHhs1)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__o4Bni
                      )}
                    >
                      {"\u0622\u062f\u0631\u0633:"}
                    </div>
                    <TextInput
                      data-plasmic-name={"txtAddress"}
                      data-plasmic-override={overrides.txtAddress}
                      className={classNames("__wab_instance", sty.txtAddress)}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "txtAddress",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      placeholder={"\u0622\u062f\u0631\u0633"}
                      value={
                        generateStateValueProp($state, [
                          "txtAddress",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__kTuJp)}
                  >
                    <Button
                      data-plasmic-name={"button"}
                      data-plasmic-override={overrides.button}
                      children2={"\u0630\u062e\u06cc\u0631\u0647"}
                      className={classNames("__wab_instance", sty.button)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["updateWaiting"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["waiting"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateWaiting"] != null &&
                          typeof $steps["updateWaiting"] === "object" &&
                          typeof $steps["updateWaiting"].then === "function"
                        ) {
                          $steps["updateWaiting"] = await $steps[
                            "updateWaiting"
                          ];
                        }

                        $steps["updateProfiles"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "POST",
                                  "https://apigw.paziresh24.com/financialaccount/v1/profiles",
                                  undefined,
                                  (() => {
                                    try {
                                      return {
                                        centerid:
                                          $state.currentAccountType ==
                                          "centerid"
                                            ? $state.currentAccountId
                                            : "",
                                        name: $state.txtName.value,
                                        national_id: $state.txtNationalId.value,
                                        registration_number:
                                          $state.txtRegistrationNumber.value,
                                        economic_code:
                                          $state.txtEconomicCode.value,
                                        postal_code: $state.txtPostalCode.value,
                                        phone: $state.txtPhone.value,
                                        address: $state.txtAddress.value
                                      };
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["updateProfiles"] != null &&
                          typeof $steps["updateProfiles"] === "object" &&
                          typeof $steps["updateProfiles"].then === "function"
                        ) {
                          $steps["updateProfiles"] = await $steps[
                            "updateProfiles"
                          ];
                        }

                        $steps["updateMessage"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["message"]
                                },
                                operation: 0,
                                value: $steps.updateProfiles.data.message
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateMessage"] != null &&
                          typeof $steps["updateMessage"] === "object" &&
                          typeof $steps["updateMessage"].then === "function"
                        ) {
                          $steps["updateMessage"] = await $steps[
                            "updateMessage"
                          ];
                        }

                        $steps["updateWaiting2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["waiting"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateWaiting2"] != null &&
                          typeof $steps["updateWaiting2"] === "object" &&
                          typeof $steps["updateWaiting2"].then === "function"
                        ) {
                          $steps["updateWaiting2"] = await $steps[
                            "updateWaiting2"
                          ];
                        }

                        $steps["alertSuccess"] =
                          $steps.updateProfiles.status == 200
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    undefined,
                                    (() => {
                                      try {
                                        return $state.message;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["alertSuccess"] != null &&
                          typeof $steps["alertSuccess"] === "object" &&
                          typeof $steps["alertSuccess"].then === "function"
                        ) {
                          $steps["alertSuccess"] = await $steps["alertSuccess"];
                        }

                        $steps["alertError"] =
                          $steps.updateProfiles.status != 200
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "error",
                                    (() => {
                                      try {
                                        return $state.message;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })(),
                                    undefined,
                                    undefined
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["alertError"] != null &&
                          typeof $steps["alertError"] === "object" &&
                          typeof $steps["alertError"].then === "function"
                        ) {
                          $steps["alertError"] = await $steps["alertError"];
                        }
                      }}
                    />
                  </div>
                </div>
              </div>
            </div>
          </section>
          <SideEffect
            data-plasmic-name={"sideEffectPageLoad"}
            data-plasmic-override={overrides.sideEffectPageLoad}
            className={classNames("__wab_instance", sty.sideEffectPageLoad)}
            onMount={async () => {
              const $steps = {};

              $steps["updateWaiting"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["waiting"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateWaiting"] != null &&
                typeof $steps["updateWaiting"] === "object" &&
                typeof $steps["updateWaiting"].then === "function"
              ) {
                $steps["updateWaiting"] = await $steps["updateWaiting"];
              }

              $steps["getUserAccounts"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://apigw.paziresh24.com/katibe/v1/useraccounts"
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["getUserAccounts"] != null &&
                typeof $steps["getUserAccounts"] === "object" &&
                typeof $steps["getUserAccounts"].then === "function"
              ) {
                $steps["getUserAccounts"] = await $steps["getUserAccounts"];
              }

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          if ($steps.getUserAccounts.status == 200) {
                            const data = $steps.getUserAccounts.data.data;
                            const uniqueData = [];
                            const seenIds = new Set();
                            data.forEach(item => {
                              if (!seenIds.has(item.id)) {
                                seenIds.add(item.id);
                                uniqueData.push(item);
                              }
                            });
                            return ($state.accounts = uniqueData);
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["runCode2"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          if ($state.accounts.length > 0)
                            return ($state.cbAccounts.value =
                              $state.accounts[
                                $state.accounts.length - 1
                              ].uniqueid);
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode2"] != null &&
                typeof $steps["runCode2"] === "object" &&
                typeof $steps["runCode2"].then === "function"
              ) {
                $steps["runCode2"] = await $steps["runCode2"];
              }

              $steps["updateWaiting2"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["waiting"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateWaiting2"] != null &&
                typeof $steps["updateWaiting2"] === "object" &&
                typeof $steps["updateWaiting2"].then === "function"
              ) {
                $steps["updateWaiting2"] = await $steps["updateWaiting2"];
              }
            }}
          />

          <SideEffect
            data-plasmic-name={"loadProfile"}
            data-plasmic-override={overrides.loadProfile}
            className={classNames("__wab_instance", sty.loadProfile)}
            deps={(() => {
              try {
                return [$state.cbAccounts.value, $state.loadProfileCount];
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            onMount={async () => {
              const $steps = {};

              $steps["updateWaiting"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["waiting"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateWaiting"] != null &&
                typeof $steps["updateWaiting"] === "object" &&
                typeof $steps["updateWaiting"].then === "function"
              ) {
                $steps["updateWaiting"] = await $steps["updateWaiting"];
              }

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return $state.accounts.forEach(account => {
                          if (account.uniqueid == $state.cbAccounts.value) {
                            $state.currentAccountType = account.type;
                            $state.currentAccountId = account.id;
                          }
                        });
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["getProfile"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        (() => {
                          try {
                            return (
                              "https://apigw.paziresh24.com/financialaccount/v1/profiles" +
                              ($state.currentAccountType == "centerid"
                                ? "/?centerid=" + $state.currentAccountId
                                : "")
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["getProfile"] != null &&
                typeof $steps["getProfile"] === "object" &&
                typeof $steps["getProfile"].then === "function"
              ) {
                $steps["getProfile"] = await $steps["getProfile"];
              }

              $steps["updateProfile"] =
                $steps.getProfile.status == 200
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["profile"]
                        },
                        operation: 0,
                        value: $steps.getProfile.data.data
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateProfile"] != null &&
                typeof $steps["updateProfile"] === "object" &&
                typeof $steps["updateProfile"].then === "function"
              ) {
                $steps["updateProfile"] = await $steps["updateProfile"];
              }

              $steps["updateWaiting3"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["waiting"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateWaiting3"] != null &&
                typeof $steps["updateWaiting3"] === "object" &&
                typeof $steps["updateWaiting3"].then === "function"
              ) {
                $steps["updateWaiting3"] = await $steps["updateWaiting3"];
              }
            }}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "cbAccounts",
    "svg",
    "txtName",
    "txtNationalId",
    "txtRegistrationNumber",
    "txtEconomicCode",
    "txtPostalCode",
    "txtPhone",
    "txtAddress",
    "button",
    "sideEffectPageLoad",
    "loadProfile"
  ],
  section: [
    "section",
    "cbAccounts",
    "svg",
    "txtName",
    "txtNationalId",
    "txtRegistrationNumber",
    "txtEconomicCode",
    "txtPostalCode",
    "txtPhone",
    "txtAddress",
    "button"
  ],
  cbAccounts: ["cbAccounts"],
  svg: ["svg"],
  txtName: ["txtName"],
  txtNationalId: ["txtNationalId"],
  txtRegistrationNumber: ["txtRegistrationNumber"],
  txtEconomicCode: ["txtEconomicCode"],
  txtPostalCode: ["txtPostalCode"],
  txtPhone: ["txtPhone"],
  txtAddress: ["txtAddress"],
  button: ["button"],
  sideEffectPageLoad: ["sideEffectPageLoad"],
  loadProfile: ["loadProfile"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
  cbAccounts: typeof Select;
  svg: "svg";
  txtName: typeof TextInput;
  txtNationalId: typeof TextInput;
  txtRegistrationNumber: typeof TextInput;
  txtEconomicCode: typeof TextInput;
  txtPostalCode: typeof TextInput;
  txtPhone: typeof TextInput;
  txtAddress: typeof TextInput;
  button: typeof Button;
  sideEffectPageLoad: typeof SideEffect;
  loadProfile: typeof SideEffect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFinancialProfiles__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFinancialProfiles__VariantsArgs;
    args?: PlasmicFinancialProfiles__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFinancialProfiles__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFinancialProfiles__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFinancialProfiles__ArgProps,
          internalVariantPropNames: PlasmicFinancialProfiles__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFinancialProfiles__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFinancialProfiles";
  } else {
    func.displayName = `PlasmicFinancialProfiles.${nodeName}`;
  }
  return func;
}

export const PlasmicFinancialProfiles = Object.assign(
  // Top-level PlasmicFinancialProfiles renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    cbAccounts: makeNodeComponent("cbAccounts"),
    svg: makeNodeComponent("svg"),
    txtName: makeNodeComponent("txtName"),
    txtNationalId: makeNodeComponent("txtNationalId"),
    txtRegistrationNumber: makeNodeComponent("txtRegistrationNumber"),
    txtEconomicCode: makeNodeComponent("txtEconomicCode"),
    txtPostalCode: makeNodeComponent("txtPostalCode"),
    txtPhone: makeNodeComponent("txtPhone"),
    txtAddress: makeNodeComponent("txtAddress"),
    button: makeNodeComponent("button"),
    sideEffectPageLoad: makeNodeComponent("sideEffectPageLoad"),
    loadProfile: makeNodeComponent("loadProfile"),

    // Metadata about props expected for PlasmicFinancialProfiles
    internalVariantProps: PlasmicFinancialProfiles__VariantProps,
    internalArgProps: PlasmicFinancialProfiles__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "اطلاعات مالی",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicFinancialProfiles;
/* prettier-ignore-end */
