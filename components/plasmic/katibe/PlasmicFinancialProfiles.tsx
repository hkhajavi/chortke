/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: afXULSfGYmou2jFpEc2QWJ
// Component: N2OZ5reJWy2r

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Select from "../../Select"; // plasmic-import: 7wkEfmUYAcMf/component
import TextInput from "../../TextInput"; // plasmic-import: SePhlRlvEn3n/component
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component
import Button2 from "../../Button"; // plasmic-import: 0wu_ZE1f8SuT/component
import { TabsContainer } from "@plasmicpkgs/plasmic-tabs";
import { TabButton } from "@plasmicpkgs/plasmic-tabs";
import { TabUnderline } from "@plasmicpkgs/plasmic-tabs";
import { TabContent } from "@plasmicpkgs/plasmic-tabs";
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import { AntdRadioGroup } from "@plasmicpkgs/antd5/skinny/registerRadio";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: afXULSfGYmou2jFpEc2QWJ/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: afXULSfGYmou2jFpEc2QWJ/styleTokensProvider
import { _useStyleTokens as useStyleTokens_antd_5_hostless } from "../antd_5_hostless/PlasmicStyleTokensProvider"; // plasmic-import: ohDidvG9XsCeFumugENU3J/styleTokensProvider
import { _useStyleTokens as useStyleTokens_plasmic_rich_components } from "../plasmic_rich_components/PlasmicStyleTokensProvider"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/styleTokensProvider
import { _useStyleTokens as useStyleTokens_fragment_design_system } from "../fragment_design_system/PlasmicStyleTokensProvider"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: afXULSfGYmou2jFpEc2QWJ/projectcss
import sty from "./PlasmicFinancialProfiles.module.css"; // plasmic-import: N2OZ5reJWy2r/css

import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: eeiQdsLura6L/icon
import SearchSvgIcon from "./icons/PlasmicIcon__SearchSvg"; // plasmic-import: fjupp6w2fUeo/icon
import CheckSvgIcon from "./icons/PlasmicIcon__CheckSvg"; // plasmic-import: VZ6Vl-sB0jLM/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import Icon22Icon from "./icons/PlasmicIcon__Icon22"; // plasmic-import: BJgqZU7jDRod/icon
import Icon23Icon from "./icons/PlasmicIcon__Icon23"; // plasmic-import: uRGFXzJKMzcg/icon

createPlasmicElementProxy;

export type PlasmicFinancialProfiles__VariantMembers = {};
export type PlasmicFinancialProfiles__VariantsArgs = {};
type VariantPropType = keyof PlasmicFinancialProfiles__VariantsArgs;
export const PlasmicFinancialProfiles__VariantProps =
  new Array<VariantPropType>();

export type PlasmicFinancialProfiles__ArgsType = {};
type ArgPropType = keyof PlasmicFinancialProfiles__ArgsType;
export const PlasmicFinancialProfiles__ArgProps = new Array<ArgPropType>();

export type PlasmicFinancialProfiles__OverridesType = {
  root?: Flex__<"div">;
  section?: Flex__<"section">;
  cbAccounts?: Flex__<typeof Select>;
  txtName?: Flex__<typeof TextInput>;
  txtNationalId?: Flex__<typeof TextInput>;
  txtRegistrationNumber?: Flex__<typeof TextInput>;
  txtEconomicCode?: Flex__<typeof TextInput>;
  txtPostalCode?: Flex__<typeof TextInput>;
  txtPhone?: Flex__<typeof TextInput>;
  txtAddress?: Flex__<typeof TextInput>;
  dialogDelete?: Flex__<typeof Dialog>;
  dialog2?: Flex__<typeof Dialog>;
  tabsContainer?: Flex__<typeof TabsContainer>;
  tabUnderline?: Flex__<typeof TabUnderline>;
  txtCardNumber?: Flex__<typeof TextInput>;
  txtCardownerName?: Flex__<typeof TextInput>;
  txtcardIban?: Flex__<typeof TextInput>;
  txtcardBank?: Flex__<typeof TextInput>;
  txtIban?: Flex__<typeof TextInput>;
  txtibanownerName?: Flex__<typeof TextInput>;
  txtIbanaccountNumber?: Flex__<typeof TextInput>;
  txtIbaNbankName?: Flex__<typeof TextInput>;
  txtIbanPaymentNumber?: Flex__<typeof TextInput>;
  sideEffectGetCardInquiry2?: Flex__<typeof SideEffect>;
  sideEffectGetIbanInquiry?: Flex__<typeof SideEffect>;
  accountSettlement?: Flex__<typeof AntdRadioGroup>;
  txtPaymentNumber?: Flex__<typeof TextInput>;
  btnActiveRecuringSettlement?: Flex__<typeof Button>;
  btnDeleteRecuringSettlement?: Flex__<typeof Button>;
  sideEffectPageLoad?: Flex__<typeof SideEffect>;
  loadProfile?: Flex__<typeof SideEffect>;
  refreshRecuringSettlement?: Flex__<typeof SideEffect>;
  embedHtml?: Flex__<typeof Embed>;
};

export interface DefaultFinancialProfilesProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFinancialProfiles__RenderFunc(props: {
  variants: PlasmicFinancialProfiles__VariantsArgs;
  args: PlasmicFinancialProfiles__ArgsType;
  overrides: PlasmicFinancialProfiles__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "cbAccounts.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.accounts[0].id;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "waiting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "accounts",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "currentAccountType",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "txtName.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.profile.name;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "txtNationalId.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.profile.national_id;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "txtRegistrationNumber.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.profile.registration_number;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "txtEconomicCode.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.profile.economic_code;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "txtPostalCode.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.profile.postal_code;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "txtPhone.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.profile.phone;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "txtAddress.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.profile.address;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "loadProfileCount",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "currentAccountId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "profile",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "message",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "dialog2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "txtCardNumber.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "txtCardownerName.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.cardInquiry.deposit_owners[0];
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "txtcardIban.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.cardInquiry.IBAN;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "txtcardBank.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.cardInquiry.bank_name;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "dialogDelete[].open",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "useraccounts",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "waitingRegister",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "cardInquiry",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "currentAccountTitle",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "insertAccountMessage",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "accountSettlement.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.recurringSettlementList[0].accountid;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "txtPaymentNumber.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.recurringSettlementList[0].payment_number || "";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "recurringSettlementList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "waitingProfile",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "waitingUserAccount",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "waitingSettlement",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "recurringSettlementMessage",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "recuringSetlementCount",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "userData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "completeLoad",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "txtIban.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "txtibanownerName.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (
                $state.ibanInquiry.data.account_owners[0].firstName +
                " " +
                $state.ibanInquiry.data.account_owners[0].lastName
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "txtIbanaccountNumber.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.ibanInquiry.data.account_number;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "txtIbaNbankName.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.ibanInquiry.data.bank_name;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "ibanInquiry",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "ibanInquiryCount",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "txtIbanPaymentNumber.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "centerInfo",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "editProfileShow",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "profileData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();
  const styleTokensClassNames_antd_5_hostless =
    useStyleTokens_antd_5_hostless();
  const styleTokensClassNames_plasmic_rich_components =
    useStyleTokens_plasmic_rich_components();
  const styleTokensClassNames_fragment_design_system =
    useStyleTokens_fragment_design_system();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicFinancialProfiles.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicFinancialProfiles.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicFinancialProfiles.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            styleTokensClassNames_antd_5_hostless,
            styleTokensClassNames_plasmic_rich_components,
            styleTokensClassNames_fragment_design_system,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            {(() => {
              try {
                return $state.accounts.length > 1;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div className={classNames(projectcss.all, sty.freeBox__qe33O)}>
                <div className={classNames(projectcss.all, sty.freeBox__gV9Nh)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gE6BR
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return "حساب کاربری:  ";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "\u062d\u0633\u0627\u0628 \u06a9\u0627\u0631\u0628\u0631\u06cc: ";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  <Select
                    data-plasmic-name={"cbAccounts"}
                    data-plasmic-override={overrides.cbAccounts}
                    aria-label={"name"}
                    aria-labelledby={"id"}
                    className={classNames("__wab_instance", sty.cbAccounts)}
                    name={"accounts"}
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "cbAccounts",
                          "value"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }

                      (async value => {
                        const $steps = {};
                      }).apply(null, eventArgs);
                    }}
                    options={(() => {
                      try {
                        return $state.accounts.map(item => ({
                          value: item.uniqueid.toString(),
                          label: item.name.replace("هزینه‌های ", "")
                        }));
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    placeholder={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kJlzb
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                          "\u0627\u0646\u062a\u062e\u0627\u0628 \u0646\u0645\u0627\u06cc\u06cc\u062f"
                        ) : (
                          <React.Fragment>
                            {(() => {
                              try {
                                return "حساب مورد نظر را انتخاب نمایید";
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0645\u0631\u06a9\u0632 \u0645\u0648\u0631\u062f \u0646\u0638\u0631 \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u0646\u0645\u0627\u06cc\u06cc\u062f";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        )}
                      </div>
                    }
                    value={generateStateValueProp($state, [
                      "cbAccounts",
                      "value"
                    ])}
                  />
                </div>
              </div>
            ) : null}
            {(() => {
              try {
                return $state.waiting;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Icon2Icon
                className={classNames(projectcss.all, sty.svg__t7By0)}
                role={"img"}
              />
            ) : null}
            {(() => {
              try {
                return (
                  !$state.waiting &&
                  $state.currentAccountType == "centerid" &&
                  $state.centerInfo.type_id == 2
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div className={classNames(projectcss.all, sty.freeBox__q6TzB)}>
                <div className={classNames(projectcss.all, sty.freeBox__uNz82)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__m52Md
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $state.currentAccountType == "userid"
                            ? "اطلاعات حقیقی"
                            : " اطلاعات حقوقی";
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                  {(() => {
                    try {
                      return $state.waitingProfile;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Icon2Icon
                      className={classNames(projectcss.all, sty.svg__djJm)}
                      role={"img"}
                    />
                  ) : null}
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__clHzs)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__btbzD)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__akwEi)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___7ZJLe
                        )}
                      >
                        {"\u0646\u0627\u0645:"}
                      </div>
                      {(() => {
                        try {
                          return true;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <TextInput
                          data-plasmic-name={"txtName"}
                          data-plasmic-override={overrides.txtName}
                          className={classNames("__wab_instance", sty.txtName)}
                          isDisabled={(() => {
                            try {
                              return $state.currentAccountType == "userid";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()}
                          onChange={async (...eventArgs: any) => {
                            ((...eventArgs) => {
                              generateStateOnChangeProp($state, [
                                "txtName",
                                "value"
                              ])((e => e.target?.value).apply(null, eventArgs));
                            }).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"\u0646\u0627\u0645"}
                          value={
                            generateStateValueProp($state, [
                              "txtName",
                              "value"
                            ]) ?? ""
                          }
                        />
                      ) : null}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__qgZry)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jaktj
                        )}
                      >
                        {"\u0634\u0646\u0627\u0633\u0647 \u0645\u0644\u06cc:"}
                      </div>
                      <TextInput
                        data-plasmic-name={"txtNationalId"}
                        data-plasmic-override={overrides.txtNationalId}
                        className={classNames(
                          "__wab_instance",
                          sty.txtNationalId
                        )}
                        isDisabled={(() => {
                          try {
                            return $state.currentAccountType == "userid";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        onChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "txtNationalId",
                              "value"
                            ])((e => e.target?.value).apply(null, eventArgs));
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        placeholder={
                          "\u0634\u0646\u0627\u0633\u0647 \u0645\u0644\u06cc"
                        }
                        value={
                          generateStateValueProp($state, [
                            "txtNationalId",
                            "value"
                          ]) ?? ""
                        }
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__a4Il)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bboMg
                        )}
                      >
                        {"\u0634\u0646\u0627\u0633\u0647 \u062b\u0628\u062a:"}
                      </div>
                      <TextInput
                        data-plasmic-name={"txtRegistrationNumber"}
                        data-plasmic-override={overrides.txtRegistrationNumber}
                        className={classNames(
                          "__wab_instance",
                          sty.txtRegistrationNumber
                        )}
                        isDisabled={(() => {
                          try {
                            return $state.currentAccountType == "userid";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        onChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "txtRegistrationNumber",
                              "value"
                            ])((e => e.target?.value).apply(null, eventArgs));
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        placeholder={
                          "\u0634\u0646\u0627\u0633\u0647 \u062b\u0628\u062a"
                        }
                        value={
                          generateStateValueProp($state, [
                            "txtRegistrationNumber",
                            "value"
                          ]) ?? ""
                        }
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__z8RSz)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jGnrG
                        )}
                      >
                        {
                          "\u0634\u0646\u0627\u0633\u0647 \u0627\u0642\u062a\u0635\u0627\u062f\u06cc:"
                        }
                      </div>
                      <TextInput
                        data-plasmic-name={"txtEconomicCode"}
                        data-plasmic-override={overrides.txtEconomicCode}
                        className={classNames(
                          "__wab_instance",
                          sty.txtEconomicCode
                        )}
                        onChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "txtEconomicCode",
                              "value"
                            ])((e => e.target?.value).apply(null, eventArgs));
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        placeholder={
                          "\u0634\u0646\u0627\u0633\u0647 \u0627\u0642\u062a\u0635\u0627\u062f\u06cc"
                        }
                        value={
                          generateStateValueProp($state, [
                            "txtEconomicCode",
                            "value"
                          ]) ?? ""
                        }
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__iWlLl)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kap5T
                        )}
                      >
                        {"\u06a9\u062f \u067e\u0633\u062a\u06cc:"}
                      </div>
                      <TextInput
                        data-plasmic-name={"txtPostalCode"}
                        data-plasmic-override={overrides.txtPostalCode}
                        className={classNames(
                          "__wab_instance",
                          sty.txtPostalCode
                        )}
                        onChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "txtPostalCode",
                              "value"
                            ])((e => e.target?.value).apply(null, eventArgs));
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        placeholder={"\u06a9\u062f \u067e\u0633\u062a\u06cc"}
                        value={
                          generateStateValueProp($state, [
                            "txtPostalCode",
                            "value"
                          ]) ?? ""
                        }
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__eo2Sw)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wYbLn
                        )}
                      >
                        {
                          "\u0634\u0645\u0627\u0631\u0647 \u062a\u0645\u0627\u0633:"
                        }
                      </div>
                      <TextInput
                        data-plasmic-name={"txtPhone"}
                        data-plasmic-override={overrides.txtPhone}
                        className={classNames("__wab_instance", sty.txtPhone)}
                        onChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "txtPhone",
                              "value"
                            ])((e => e.target?.value).apply(null, eventArgs));
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        placeholder={
                          "\u0634\u0645\u0627\u0631\u0647 \u062a\u0645\u0627\u0633:"
                        }
                        value={
                          generateStateValueProp($state, [
                            "txtPhone",
                            "value"
                          ]) ?? ""
                        }
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__tHhs1)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__o4Bni
                        )}
                      >
                        {"\u0622\u062f\u0631\u0633:"}
                      </div>
                      <TextInput
                        data-plasmic-name={"txtAddress"}
                        data-plasmic-override={overrides.txtAddress}
                        className={classNames("__wab_instance", sty.txtAddress)}
                        onChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "txtAddress",
                              "value"
                            ])((e => e.target?.value).apply(null, eventArgs));
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        placeholder={"\u0622\u062f\u0631\u0633"}
                        value={
                          generateStateValueProp($state, [
                            "txtAddress",
                            "value"
                          ]) ?? ""
                        }
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__kTuJp)}
                    >
                      <Button
                        children2={"\u0630\u062e\u06cc\u0631\u0647"}
                        className={classNames(
                          "__wab_instance",
                          sty.button__cck94
                        )}
                        onClick={async event => {
                          const $steps = {};

                          $steps["updateWaitingProfile"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["waitingProfile"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateWaitingProfile"] != null &&
                            typeof $steps["updateWaitingProfile"] ===
                              "object" &&
                            typeof $steps["updateWaitingProfile"].then ===
                              "function"
                          ) {
                            $steps["updateWaitingProfile"] = await $steps[
                              "updateWaitingProfile"
                            ];
                          }

                          $steps["updateProfiles"] = true
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "POST",
                                    "https://apigw.paziresh24.com/financialaccount/v1/profiles",
                                    undefined,
                                    (() => {
                                      try {
                                        return {
                                          centerid:
                                            $state.currentAccountType ==
                                            "centerid"
                                              ? $state.currentAccountId
                                              : "",
                                          name: $state.txtName.value,
                                          national_id:
                                            $state.txtNationalId.value,
                                          registration_number:
                                            $state.txtRegistrationNumber.value,
                                          economic_code:
                                            $state.txtEconomicCode.value,
                                          postal_code:
                                            $state.txtPostalCode.value,
                                          phone: $state.txtPhone.value,
                                          address: $state.txtAddress.value
                                        };
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                          if (
                            $steps["updateProfiles"] != null &&
                            typeof $steps["updateProfiles"] === "object" &&
                            typeof $steps["updateProfiles"].then === "function"
                          ) {
                            $steps["updateProfiles"] = await $steps[
                              "updateProfiles"
                            ];
                          }

                          $steps["updateMessage"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["message"]
                                  },
                                  operation: 0,
                                  value: $steps.updateProfiles.data.message
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateMessage"] != null &&
                            typeof $steps["updateMessage"] === "object" &&
                            typeof $steps["updateMessage"].then === "function"
                          ) {
                            $steps["updateMessage"] = await $steps[
                              "updateMessage"
                            ];
                          }

                          $steps["updateWaiting2"] = true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["waitingProfile"]
                                  },
                                  operation: 0,
                                  value: false
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateWaiting2"] != null &&
                            typeof $steps["updateWaiting2"] === "object" &&
                            typeof $steps["updateWaiting2"].then === "function"
                          ) {
                            $steps["updateWaiting2"] = await $steps[
                              "updateWaiting2"
                            ];
                          }

                          $steps["alertSuccess"] =
                            $steps.updateProfiles.status == 200
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      undefined,
                                      (() => {
                                        try {
                                          return $state.message;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.showToast"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                          if (
                            $steps["alertSuccess"] != null &&
                            typeof $steps["alertSuccess"] === "object" &&
                            typeof $steps["alertSuccess"].then === "function"
                          ) {
                            $steps["alertSuccess"] = await $steps[
                              "alertSuccess"
                            ];
                          }

                          $steps["alertError"] =
                            $steps.updateProfiles.status != 200
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "error",
                                      (() => {
                                        try {
                                          return $state.message;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })(),
                                      undefined,
                                      undefined
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.showToast"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                          if (
                            $steps["alertError"] != null &&
                            typeof $steps["alertError"] === "object" &&
                            typeof $steps["alertError"].then === "function"
                          ) {
                            $steps["alertError"] = await $steps["alertError"];
                          }
                        }}
                        size={"compact"}
                      />
                    </div>
                  </div>
                </div>
              </div>
            ) : null}
            {(() => {
              try {
                return !$state.waiting;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div className={classNames(projectcss.all, sty.freeBox___15Ck)}>
                <div className={classNames(projectcss.all, sty.freeBox__mj5P8)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___7I04V
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {
                          "\u062d\u0633\u0627\u0628 \u0628\u0627\u0646\u06a9\u06cc"
                        }
                      </span>
                    </React.Fragment>
                  </div>
                  {(() => {
                    try {
                      return $state.waitingUserAccount;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Icon2Icon
                      className={classNames(projectcss.all, sty.svg__xXws3)}
                      role={"img"}
                    />
                  ) : null}
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__baNf7)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__jD3Nw)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__lzAfw)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__oQcJp
                        )}
                      >
                        {"\u0631\u062f\u06cc\u0641"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__diaSf)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lfrTu
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "\u0646\u0627\u0645"
                          : "\u0646\u0627\u0645 \u0648 \u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__sKyv)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vmIS
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "\u06a9\u0627\u0631\u062a"
                          : "\u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__j9Ap)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___4ED8K
                        )}
                      >
                        {"\u0634\u0628\u0627"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__xw5Di)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tmwA
                        )}
                      >
                        {"\u0628\u0627\u0646\u06a9"}
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__rx8Up)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__q4JGd
                        )}
                      >
                        {"\u0639\u0645\u0644\u06cc\u0627\u062a"}
                      </div>
                    </div>
                  </div>
                  {(() => {
                    try {
                      return !$state.waiting;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()
                    ? (_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $state.useraccounts;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_0, __plasmic_idx_0) => {
                        const currentItem = __plasmic_item_0;
                        const currentIndex = __plasmic_idx_0;
                        return (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__fpaOm
                            )}
                            key={currentIndex}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__wdX7Q
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___3VIc
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentIndex + 1;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "\u0631\u062f\u06cc\u0641";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__eFv2S
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___32MUc
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.ownername
                                        .replaceAll(",", "")
                                        .replaceAll("  ", "");
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "\u0646\u0627\u0645 \u0648 \u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__cnwCz
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___9Ps1A
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.cardid;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "\u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__bPtGr
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__pZwhh
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.iban;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "\u0634\u0628\u0627";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__zVtgy
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.payment_number
                                        ? "شناسه واریز: " +
                                            currentItem.payment_number
                                        : "";
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "\u0634\u0628\u0627";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__rkbui
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__i0UXx
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return currentItem.name;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "\u0628\u0627\u0646\u06a9";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__psIIa
                              )}
                            >
                              {(() => {
                                const child$Props = {
                                  body: (
                                    <React.Fragment>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__xwp9J
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return (
                                                "آیا مایل به حذف حساب با شماره کارت " +
                                                currentItem.cardid +
                                                " " +
                                                "می‌باشید\u061F"
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "\u0622\u06cc\u0627 \u0645\u0627\u06cc\u0644 \u0628\u0647 \u062d\u0630\u0641 \u062d\u0633\u0627\u0628 ";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox___58Gi6
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__k5LAd
                                          )}
                                        >
                                          <Button2
                                            children2={
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text___2HF2E
                                                )}
                                              >
                                                {
                                                  "\u0628\u0627\u0632\u06af\u0634\u062a"
                                                }
                                              </div>
                                            }
                                            className={classNames(
                                              "__wab_instance",
                                              sty.button__y3NEn
                                            )}
                                            endIcon={
                                              <ChevronLeftIcon
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.svg__qmf1M
                                                )}
                                                role={"img"}
                                              />
                                            }
                                            onClick={async event => {
                                              const $steps = {};

                                              $steps["runCode"] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      customFunction:
                                                        async () => {
                                                          return ($state.dialogDelete[
                                                            currentIndex
                                                          ].open = false);
                                                        }
                                                    };
                                                    return (({
                                                      customFunction
                                                    }) => {
                                                      return customFunction();
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps["runCode"] != null &&
                                                typeof $steps["runCode"] ===
                                                  "object" &&
                                                typeof $steps["runCode"]
                                                  .then === "function"
                                              ) {
                                                $steps["runCode"] =
                                                  await $steps["runCode"];
                                              }
                                            }}
                                            size={"compact"}
                                            startIcon={
                                              <ChevronRightIcon
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.svg___7J28Q
                                                )}
                                                role={"img"}
                                              />
                                            }
                                          />
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox___7HBXd
                                          )}
                                        >
                                          <Button2
                                            children2={
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__y16O
                                                )}
                                              >
                                                {
                                                  "\u062d\u0630\u0641 \u0634\u0648\u062f"
                                                }
                                              </div>
                                            }
                                            className={classNames(
                                              "__wab_instance",
                                              sty.button__aFnNj
                                            )}
                                            color={"red"}
                                            endIcon={
                                              <ChevronLeftIcon
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.svg__siu6R
                                                )}
                                                role={"img"}
                                              />
                                            }
                                            onClick={async event => {
                                              const $steps = {};

                                              $steps[
                                                "updateWaitingUserAccount"
                                              ] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "waitingUserAccount"
                                                        ]
                                                      },
                                                      operation: 0,
                                                      value: true
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        value
                                                      );
                                                      return value;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps[
                                                  "updateWaitingUserAccount"
                                                ] != null &&
                                                typeof $steps[
                                                  "updateWaitingUserAccount"
                                                ] === "object" &&
                                                typeof $steps[
                                                  "updateWaitingUserAccount"
                                                ].then === "function"
                                              ) {
                                                $steps[
                                                  "updateWaitingUserAccount"
                                                ] = await $steps[
                                                  "updateWaitingUserAccount"
                                                ];
                                              }

                                              $steps["deleteRequest"] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      args: [
                                                        "PUT",
                                                        (() => {
                                                          try {
                                                            return (
                                                              "https://apigw.paziresh24.com/financialaccount/v1/useraccounts-put?accountid=" +
                                                              currentItem.accountid
                                                            );
                                                          } catch (e) {
                                                            if (
                                                              e instanceof
                                                                TypeError ||
                                                              e?.plasmicType ===
                                                                "PlasmicUndefinedDataError"
                                                            ) {
                                                              return undefined;
                                                            }
                                                            throw e;
                                                          }
                                                        })()
                                                      ]
                                                    };
                                                    return $globalActions[
                                                      "Fragment.apiRequest"
                                                    ]?.apply(null, [
                                                      ...actionArgs.args
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps["deleteRequest"] !=
                                                  null &&
                                                typeof $steps[
                                                  "deleteRequest"
                                                ] === "object" &&
                                                typeof $steps["deleteRequest"]
                                                  .then === "function"
                                              ) {
                                                $steps["deleteRequest"] =
                                                  await $steps["deleteRequest"];
                                              }

                                              $steps[
                                                "updateWaitingUserAccount2"
                                              ] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "waitingUserAccount"
                                                        ]
                                                      },
                                                      operation: 0,
                                                      value: false
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        value
                                                      );
                                                      return value;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps[
                                                  "updateWaitingUserAccount2"
                                                ] != null &&
                                                typeof $steps[
                                                  "updateWaitingUserAccount2"
                                                ] === "object" &&
                                                typeof $steps[
                                                  "updateWaitingUserAccount2"
                                                ].then === "function"
                                              ) {
                                                $steps[
                                                  "updateWaitingUserAccount2"
                                                ] = await $steps[
                                                  "updateWaitingUserAccount2"
                                                ];
                                              }

                                              $steps["updateMessage"] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "message"
                                                        ]
                                                      },
                                                      operation: 0,
                                                      value:
                                                        $steps.deleteRequest
                                                          .data.message
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        value
                                                      );
                                                      return value;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps["updateMessage"] !=
                                                  null &&
                                                typeof $steps[
                                                  "updateMessage"
                                                ] === "object" &&
                                                typeof $steps["updateMessage"]
                                                  .then === "function"
                                              ) {
                                                $steps["updateMessage"] =
                                                  await $steps["updateMessage"];
                                              }

                                              $steps["runCode"] =
                                                $steps.deleteRequest.status ==
                                                200
                                                  ? (() => {
                                                      const actionArgs = {
                                                        customFunction:
                                                          async () => {
                                                            return ($state.dialogDelete[
                                                              currentIndex
                                                            ].open = false);
                                                          }
                                                      };
                                                      return (({
                                                        customFunction
                                                      }) => {
                                                        return customFunction();
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                              if (
                                                $steps["runCode"] != null &&
                                                typeof $steps["runCode"] ===
                                                  "object" &&
                                                typeof $steps["runCode"]
                                                  .then === "function"
                                              ) {
                                                $steps["runCode"] =
                                                  await $steps["runCode"];
                                              }

                                              $steps["runCode2"] =
                                                $steps.deleteRequest.status ==
                                                200
                                                  ? (() => {
                                                      const actionArgs = {
                                                        customFunction:
                                                          async () => {
                                                            return $state.useraccounts.splice(
                                                              currentIndex,
                                                              1
                                                            );
                                                          }
                                                      };
                                                      return (({
                                                        customFunction
                                                      }) => {
                                                        return customFunction();
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                              if (
                                                $steps["runCode2"] != null &&
                                                typeof $steps["runCode2"] ===
                                                  "object" &&
                                                typeof $steps["runCode2"]
                                                  .then === "function"
                                              ) {
                                                $steps["runCode2"] =
                                                  await $steps["runCode2"];
                                              }

                                              $steps["invokeGlobalAction2"] =
                                                $steps.deleteRequest.status !=
                                                200
                                                  ? (() => {
                                                      const actionArgs = {
                                                        args: [
                                                          "error",
                                                          (() => {
                                                            try {
                                                              return $state.message;
                                                            } catch (e) {
                                                              if (
                                                                e instanceof
                                                                  TypeError ||
                                                                e?.plasmicType ===
                                                                  "PlasmicUndefinedDataError"
                                                              ) {
                                                                return undefined;
                                                              }
                                                              throw e;
                                                            }
                                                          })()
                                                        ]
                                                      };
                                                      return $globalActions[
                                                        "Fragment.showToast"
                                                      ]?.apply(null, [
                                                        ...actionArgs.args
                                                      ]);
                                                    })()
                                                  : undefined;
                                              if (
                                                $steps["invokeGlobalAction2"] !=
                                                  null &&
                                                typeof $steps[
                                                  "invokeGlobalAction2"
                                                ] === "object" &&
                                                typeof $steps[
                                                  "invokeGlobalAction2"
                                                ].then === "function"
                                              ) {
                                                $steps["invokeGlobalAction2"] =
                                                  await $steps[
                                                    "invokeGlobalAction2"
                                                  ];
                                              }

                                              $steps["invokeGlobalAction3"] =
                                                $steps.deleteRequest.status ==
                                                200
                                                  ? (() => {
                                                      const actionArgs = {
                                                        args: [
                                                          "success",
                                                          "\u062d\u0633\u0627\u0628 \u0645\u0648\u0631\u062f \u0646\u0638\u0631 \u0628\u0627 \u0645\u0648\u0641\u0642\u06cc\u062a \u062d\u0630\u0641 \u0634\u062f."
                                                        ]
                                                      };
                                                      return $globalActions[
                                                        "Fragment.showToast"
                                                      ]?.apply(null, [
                                                        ...actionArgs.args
                                                      ]);
                                                    })()
                                                  : undefined;
                                              if (
                                                $steps["invokeGlobalAction3"] !=
                                                  null &&
                                                typeof $steps[
                                                  "invokeGlobalAction3"
                                                ] === "object" &&
                                                typeof $steps[
                                                  "invokeGlobalAction3"
                                                ].then === "function"
                                              ) {
                                                $steps["invokeGlobalAction3"] =
                                                  await $steps[
                                                    "invokeGlobalAction3"
                                                  ];
                                              }

                                              $steps["refreshProfile"] =
                                                $steps.deleteRequest.status ==
                                                200
                                                  ? (() => {
                                                      const actionArgs = {
                                                        variable: {
                                                          objRoot: $state,
                                                          variablePath: [
                                                            "loadProfileCount"
                                                          ]
                                                        },
                                                        operation: 2
                                                      };
                                                      return (({
                                                        variable,
                                                        value,
                                                        startIndex,
                                                        deleteCount
                                                      }) => {
                                                        if (!variable) {
                                                          return;
                                                        }
                                                        const {
                                                          objRoot,
                                                          variablePath
                                                        } = variable;

                                                        const oldValue =
                                                          $stateGet(
                                                            objRoot,
                                                            variablePath
                                                          );
                                                        $stateSet(
                                                          objRoot,
                                                          variablePath,
                                                          oldValue + 1
                                                        );
                                                        return oldValue + 1;
                                                      })?.apply(null, [
                                                        actionArgs
                                                      ]);
                                                    })()
                                                  : undefined;
                                              if (
                                                $steps["refreshProfile"] !=
                                                  null &&
                                                typeof $steps[
                                                  "refreshProfile"
                                                ] === "object" &&
                                                typeof $steps["refreshProfile"]
                                                  .then === "function"
                                              ) {
                                                $steps["refreshProfile"] =
                                                  await $steps[
                                                    "refreshProfile"
                                                  ];
                                              }

                                              $steps[
                                                "refreshRecuringSettlement"
                                              ] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      variable: {
                                                        objRoot: $state,
                                                        variablePath: [
                                                          "recuringSetlementCount"
                                                        ]
                                                      },
                                                      operation: 2
                                                    };
                                                    return (({
                                                      variable,
                                                      value,
                                                      startIndex,
                                                      deleteCount
                                                    }) => {
                                                      if (!variable) {
                                                        return;
                                                      }
                                                      const {
                                                        objRoot,
                                                        variablePath
                                                      } = variable;

                                                      const oldValue =
                                                        $stateGet(
                                                          objRoot,
                                                          variablePath
                                                        );
                                                      $stateSet(
                                                        objRoot,
                                                        variablePath,
                                                        oldValue + 1
                                                      );
                                                      return oldValue + 1;
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps[
                                                  "refreshRecuringSettlement"
                                                ] != null &&
                                                typeof $steps[
                                                  "refreshRecuringSettlement"
                                                ] === "object" &&
                                                typeof $steps[
                                                  "refreshRecuringSettlement"
                                                ].then === "function"
                                              ) {
                                                $steps[
                                                  "refreshRecuringSettlement"
                                                ] = await $steps[
                                                  "refreshRecuringSettlement"
                                                ];
                                              }
                                            }}
                                            size={"compact"}
                                            startIcon={
                                              <ChevronRightIcon
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.svg__liHY
                                                )}
                                                role={"img"}
                                              />
                                            }
                                          />
                                        </div>
                                      </div>
                                    </React.Fragment>
                                  ),
                                  className: classNames(
                                    "__wab_instance",
                                    sty.dialogDelete
                                  ),
                                  onOpenChange: async (...eventArgs: any) => {
                                    generateStateOnChangeProp($state, [
                                      "dialogDelete",
                                      __plasmic_idx_0,
                                      "open"
                                    ]).apply(null, eventArgs);

                                    if (
                                      eventArgs.length > 1 &&
                                      eventArgs[1] &&
                                      eventArgs[1]._plasmic_state_init_
                                    ) {
                                      return;
                                    }
                                  },
                                  open: generateStateValueProp($state, [
                                    "dialogDelete",
                                    __plasmic_idx_0,
                                    "open"
                                  ]),
                                  title: (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__oyH8W
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__nk75G
                                        )}
                                      >
                                        {
                                          "\u062d\u0630\u0641 \u062d\u0633\u0627\u0628 \u0628\u0627\u0646\u06a9\u06cc"
                                        }
                                      </div>
                                      {(() => {
                                        try {
                                          return $state.waitingUserAccount;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <Icon2Icon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg___3B5P4
                                          )}
                                          role={"img"}
                                        />
                                      ) : null}
                                    </div>
                                  ),
                                  trigger: (
                                    <Button2
                                      children2={
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__tlPyl
                                          )}
                                        >
                                          {"\u062d\u0630\u0641"}
                                        </div>
                                      }
                                      color={"red"}
                                      endIcon={
                                        <Icon23Icon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__syrlI
                                          )}
                                          role={"img"}
                                        />
                                      }
                                      size={
                                        hasVariant(
                                          globalVariants,
                                          "screen",
                                          "mobileOnly"
                                        )
                                          ? "minimal"
                                          : "compact"
                                      }
                                      startIcon={
                                        <Icon22Icon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__wIGq
                                          )}
                                          role={"img"}
                                        />
                                      }
                                    />
                                  )
                                };

                                initializePlasmicStates(
                                  $state,
                                  [
                                    {
                                      name: "dialogDelete[].open",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) => undefined
                                    }
                                  ],
                                  [__plasmic_idx_0]
                                );
                                return (
                                  <Dialog
                                    data-plasmic-name={"dialogDelete"}
                                    data-plasmic-override={
                                      overrides.dialogDelete
                                    }
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </div>
                          </div>
                        );
                      })
                    : null}
                  {(() => {
                    try {
                      return (
                        $state.useraccounts.length == 0 &&
                        !$state.waitingUserAccount
                      );
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox___3QYm)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__t18Be
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ipDnc
                          )}
                        >
                          {
                            "\u0644\u0637\u0641\u0627 \u06cc\u06a9 \u062d\u0633\u0627\u0628 \u062c\u062f\u06cc\u062f \u062b\u0628\u062a \u06a9\u0646\u06cc\u062f."
                          }
                        </div>
                      </div>
                    </div>
                  ) : null}
                  <div
                    className={classNames(projectcss.all, sty.freeBox__uDu3K)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__x8S5E)}
                    >
                      {(() => {
                        try {
                          return $state.centerInfo.type_id != 2;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <Dialog
                          data-plasmic-name={"dialog2"}
                          data-plasmic-override={overrides.dialog2}
                          body={
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__mUrgQ
                              )}
                            >
                              <TabsContainer
                                data-plasmic-name={"tabsContainer"}
                                data-plasmic-override={overrides.tabsContainer}
                                initialKey={"tab1"}
                              >
                                <DataCtxReader__>
                                  {$ctx => (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__k5Ywt
                                      )}
                                    >
                                      {(() => {
                                        try {
                                          return $state.centerInfo.type_id == 2;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__brxRe
                                          )}
                                        >
                                          <TabButton
                                            className={classNames(
                                              "__wab_instance",
                                              sty.tabButton__sneAj
                                            )}
                                            tabKey={"tab1"}
                                          >
                                            <Button
                                              children2={
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__vTzm4
                                                  )}
                                                >
                                                  {
                                                    "\u062b\u0628\u062a \u0628\u0627 \u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a"
                                                  }
                                                </div>
                                              }
                                              className={classNames(
                                                "__wab_instance",
                                                sty.button__njcTf
                                              )}
                                              color={"text"}
                                              onClick={async event => {
                                                const $steps = {};

                                                $steps["updateCardInquiry"] =
                                                  true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          variable: {
                                                            objRoot: $state,
                                                            variablePath: [
                                                              "cardInquiry"
                                                            ]
                                                          },
                                                          operation: 0,
                                                          value: {}
                                                        };
                                                        return (({
                                                          variable,
                                                          value,
                                                          startIndex,
                                                          deleteCount
                                                        }) => {
                                                          if (!variable) {
                                                            return;
                                                          }
                                                          const {
                                                            objRoot,
                                                            variablePath
                                                          } = variable;

                                                          $stateSet(
                                                            objRoot,
                                                            variablePath,
                                                            value
                                                          );
                                                          return value;
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                if (
                                                  $steps["updateCardInquiry"] !=
                                                    null &&
                                                  typeof $steps[
                                                    "updateCardInquiry"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "updateCardInquiry"
                                                  ].then === "function"
                                                ) {
                                                  $steps["updateCardInquiry"] =
                                                    await $steps[
                                                      "updateCardInquiry"
                                                    ];
                                                }
                                              }}
                                            />
                                          </TabButton>
                                          <TabButton
                                            className={classNames(
                                              "__wab_instance",
                                              sty.tabButton___9U3SR
                                            )}
                                            tabKey={"tab2"}
                                          >
                                            <Button
                                              children2={
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__eHdgV
                                                  )}
                                                >
                                                  {
                                                    "\u062b\u0628\u062a \u0628\u0627 \u0634\u0645\u0627\u0631\u0647 \u0634\u0628\u0627"
                                                  }
                                                </div>
                                              }
                                              className={classNames(
                                                "__wab_instance",
                                                sty.button__l80IW
                                              )}
                                              color={"text"}
                                              onClick={async event => {
                                                const $steps = {};

                                                $steps["updateCardInquiry"] =
                                                  true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          variable: {
                                                            objRoot: $state,
                                                            variablePath: [
                                                              "cardInquiry"
                                                            ]
                                                          },
                                                          operation: 0,
                                                          value: {}
                                                        };
                                                        return (({
                                                          variable,
                                                          value,
                                                          startIndex,
                                                          deleteCount
                                                        }) => {
                                                          if (!variable) {
                                                            return;
                                                          }
                                                          const {
                                                            objRoot,
                                                            variablePath
                                                          } = variable;

                                                          $stateSet(
                                                            objRoot,
                                                            variablePath,
                                                            value
                                                          );
                                                          return value;
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                if (
                                                  $steps["updateCardInquiry"] !=
                                                    null &&
                                                  typeof $steps[
                                                    "updateCardInquiry"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "updateCardInquiry"
                                                  ].then === "function"
                                                ) {
                                                  $steps["updateCardInquiry"] =
                                                    await $steps[
                                                      "updateCardInquiry"
                                                    ];
                                                }
                                              }}
                                            />
                                          </TabButton>
                                          <TabUnderline
                                            data-plasmic-name={"tabUnderline"}
                                            data-plasmic-override={
                                              overrides.tabUnderline
                                            }
                                            className={classNames(
                                              "__wab_instance",
                                              sty.tabUnderline
                                            )}
                                          />
                                        </div>
                                      ) : null}
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__t8Ns
                                        )}
                                      >
                                        <TabContent
                                          className={classNames(
                                            "__wab_instance",
                                            sty.tabContent__zYiho
                                          )}
                                          tabKey={"tab1"}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__ohFki
                                            )}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__sDeeX
                                              )}
                                            >
                                              {hasVariant(
                                                globalVariants,
                                                "screen",
                                                "mobileOnly"
                                              ) ? (
                                                <React.Fragment>
                                                  {(() => {
                                                    try {
                                                      return (
                                                        "شماره کارت باید متعلق به شما بوده و با کد ملی" +
                                                        ($state.profile
                                                          .national_id ||
                                                          $state.userData.result
                                                            .national_code) +
                                                        " و شماره موبایل " +
                                                        $state.userData.result
                                                          .cell +
                                                        " بررسی می‌شود."
                                                      );
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "\u0644\u0637\u0641\u0627\u064b \u062a\u0648\u062c\u0647 \u062f\u0627\u0634\u062a\u0647 \u0628\u0627\u0634\u06cc\u062f \u06a9\u0647 \u0628\u0631\u0627\u06cc \u0627\u062f\u0627\u0645\u0647 \u0641\u0631\u0622\u06cc\u0646\u062f\u060c \u0644\u0627\u0632\u0645 \u0627\u0633\u062a \u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a \u062e\u0648\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f. \u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a \u0628\u0627\u06cc\u062f \u0628\u0647 \u0646\u0627\u0645 \u0634\u0645\u0627 \u0628\u0648\u062f\u0647 \u0648 \u0628\u0627 \u06a9\u062f \u0645\u0644\u06cc 123456789 \u0648 \u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 0915369874 \u062b\u0628\u062a \u0634\u062f\u0647 \u0628\u0627\u0634\u062f.";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                </React.Fragment>
                                              ) : (
                                                <React.Fragment>
                                                  {(() => {
                                                    try {
                                                      return (
                                                        "شماره کارت باید متعلق به شما بوده و با کد ملی" +
                                                        ($state.profile
                                                          .national_id ||
                                                          $state.userData.result
                                                            .national_code) +
                                                        " و شماره موبایل " +
                                                        $state.userData.result
                                                          .cell +
                                                        " بررسی می‌شود."
                                                      );
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "\u0644\u0637\u0641\u0627\u064b \u062a\u0648\u062c\u0647 \u062f\u0627\u0634\u062a\u0647 \u0628\u0627\u0634\u06cc\u062f \u06a9\u0647 \u0628\u0631\u0627\u06cc \u0627\u062f\u0627\u0645\u0647 \u0641\u0631\u0622\u06cc\u0646\u062f\u060c \u0644\u0627\u0632\u0645 \u0627\u0633\u062a \u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a \u062e\u0648\u062f \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f. \u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a \u0628\u0627\u06cc\u062f \u0628\u0647 \u0646\u0627\u0645 \u0634\u0645\u0627 \u0628\u0648\u062f\u0647 \u0648 \u0628\u0627 \u06a9\u062f \u0645\u0644\u06cc 123456789 \u0648 \u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644 0915369874 \u062b\u0628\u062a \u0634\u062f\u0647 \u0628\u0627\u0634\u062f.";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                </React.Fragment>
                                              )}
                                            </div>
                                            <PlasmicLink__
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.a,
                                                projectcss.__wab_text,
                                                sty.link__rbCfp
                                              )}
                                              component={Link}
                                              onClick={async event => {
                                                const $steps = {};

                                                $steps["invokeGlobalAction"] =
                                                  true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          args: [
                                                            "https://www.paziresh24.com/dashboard/profile/"
                                                          ]
                                                        };
                                                        return $globalActions[
                                                          "Hamdast.openLink"
                                                        ]?.apply(null, [
                                                          ...actionArgs.args
                                                        ]);
                                                      })()
                                                    : undefined;
                                                if (
                                                  $steps[
                                                    "invokeGlobalAction"
                                                  ] != null &&
                                                  typeof $steps[
                                                    "invokeGlobalAction"
                                                  ] === "object" &&
                                                  typeof $steps[
                                                    "invokeGlobalAction"
                                                  ].then === "function"
                                                ) {
                                                  $steps["invokeGlobalAction"] =
                                                    await $steps[
                                                      "invokeGlobalAction"
                                                    ];
                                                }
                                              }}
                                              platform={"nextjs"}
                                            >
                                              {
                                                "\u0648\u06cc\u0631\u0627\u06cc\u0634 \u0634\u0645\u0627\u0631\u0647 \u0645\u0644\u06cc \u0648 \u0645\u0648\u0628\u0627\u06cc\u0644"
                                              }
                                            </PlasmicLink__>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__oa20O
                                            )}
                                          >
                                            <TextInput
                                              data-plasmic-name={
                                                "txtCardNumber"
                                              }
                                              data-plasmic-override={
                                                overrides.txtCardNumber
                                              }
                                              autoFocus={true}
                                              className={classNames(
                                                "__wab_instance",
                                                sty.txtCardNumber
                                              )}
                                              onChange={async (
                                                ...eventArgs: any
                                              ) => {
                                                ((...eventArgs) => {
                                                  generateStateOnChangeProp(
                                                    $state,
                                                    ["txtCardNumber", "value"]
                                                  )(
                                                    (e =>
                                                      e.target?.value).apply(
                                                      null,
                                                      eventArgs
                                                    )
                                                  );
                                                }).apply(null, eventArgs);

                                                if (
                                                  eventArgs.length > 1 &&
                                                  eventArgs[1] &&
                                                  eventArgs[1]
                                                    ._plasmic_state_init_
                                                ) {
                                                  return;
                                                }
                                              }}
                                              placeholder={
                                                "\u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a \u0631\u0627 \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f (\u063a\u06cc\u0631 \u0627\u0632 \u0628\u0644\u0648 \u0628\u0627\u0646\u06a9)"
                                              }
                                              value={
                                                generateStateValueProp($state, [
                                                  "txtCardNumber",
                                                  "value"
                                                ]) ?? ""
                                              }
                                            />

                                            {(() => {
                                              try {
                                                return (
                                                  $state.txtCardNumber.value
                                                    .length != 16 &&
                                                  $state.txtCardNumber.value
                                                    .length > 0
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return true;
                                                }
                                                throw e;
                                              }
                                            })() ? (
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__zhA6H
                                                )}
                                              >
                                                {
                                                  "\u0644\u0637\u0641\u0627 \u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a \u0631\u0627 \u0628\u0647\u200c\u0635\u0648\u0631\u062a \u0635\u062d\u06cc\u062d \u0648\u0627\u0631\u062f \u06a9\u0646\u06cc\u062f."
                                                }
                                              </div>
                                            ) : null}
                                          </div>
                                          {(() => {
                                            try {
                                              return (
                                                $state.cardInquiry &&
                                                $state.cardInquiry.IBAN &&
                                                $state.cardInquiry.IBAN.length >
                                                  0
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return true;
                                              }
                                              throw e;
                                            }
                                          })() ? (
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__nhyck
                                              )}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__vgFel
                                                )}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__tWdBi
                                                  )}
                                                >
                                                  {
                                                    "\u0646\u0627\u0645 \u0648 \u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc:"
                                                  }
                                                </div>
                                              </div>
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__zYrqJ
                                                )}
                                              >
                                                <TextInput
                                                  data-plasmic-name={
                                                    "txtCardownerName"
                                                  }
                                                  data-plasmic-override={
                                                    overrides.txtCardownerName
                                                  }
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.txtCardownerName
                                                  )}
                                                  isDisabled={true}
                                                  onChange={async (
                                                    ...eventArgs: any
                                                  ) => {
                                                    ((...eventArgs) => {
                                                      generateStateOnChangeProp(
                                                        $state,
                                                        [
                                                          "txtCardownerName",
                                                          "value"
                                                        ]
                                                      )(
                                                        (e =>
                                                          e.target
                                                            ?.value).apply(
                                                          null,
                                                          eventArgs
                                                        )
                                                      );
                                                    }).apply(null, eventArgs);

                                                    if (
                                                      eventArgs.length > 1 &&
                                                      eventArgs[1] &&
                                                      eventArgs[1]
                                                        ._plasmic_state_init_
                                                    ) {
                                                      return;
                                                    }
                                                  }}
                                                  value={
                                                    generateStateValueProp(
                                                      $state,
                                                      [
                                                        "txtCardownerName",
                                                        "value"
                                                      ]
                                                    ) ?? ""
                                                  }
                                                />
                                              </div>
                                            </div>
                                          ) : null}
                                          {(() => {
                                            try {
                                              return (
                                                $state.cardInquiry &&
                                                $state.cardInquiry.IBAN &&
                                                $state.cardInquiry.IBAN.length >
                                                  0
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return true;
                                              }
                                              throw e;
                                            }
                                          })() ? (
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__g86Xw
                                              )}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__fHzWg
                                                )}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__kOgxM
                                                  )}
                                                >
                                                  {"\u0634\u0628\u0627:"}
                                                </div>
                                              </div>
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox___1R0Cu
                                                )}
                                              >
                                                <TextInput
                                                  data-plasmic-name={
                                                    "txtcardIban"
                                                  }
                                                  data-plasmic-override={
                                                    overrides.txtcardIban
                                                  }
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.txtcardIban
                                                  )}
                                                  isDisabled={true}
                                                  onChange={async (
                                                    ...eventArgs: any
                                                  ) => {
                                                    ((...eventArgs) => {
                                                      generateStateOnChangeProp(
                                                        $state,
                                                        ["txtcardIban", "value"]
                                                      )(
                                                        (e =>
                                                          e.target
                                                            ?.value).apply(
                                                          null,
                                                          eventArgs
                                                        )
                                                      );
                                                    }).apply(null, eventArgs);

                                                    if (
                                                      eventArgs.length > 1 &&
                                                      eventArgs[1] &&
                                                      eventArgs[1]
                                                        ._plasmic_state_init_
                                                    ) {
                                                      return;
                                                    }
                                                  }}
                                                  value={
                                                    generateStateValueProp(
                                                      $state,
                                                      ["txtcardIban", "value"]
                                                    ) ?? ""
                                                  }
                                                />
                                              </div>
                                            </div>
                                          ) : null}
                                          {(() => {
                                            try {
                                              return (
                                                $state.cardInquiry &&
                                                $state.cardInquiry.IBAN &&
                                                $state.cardInquiry.IBAN.length >
                                                  0
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return true;
                                              }
                                              throw e;
                                            }
                                          })() ? (
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__kYd2A
                                              )}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__cZe6
                                                )}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__zeO8T
                                                  )}
                                                >
                                                  {"\u0628\u0627\u0646\u06a9:"}
                                                </div>
                                              </div>
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__utCf6
                                                )}
                                              >
                                                <TextInput
                                                  data-plasmic-name={
                                                    "txtcardBank"
                                                  }
                                                  data-plasmic-override={
                                                    overrides.txtcardBank
                                                  }
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.txtcardBank
                                                  )}
                                                  isDisabled={true}
                                                  onChange={async (
                                                    ...eventArgs: any
                                                  ) => {
                                                    ((...eventArgs) => {
                                                      generateStateOnChangeProp(
                                                        $state,
                                                        ["txtcardBank", "value"]
                                                      )(
                                                        (e =>
                                                          e.target
                                                            ?.value).apply(
                                                          null,
                                                          eventArgs
                                                        )
                                                      );
                                                    }).apply(null, eventArgs);

                                                    if (
                                                      eventArgs.length > 1 &&
                                                      eventArgs[1] &&
                                                      eventArgs[1]
                                                        ._plasmic_state_init_
                                                    ) {
                                                      return;
                                                    }
                                                  }}
                                                  value={
                                                    generateStateValueProp(
                                                      $state,
                                                      ["txtcardBank", "value"]
                                                    ) ?? ""
                                                  }
                                                />
                                              </div>
                                            </div>
                                          ) : null}
                                          {(() => {
                                            try {
                                              return (
                                                /*$state.cardInquiry && $state.cardInquiry.IBAN && 
                                        $state.cardInquiry.IBAN.length > 0
                                        $state.txtCardNumber.value.length == 16
                                        */

                                                true
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return true;
                                              }
                                              throw e;
                                            }
                                          })() ? (
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__lTa1E
                                              )}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__xYSuX
                                                )}
                                              />

                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox___2XlgH
                                                )}
                                              >
                                                <Button2
                                                  children2={
                                                    <div
                                                      className={classNames(
                                                        projectcss.all,
                                                        projectcss.__wab_text,
                                                        sty.text__jwjI6
                                                      )}
                                                    >
                                                      {"\u062b\u0628\u062a"}
                                                    </div>
                                                  }
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.button___2GCbB
                                                  )}
                                                  endIcon={
                                                    <ChevronLeftIcon
                                                      className={classNames(
                                                        projectcss.all,
                                                        sty.svg__bKfwR
                                                      )}
                                                      role={"img"}
                                                    />
                                                  }
                                                  isDisabled={(() => {
                                                    try {
                                                      return (
                                                        $state.txtCardNumber
                                                          .value.length != 16 ||
                                                        $state.waitingRegister
                                                      );
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return [];
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                  onClick={async event => {
                                                    const $steps = {};

                                                    $steps[
                                                      "updateInsertAccountMessage"
                                                    ] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            variable: {
                                                              objRoot: $state,
                                                              variablePath: [
                                                                "insertAccountMessage"
                                                              ]
                                                            },
                                                            operation: 0,
                                                            value: ""
                                                          };
                                                          return (({
                                                            variable,
                                                            value,
                                                            startIndex,
                                                            deleteCount
                                                          }) => {
                                                            if (!variable) {
                                                              return;
                                                            }
                                                            const {
                                                              objRoot,
                                                              variablePath
                                                            } = variable;

                                                            $stateSet(
                                                              objRoot,
                                                              variablePath,
                                                              value
                                                            );
                                                            return value;
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps[
                                                        "updateInsertAccountMessage"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "updateInsertAccountMessage"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "updateInsertAccountMessage"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "updateInsertAccountMessage"
                                                      ] = await $steps[
                                                        "updateInsertAccountMessage"
                                                      ];
                                                    }

                                                    $steps[
                                                      "updateWaitingRegister"
                                                    ] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            variable: {
                                                              objRoot: $state,
                                                              variablePath: [
                                                                "waitingRegister"
                                                              ]
                                                            },
                                                            operation: 0,
                                                            value: true
                                                          };
                                                          return (({
                                                            variable,
                                                            value,
                                                            startIndex,
                                                            deleteCount
                                                          }) => {
                                                            if (!variable) {
                                                              return;
                                                            }
                                                            const {
                                                              objRoot,
                                                              variablePath
                                                            } = variable;

                                                            $stateSet(
                                                              objRoot,
                                                              variablePath,
                                                              value
                                                            );
                                                            return value;
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps[
                                                        "updateWaitingRegister"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "updateWaitingRegister"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "updateWaitingRegister"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "updateWaitingRegister"
                                                      ] = await $steps[
                                                        "updateWaitingRegister"
                                                      ];
                                                    }

                                                    $steps["registerAccount"] =
                                                      true
                                                        ? (() => {
                                                            const actionArgs = {
                                                              args: [
                                                                "POST",
                                                                (() => {
                                                                  try {
                                                                    return "https://apigw.paziresh24.com/financialaccount/v1/useraccount";
                                                                  } catch (e) {
                                                                    if (
                                                                      e instanceof
                                                                        TypeError ||
                                                                      e?.plasmicType ===
                                                                        "PlasmicUndefinedDataError"
                                                                    ) {
                                                                      return undefined;
                                                                    }
                                                                    throw e;
                                                                  }
                                                                })(),
                                                                undefined,
                                                                (() => {
                                                                  try {
                                                                    return {
                                                                      cardid:
                                                                        $state
                                                                          .txtCardNumber
                                                                          .value,
                                                                      centerid:
                                                                        $state.currentAccountType ==
                                                                        "centerid"
                                                                          ? $state.currentAccountId
                                                                          : "",
                                                                      iban:
                                                                        $state
                                                                          .txtcardIban
                                                                          .value ||
                                                                        "",
                                                                      account_number:
                                                                        "",
                                                                      bank_name:
                                                                        $state
                                                                          .txtcardBank
                                                                          .value ||
                                                                        "",
                                                                      owner_name:
                                                                        $state
                                                                          .txtCardownerName
                                                                          .value ||
                                                                        ""
                                                                    };
                                                                  } catch (e) {
                                                                    if (
                                                                      e instanceof
                                                                        TypeError ||
                                                                      e?.plasmicType ===
                                                                        "PlasmicUndefinedDataError"
                                                                    ) {
                                                                      return undefined;
                                                                    }
                                                                    throw e;
                                                                  }
                                                                })()
                                                              ]
                                                            };
                                                            return $globalActions[
                                                              "Fragment.apiRequest"
                                                            ]?.apply(null, [
                                                              ...actionArgs.args
                                                            ]);
                                                          })()
                                                        : undefined;
                                                    if (
                                                      $steps[
                                                        "registerAccount"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "registerAccount"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "registerAccount"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "registerAccount"
                                                      ] = await $steps[
                                                        "registerAccount"
                                                      ];
                                                    }

                                                    $steps[
                                                      "updateCbAccountsValue2"
                                                    ] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            variable: {
                                                              objRoot: $state,
                                                              variablePath: [
                                                                "waitingRegister"
                                                              ]
                                                            },
                                                            operation: 0,
                                                            value: false
                                                          };
                                                          return (({
                                                            variable,
                                                            value,
                                                            startIndex,
                                                            deleteCount
                                                          }) => {
                                                            if (!variable) {
                                                              return;
                                                            }
                                                            const {
                                                              objRoot,
                                                              variablePath
                                                            } = variable;

                                                            $stateSet(
                                                              objRoot,
                                                              variablePath,
                                                              value
                                                            );
                                                            return value;
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps[
                                                        "updateCbAccountsValue2"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "updateCbAccountsValue2"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "updateCbAccountsValue2"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "updateCbAccountsValue2"
                                                      ] = await $steps[
                                                        "updateCbAccountsValue2"
                                                      ];
                                                    }

                                                    $steps[
                                                      "updateInsertAccountMessage2"
                                                    ] =
                                                      $steps.registerAccount
                                                        .status != 200
                                                        ? (() => {
                                                            const actionArgs = {
                                                              variable: {
                                                                objRoot: $state,
                                                                variablePath: [
                                                                  "insertAccountMessage"
                                                                ]
                                                              },
                                                              operation: 0,
                                                              value:
                                                                $steps
                                                                  .registerAccount
                                                                  .data.message
                                                            };
                                                            return (({
                                                              variable,
                                                              value,
                                                              startIndex,
                                                              deleteCount
                                                            }) => {
                                                              if (!variable) {
                                                                return;
                                                              }
                                                              const {
                                                                objRoot,
                                                                variablePath
                                                              } = variable;

                                                              $stateSet(
                                                                objRoot,
                                                                variablePath,
                                                                value
                                                              );
                                                              return value;
                                                            })?.apply(null, [
                                                              actionArgs
                                                            ]);
                                                          })()
                                                        : undefined;
                                                    if (
                                                      $steps[
                                                        "updateInsertAccountMessage2"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "updateInsertAccountMessage2"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "updateInsertAccountMessage2"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "updateInsertAccountMessage2"
                                                      ] = await $steps[
                                                        "updateInsertAccountMessage2"
                                                      ];
                                                    }

                                                    $steps[
                                                      "updateCbAccountsValue"
                                                    ] = false
                                                      ? (() => {
                                                          const actionArgs = {
                                                            variable: {
                                                              objRoot: $state,
                                                              variablePath: [
                                                                "cbAccounts",
                                                                "value"
                                                              ]
                                                            },
                                                            operation: 0
                                                          };
                                                          return (({
                                                            variable,
                                                            value,
                                                            startIndex,
                                                            deleteCount
                                                          }) => {
                                                            if (!variable) {
                                                              return;
                                                            }
                                                            const {
                                                              objRoot,
                                                              variablePath
                                                            } = variable;

                                                            $stateSet(
                                                              objRoot,
                                                              variablePath,
                                                              value
                                                            );
                                                            return value;
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps[
                                                        "updateCbAccountsValue"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "updateCbAccountsValue"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "updateCbAccountsValue"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "updateCbAccountsValue"
                                                      ] = await $steps[
                                                        "updateCbAccountsValue"
                                                      ];
                                                    }

                                                    $steps[
                                                      "updateCbAccountsValue3"
                                                    ] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            variable: {
                                                              objRoot: $state,
                                                              variablePath: [
                                                                "loadProfileCount"
                                                              ]
                                                            },
                                                            operation: 2
                                                          };
                                                          return (({
                                                            variable,
                                                            value,
                                                            startIndex,
                                                            deleteCount
                                                          }) => {
                                                            if (!variable) {
                                                              return;
                                                            }
                                                            const {
                                                              objRoot,
                                                              variablePath
                                                            } = variable;

                                                            const oldValue =
                                                              $stateGet(
                                                                objRoot,
                                                                variablePath
                                                              );
                                                            $stateSet(
                                                              objRoot,
                                                              variablePath,
                                                              oldValue + 1
                                                            );
                                                            return oldValue + 1;
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps[
                                                        "updateCbAccountsValue3"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "updateCbAccountsValue3"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "updateCbAccountsValue3"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "updateCbAccountsValue3"
                                                      ] = await $steps[
                                                        "updateCbAccountsValue3"
                                                      ];
                                                    }

                                                    $steps[
                                                      "updateCbAccountsValue4"
                                                    ] =
                                                      $steps.registerAccount
                                                        .status == 200
                                                        ? (() => {
                                                            const actionArgs = {
                                                              args: [
                                                                undefined,
                                                                "\u062d\u0633\u0627\u0628 \u0645\u0648\u0631\u062f \u0646\u0638\u0631 \u062b\u0628\u062a \u06af\u0631\u062f\u06cc\u062f"
                                                              ]
                                                            };
                                                            return $globalActions[
                                                              "Fragment.showToast"
                                                            ]?.apply(null, [
                                                              ...actionArgs.args
                                                            ]);
                                                          })()
                                                        : undefined;
                                                    if (
                                                      $steps[
                                                        "updateCbAccountsValue4"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "updateCbAccountsValue4"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "updateCbAccountsValue4"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "updateCbAccountsValue4"
                                                      ] = await $steps[
                                                        "updateCbAccountsValue4"
                                                      ];
                                                    }

                                                    $steps[
                                                      "updateCbAccountsValue5"
                                                    ] =
                                                      $steps.registerAccount
                                                        .status != 200
                                                        ? (() => {
                                                            const actionArgs = {
                                                              args: [
                                                                "error",
                                                                (() => {
                                                                  try {
                                                                    return (
                                                                      "خطا در ثبت حساب: " +
                                                                      $state.insertAccountMessage
                                                                    );
                                                                  } catch (e) {
                                                                    if (
                                                                      e instanceof
                                                                        TypeError ||
                                                                      e?.plasmicType ===
                                                                        "PlasmicUndefinedDataError"
                                                                    ) {
                                                                      return undefined;
                                                                    }
                                                                    throw e;
                                                                  }
                                                                })()
                                                              ]
                                                            };
                                                            return $globalActions[
                                                              "Fragment.showToast"
                                                            ]?.apply(null, [
                                                              ...actionArgs.args
                                                            ]);
                                                          })()
                                                        : undefined;
                                                    if (
                                                      $steps[
                                                        "updateCbAccountsValue5"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "updateCbAccountsValue5"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "updateCbAccountsValue5"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "updateCbAccountsValue5"
                                                      ] = await $steps[
                                                        "updateCbAccountsValue5"
                                                      ];
                                                    }

                                                    $steps[
                                                      "updateCbAccountsValue6"
                                                    ] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            customFunction:
                                                              async () => {
                                                                return ($state.dialog2.open =
                                                                  false);
                                                              }
                                                          };
                                                          return (({
                                                            customFunction
                                                          }) => {
                                                            return customFunction();
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps[
                                                        "updateCbAccountsValue6"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "updateCbAccountsValue6"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "updateCbAccountsValue6"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "updateCbAccountsValue6"
                                                      ] = await $steps[
                                                        "updateCbAccountsValue6"
                                                      ];
                                                    }

                                                    $steps["editprofileShow"] =
                                                      $steps.registerAccount
                                                        .status == 403
                                                        ? (() => {
                                                            const actionArgs = {
                                                              variable: {
                                                                objRoot: $state,
                                                                variablePath: [
                                                                  "editProfileShow"
                                                                ]
                                                              },
                                                              operation: 0,
                                                              value: true
                                                            };
                                                            return (({
                                                              variable,
                                                              value,
                                                              startIndex,
                                                              deleteCount
                                                            }) => {
                                                              if (!variable) {
                                                                return;
                                                              }
                                                              const {
                                                                objRoot,
                                                                variablePath
                                                              } = variable;

                                                              $stateSet(
                                                                objRoot,
                                                                variablePath,
                                                                value
                                                              );
                                                              return value;
                                                            })?.apply(null, [
                                                              actionArgs
                                                            ]);
                                                          })()
                                                        : undefined;
                                                    if (
                                                      $steps[
                                                        "editprofileShow"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "editprofileShow"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "editprofileShow"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "editprofileShow"
                                                      ] = await $steps[
                                                        "editprofileShow"
                                                      ];
                                                    }
                                                  }}
                                                  size={
                                                    hasVariant(
                                                      globalVariants,
                                                      "screen",
                                                      "mobileOnly"
                                                    )
                                                      ? "compact"
                                                      : undefined
                                                  }
                                                  startIcon={
                                                    <ChevronRightIcon
                                                      className={classNames(
                                                        projectcss.all,
                                                        sty.svg__bnKsf
                                                      )}
                                                      role={"img"}
                                                    />
                                                  }
                                                />
                                              </div>
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__ydYu9
                                                )}
                                              />
                                            </div>
                                          ) : null}
                                        </TabContent>
                                        <TabContent
                                          className={classNames(
                                            "__wab_instance",
                                            sty.tabContent__eiTbd
                                          )}
                                          tabKey={"tab2"}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__yq0Zf
                                            )}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__jdqCr
                                              )}
                                            >
                                              <TextInput
                                                data-plasmic-name={"txtIban"}
                                                data-plasmic-override={
                                                  overrides.txtIban
                                                }
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.txtIban
                                                )}
                                                onChange={async (
                                                  ...eventArgs: any
                                                ) => {
                                                  ((...eventArgs) => {
                                                    generateStateOnChangeProp(
                                                      $state,
                                                      ["txtIban", "value"]
                                                    )(
                                                      (e =>
                                                        e.target?.value).apply(
                                                        null,
                                                        eventArgs
                                                      )
                                                    );
                                                  }).apply(null, eventArgs);

                                                  if (
                                                    eventArgs.length > 1 &&
                                                    eventArgs[1] &&
                                                    eventArgs[1]
                                                      ._plasmic_state_init_
                                                  ) {
                                                    return;
                                                  }

                                                  (async event => {
                                                    const $steps = {};

                                                    $steps[
                                                      "updateIbanInquiry"
                                                    ] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            variable: {
                                                              objRoot: $state,
                                                              variablePath: [
                                                                "ibanInquiry"
                                                              ]
                                                            },
                                                            operation: 0,
                                                            value: {}
                                                          };
                                                          return (({
                                                            variable,
                                                            value,
                                                            startIndex,
                                                            deleteCount
                                                          }) => {
                                                            if (!variable) {
                                                              return;
                                                            }
                                                            const {
                                                              objRoot,
                                                              variablePath
                                                            } = variable;

                                                            $stateSet(
                                                              objRoot,
                                                              variablePath,
                                                              value
                                                            );
                                                            return value;
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps[
                                                        "updateIbanInquiry"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "updateIbanInquiry"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "updateIbanInquiry"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "updateIbanInquiry"
                                                      ] = await $steps[
                                                        "updateIbanInquiry"
                                                      ];
                                                    }
                                                  }).apply(null, eventArgs);
                                                }}
                                                placeholder={
                                                  "\u0644\u0637\u0641\u0627 \u0634\u0645\u0627\u0631\u0647 \u0634\u0628\u0627 \u0631\u0627 \u0648\u0627\u0631\u062f \u0646\u0645\u0627\u06cc\u06cc\u062f"
                                                }
                                                value={
                                                  generateStateValueProp(
                                                    $state,
                                                    ["txtIban", "value"]
                                                  ) ?? ""
                                                }
                                              />

                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__a1APy
                                                )}
                                              >
                                                {"IR"}
                                              </div>
                                            </div>
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__qfMli
                                              )}
                                            >
                                              <Button
                                                children2={
                                                  "\u0627\u0633\u062a\u0639\u0644\u0627\u0645"
                                                }
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.button__w1Aaw
                                                )}
                                                onClick={async event => {
                                                  const $steps = {};

                                                  $steps[
                                                    "updateIbanInquiryCount"
                                                  ] = true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          variable: {
                                                            objRoot: $state,
                                                            variablePath: [
                                                              "ibanInquiryCount"
                                                            ]
                                                          },
                                                          operation: 2
                                                        };
                                                        return (({
                                                          variable,
                                                          value,
                                                          startIndex,
                                                          deleteCount
                                                        }) => {
                                                          if (!variable) {
                                                            return;
                                                          }
                                                          const {
                                                            objRoot,
                                                            variablePath
                                                          } = variable;

                                                          const oldValue =
                                                            $stateGet(
                                                              objRoot,
                                                              variablePath
                                                            );
                                                          $stateSet(
                                                            objRoot,
                                                            variablePath,
                                                            oldValue + 1
                                                          );
                                                          return oldValue + 1;
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                  if (
                                                    $steps[
                                                      "updateIbanInquiryCount"
                                                    ] != null &&
                                                    typeof $steps[
                                                      "updateIbanInquiryCount"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "updateIbanInquiryCount"
                                                    ].then === "function"
                                                  ) {
                                                    $steps[
                                                      "updateIbanInquiryCount"
                                                    ] = await $steps[
                                                      "updateIbanInquiryCount"
                                                    ];
                                                  }

                                                  $steps["updateIbanInquiry"] =
                                                    true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            variable: {
                                                              objRoot: $state,
                                                              variablePath: [
                                                                "ibanInquiry"
                                                              ]
                                                            },
                                                            operation: 0,
                                                            value: {}
                                                          };
                                                          return (({
                                                            variable,
                                                            value,
                                                            startIndex,
                                                            deleteCount
                                                          }) => {
                                                            if (!variable) {
                                                              return;
                                                            }
                                                            const {
                                                              objRoot,
                                                              variablePath
                                                            } = variable;

                                                            $stateSet(
                                                              objRoot,
                                                              variablePath,
                                                              value
                                                            );
                                                            return value;
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                  if (
                                                    $steps[
                                                      "updateIbanInquiry"
                                                    ] != null &&
                                                    typeof $steps[
                                                      "updateIbanInquiry"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "updateIbanInquiry"
                                                    ].then === "function"
                                                  ) {
                                                    $steps[
                                                      "updateIbanInquiry"
                                                    ] = await $steps[
                                                      "updateIbanInquiry"
                                                    ];
                                                  }
                                                }}
                                              />
                                            </div>
                                          </div>
                                          {(() => {
                                            try {
                                              return (
                                                $state.ibanInquiry.data !=
                                                undefined
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return true;
                                              }
                                              throw e;
                                            }
                                          })() ? (
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__oVfr
                                              )}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__nAenQ
                                                )}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__ilSfp
                                                  )}
                                                >
                                                  {
                                                    "\u0646\u0627\u0645 \u0648 \u0646\u0627\u0645 \u062e\u0627\u0646\u0648\u0627\u062f\u06af\u06cc:"
                                                  }
                                                </div>
                                              </div>
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__zApL7
                                                )}
                                              >
                                                <TextInput
                                                  data-plasmic-name={
                                                    "txtibanownerName"
                                                  }
                                                  data-plasmic-override={
                                                    overrides.txtibanownerName
                                                  }
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.txtibanownerName
                                                  )}
                                                  isDisabled={true}
                                                  onChange={async (
                                                    ...eventArgs: any
                                                  ) => {
                                                    ((...eventArgs) => {
                                                      generateStateOnChangeProp(
                                                        $state,
                                                        [
                                                          "txtibanownerName",
                                                          "value"
                                                        ]
                                                      )(
                                                        (e =>
                                                          e.target
                                                            ?.value).apply(
                                                          null,
                                                          eventArgs
                                                        )
                                                      );
                                                    }).apply(null, eventArgs);

                                                    if (
                                                      eventArgs.length > 1 &&
                                                      eventArgs[1] &&
                                                      eventArgs[1]
                                                        ._plasmic_state_init_
                                                    ) {
                                                      return;
                                                    }
                                                  }}
                                                  value={
                                                    generateStateValueProp(
                                                      $state,
                                                      [
                                                        "txtibanownerName",
                                                        "value"
                                                      ]
                                                    ) ?? ""
                                                  }
                                                />
                                              </div>
                                            </div>
                                          ) : null}
                                          {(() => {
                                            try {
                                              return (
                                                $state.ibanInquiry.data !=
                                                undefined
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return true;
                                              }
                                              throw e;
                                            }
                                          })() ? (
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__eDnh1
                                              )}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox___7X7K
                                                )}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__yhQsw
                                                  )}
                                                >
                                                  {
                                                    "\u0634\u0645\u0627\u0631\u0647 \u062d\u0633\u0627\u0628:"
                                                  }
                                                </div>
                                              </div>
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__pzPCw
                                                )}
                                              >
                                                <TextInput
                                                  data-plasmic-name={
                                                    "txtIbanaccountNumber"
                                                  }
                                                  data-plasmic-override={
                                                    overrides.txtIbanaccountNumber
                                                  }
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.txtIbanaccountNumber
                                                  )}
                                                  isDisabled={true}
                                                  onChange={async (
                                                    ...eventArgs: any
                                                  ) => {
                                                    ((...eventArgs) => {
                                                      generateStateOnChangeProp(
                                                        $state,
                                                        [
                                                          "txtIbanaccountNumber",
                                                          "value"
                                                        ]
                                                      )(
                                                        (e =>
                                                          e.target
                                                            ?.value).apply(
                                                          null,
                                                          eventArgs
                                                        )
                                                      );
                                                    }).apply(null, eventArgs);

                                                    if (
                                                      eventArgs.length > 1 &&
                                                      eventArgs[1] &&
                                                      eventArgs[1]
                                                        ._plasmic_state_init_
                                                    ) {
                                                      return;
                                                    }
                                                  }}
                                                  value={
                                                    generateStateValueProp(
                                                      $state,
                                                      [
                                                        "txtIbanaccountNumber",
                                                        "value"
                                                      ]
                                                    ) ?? ""
                                                  }
                                                />
                                              </div>
                                            </div>
                                          ) : null}
                                          {(() => {
                                            try {
                                              return (
                                                $state.ibanInquiry.data !=
                                                undefined
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return true;
                                              }
                                              throw e;
                                            }
                                          })() ? (
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox___0BCy3
                                              )}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__kFeIn
                                                )}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__a5F1K
                                                  )}
                                                >
                                                  {"\u0628\u0627\u0646\u06a9:"}
                                                </div>
                                              </div>
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__eHjT5
                                                )}
                                              >
                                                <TextInput
                                                  data-plasmic-name={
                                                    "txtIbaNbankName"
                                                  }
                                                  data-plasmic-override={
                                                    overrides.txtIbaNbankName
                                                  }
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.txtIbaNbankName
                                                  )}
                                                  isDisabled={true}
                                                  onChange={async (
                                                    ...eventArgs: any
                                                  ) => {
                                                    ((...eventArgs) => {
                                                      generateStateOnChangeProp(
                                                        $state,
                                                        [
                                                          "txtIbaNbankName",
                                                          "value"
                                                        ]
                                                      )(
                                                        (e =>
                                                          e.target
                                                            ?.value).apply(
                                                          null,
                                                          eventArgs
                                                        )
                                                      );
                                                    }).apply(null, eventArgs);

                                                    if (
                                                      eventArgs.length > 1 &&
                                                      eventArgs[1] &&
                                                      eventArgs[1]
                                                        ._plasmic_state_init_
                                                    ) {
                                                      return;
                                                    }
                                                  }}
                                                  value={
                                                    generateStateValueProp(
                                                      $state,
                                                      [
                                                        "txtIbaNbankName",
                                                        "value"
                                                      ]
                                                    ) ?? ""
                                                  }
                                                />
                                              </div>
                                            </div>
                                          ) : null}
                                          {(() => {
                                            try {
                                              return (
                                                $state.ibanInquiry.data !=
                                                undefined
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return true;
                                              }
                                              throw e;
                                            }
                                          })() ? (
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__qc7VY
                                              )}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox___1YzRs
                                                )}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    projectcss.__wab_text,
                                                    sty.text__suAvn
                                                  )}
                                                >
                                                  {
                                                    "\u0634\u0646\u0627\u0633\u0647 \u0648\u0627\u0631\u06cc\u0632:"
                                                  }
                                                </div>
                                              </div>
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__hswDl
                                                )}
                                              >
                                                <TextInput
                                                  data-plasmic-name={
                                                    "txtIbanPaymentNumber"
                                                  }
                                                  data-plasmic-override={
                                                    overrides.txtIbanPaymentNumber
                                                  }
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.txtIbanPaymentNumber
                                                  )}
                                                  onChange={async (
                                                    ...eventArgs: any
                                                  ) => {
                                                    ((...eventArgs) => {
                                                      generateStateOnChangeProp(
                                                        $state,
                                                        [
                                                          "txtIbanPaymentNumber",
                                                          "value"
                                                        ]
                                                      )(
                                                        (e =>
                                                          e.target
                                                            ?.value).apply(
                                                          null,
                                                          eventArgs
                                                        )
                                                      );
                                                    }).apply(null, eventArgs);

                                                    if (
                                                      eventArgs.length > 1 &&
                                                      eventArgs[1] &&
                                                      eventArgs[1]
                                                        ._plasmic_state_init_
                                                    ) {
                                                      return;
                                                    }
                                                  }}
                                                  placeholder={
                                                    "\u0634\u0646\u0627\u0633\u0647 \u0648\u0627\u0631\u06cc\u0632 \u062f\u0631 \u0635\u0648\u0631\u062a \u0644\u0632\u0648\u0645"
                                                  }
                                                  value={
                                                    generateStateValueProp(
                                                      $state,
                                                      [
                                                        "txtIbanPaymentNumber",
                                                        "value"
                                                      ]
                                                    ) ?? ""
                                                  }
                                                />
                                              </div>
                                            </div>
                                          ) : null}
                                          {(() => {
                                            try {
                                              return (
                                                $state.ibanInquiry.data !=
                                                undefined
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return true;
                                              }
                                              throw e;
                                            }
                                          })() ? (
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__c5G1I
                                              )}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__k5P1L
                                                )}
                                              />

                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__uLwA
                                                )}
                                              >
                                                <Button2
                                                  children2={
                                                    <div
                                                      className={classNames(
                                                        projectcss.all,
                                                        projectcss.__wab_text,
                                                        sty.text__lTxlH
                                                      )}
                                                    >
                                                      {"\u062b\u0628\u062a"}
                                                    </div>
                                                  }
                                                  className={classNames(
                                                    "__wab_instance",
                                                    sty.button__keoFd
                                                  )}
                                                  endIcon={
                                                    <ChevronLeftIcon
                                                      className={classNames(
                                                        projectcss.all,
                                                        sty.svg__dItAy
                                                      )}
                                                      role={"img"}
                                                    />
                                                  }
                                                  onClick={async event => {
                                                    const $steps = {};

                                                    $steps[
                                                      "updateInsertAccountMessage"
                                                    ] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            variable: {
                                                              objRoot: $state,
                                                              variablePath: [
                                                                "insertAccountMessage"
                                                              ]
                                                            },
                                                            operation: 0,
                                                            value: ""
                                                          };
                                                          return (({
                                                            variable,
                                                            value,
                                                            startIndex,
                                                            deleteCount
                                                          }) => {
                                                            if (!variable) {
                                                              return;
                                                            }
                                                            const {
                                                              objRoot,
                                                              variablePath
                                                            } = variable;

                                                            $stateSet(
                                                              objRoot,
                                                              variablePath,
                                                              value
                                                            );
                                                            return value;
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps[
                                                        "updateInsertAccountMessage"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "updateInsertAccountMessage"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "updateInsertAccountMessage"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "updateInsertAccountMessage"
                                                      ] = await $steps[
                                                        "updateInsertAccountMessage"
                                                      ];
                                                    }

                                                    $steps[
                                                      "updateWaitingRegister"
                                                    ] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            variable: {
                                                              objRoot: $state,
                                                              variablePath: [
                                                                "waitingRegister"
                                                              ]
                                                            },
                                                            operation: 0,
                                                            value: true
                                                          };
                                                          return (({
                                                            variable,
                                                            value,
                                                            startIndex,
                                                            deleteCount
                                                          }) => {
                                                            if (!variable) {
                                                              return;
                                                            }
                                                            const {
                                                              objRoot,
                                                              variablePath
                                                            } = variable;

                                                            $stateSet(
                                                              objRoot,
                                                              variablePath,
                                                              value
                                                            );
                                                            return value;
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps[
                                                        "updateWaitingRegister"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "updateWaitingRegister"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "updateWaitingRegister"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "updateWaitingRegister"
                                                      ] = await $steps[
                                                        "updateWaitingRegister"
                                                      ];
                                                    }

                                                    $steps["registerAccount"] =
                                                      true
                                                        ? (() => {
                                                            const actionArgs = {
                                                              args: [
                                                                "POST",
                                                                (() => {
                                                                  try {
                                                                    return "https://apigw.paziresh24.com/financialaccount/v1/useraccount";
                                                                  } catch (e) {
                                                                    if (
                                                                      e instanceof
                                                                        TypeError ||
                                                                      e?.plasmicType ===
                                                                        "PlasmicUndefinedDataError"
                                                                    ) {
                                                                      return undefined;
                                                                    }
                                                                    throw e;
                                                                  }
                                                                })(),
                                                                undefined,
                                                                (() => {
                                                                  try {
                                                                    return {
                                                                      iban:
                                                                        "IR" +
                                                                        $state
                                                                          .txtIban
                                                                          .value,
                                                                      centerid:
                                                                        $state.currentAccountType ==
                                                                        "centerid"
                                                                          ? $state.currentAccountId
                                                                          : "",
                                                                      payment_number:
                                                                        $state
                                                                          .txtIbanPaymentNumber
                                                                          .value,
                                                                      account_number:
                                                                        $state
                                                                          .txtIbanaccountNumber
                                                                          .value,
                                                                      bank_name:
                                                                        $state
                                                                          .txtIbaNbankName
                                                                          .value,
                                                                      owner_name:
                                                                        $state
                                                                          .txtibanownerName
                                                                          .value
                                                                    };
                                                                  } catch (e) {
                                                                    if (
                                                                      e instanceof
                                                                        TypeError ||
                                                                      e?.plasmicType ===
                                                                        "PlasmicUndefinedDataError"
                                                                    ) {
                                                                      return undefined;
                                                                    }
                                                                    throw e;
                                                                  }
                                                                })()
                                                              ]
                                                            };
                                                            return $globalActions[
                                                              "Fragment.apiRequest"
                                                            ]?.apply(null, [
                                                              ...actionArgs.args
                                                            ]);
                                                          })()
                                                        : undefined;
                                                    if (
                                                      $steps[
                                                        "registerAccount"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "registerAccount"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "registerAccount"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "registerAccount"
                                                      ] = await $steps[
                                                        "registerAccount"
                                                      ];
                                                    }

                                                    $steps[
                                                      "updateInsertAccountMessage2"
                                                    ] =
                                                      $steps.registerAccount
                                                        .status != 200
                                                        ? (() => {
                                                            const actionArgs = {
                                                              variable: {
                                                                objRoot: $state,
                                                                variablePath: [
                                                                  "insertAccountMessage"
                                                                ]
                                                              },
                                                              operation: 0,
                                                              value:
                                                                $steps
                                                                  .registerAccount
                                                                  .data.message
                                                            };
                                                            return (({
                                                              variable,
                                                              value,
                                                              startIndex,
                                                              deleteCount
                                                            }) => {
                                                              if (!variable) {
                                                                return;
                                                              }
                                                              const {
                                                                objRoot,
                                                                variablePath
                                                              } = variable;

                                                              $stateSet(
                                                                objRoot,
                                                                variablePath,
                                                                value
                                                              );
                                                              return value;
                                                            })?.apply(null, [
                                                              actionArgs
                                                            ]);
                                                          })()
                                                        : undefined;
                                                    if (
                                                      $steps[
                                                        "updateInsertAccountMessage2"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "updateInsertAccountMessage2"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "updateInsertAccountMessage2"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "updateInsertAccountMessage2"
                                                      ] = await $steps[
                                                        "updateInsertAccountMessage2"
                                                      ];
                                                    }

                                                    $steps[
                                                      "updateCbAccountsValue2"
                                                    ] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            variable: {
                                                              objRoot: $state,
                                                              variablePath: [
                                                                "waitingRegister"
                                                              ]
                                                            },
                                                            operation: 0,
                                                            value: false
                                                          };
                                                          return (({
                                                            variable,
                                                            value,
                                                            startIndex,
                                                            deleteCount
                                                          }) => {
                                                            if (!variable) {
                                                              return;
                                                            }
                                                            const {
                                                              objRoot,
                                                              variablePath
                                                            } = variable;

                                                            $stateSet(
                                                              objRoot,
                                                              variablePath,
                                                              value
                                                            );
                                                            return value;
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps[
                                                        "updateCbAccountsValue2"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "updateCbAccountsValue2"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "updateCbAccountsValue2"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "updateCbAccountsValue2"
                                                      ] = await $steps[
                                                        "updateCbAccountsValue2"
                                                      ];
                                                    }

                                                    $steps[
                                                      "updateCbAccountsValue3"
                                                    ] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            variable: {
                                                              objRoot: $state,
                                                              variablePath: [
                                                                "loadProfileCount"
                                                              ]
                                                            },
                                                            operation: 2
                                                          };
                                                          return (({
                                                            variable,
                                                            value,
                                                            startIndex,
                                                            deleteCount
                                                          }) => {
                                                            if (!variable) {
                                                              return;
                                                            }
                                                            const {
                                                              objRoot,
                                                              variablePath
                                                            } = variable;

                                                            const oldValue =
                                                              $stateGet(
                                                                objRoot,
                                                                variablePath
                                                              );
                                                            $stateSet(
                                                              objRoot,
                                                              variablePath,
                                                              oldValue + 1
                                                            );
                                                            return oldValue + 1;
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps[
                                                        "updateCbAccountsValue3"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "updateCbAccountsValue3"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "updateCbAccountsValue3"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "updateCbAccountsValue3"
                                                      ] = await $steps[
                                                        "updateCbAccountsValue3"
                                                      ];
                                                    }

                                                    $steps[
                                                      "updateCbAccountsValue4"
                                                    ] =
                                                      $steps.registerAccount
                                                        .status == 200
                                                        ? (() => {
                                                            const actionArgs = {
                                                              args: [
                                                                undefined,
                                                                "\u062d\u0633\u0627\u0628 \u0645\u0648\u0631\u062f \u0646\u0638\u0631 \u062b\u0628\u062a \u06af\u0631\u062f\u06cc\u062f"
                                                              ]
                                                            };
                                                            return $globalActions[
                                                              "Fragment.showToast"
                                                            ]?.apply(null, [
                                                              ...actionArgs.args
                                                            ]);
                                                          })()
                                                        : undefined;
                                                    if (
                                                      $steps[
                                                        "updateCbAccountsValue4"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "updateCbAccountsValue4"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "updateCbAccountsValue4"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "updateCbAccountsValue4"
                                                      ] = await $steps[
                                                        "updateCbAccountsValue4"
                                                      ];
                                                    }

                                                    $steps[
                                                      "updateCbAccountsValue5"
                                                    ] =
                                                      $steps.registerAccount
                                                        .status != 200
                                                        ? (() => {
                                                            const actionArgs = {
                                                              args: [
                                                                "error",
                                                                (() => {
                                                                  try {
                                                                    return (
                                                                      "خطا در ثبت حساب: " +
                                                                      $state.insertAccountMessage
                                                                    );
                                                                  } catch (e) {
                                                                    if (
                                                                      e instanceof
                                                                        TypeError ||
                                                                      e?.plasmicType ===
                                                                        "PlasmicUndefinedDataError"
                                                                    ) {
                                                                      return undefined;
                                                                    }
                                                                    throw e;
                                                                  }
                                                                })()
                                                              ]
                                                            };
                                                            return $globalActions[
                                                              "Fragment.showToast"
                                                            ]?.apply(null, [
                                                              ...actionArgs.args
                                                            ]);
                                                          })()
                                                        : undefined;
                                                    if (
                                                      $steps[
                                                        "updateCbAccountsValue5"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "updateCbAccountsValue5"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "updateCbAccountsValue5"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "updateCbAccountsValue5"
                                                      ] = await $steps[
                                                        "updateCbAccountsValue5"
                                                      ];
                                                    }

                                                    $steps[
                                                      "updateCbAccountsValue6"
                                                    ] = true
                                                      ? (() => {
                                                          const actionArgs = {
                                                            customFunction:
                                                              async () => {
                                                                return ($state.dialog2.open =
                                                                  false);
                                                              }
                                                          };
                                                          return (({
                                                            customFunction
                                                          }) => {
                                                            return customFunction();
                                                          })?.apply(null, [
                                                            actionArgs
                                                          ]);
                                                        })()
                                                      : undefined;
                                                    if (
                                                      $steps[
                                                        "updateCbAccountsValue6"
                                                      ] != null &&
                                                      typeof $steps[
                                                        "updateCbAccountsValue6"
                                                      ] === "object" &&
                                                      typeof $steps[
                                                        "updateCbAccountsValue6"
                                                      ].then === "function"
                                                    ) {
                                                      $steps[
                                                        "updateCbAccountsValue6"
                                                      ] = await $steps[
                                                        "updateCbAccountsValue6"
                                                      ];
                                                    }
                                                  }}
                                                  size={
                                                    hasVariant(
                                                      globalVariants,
                                                      "screen",
                                                      "mobileOnly"
                                                    )
                                                      ? "compact"
                                                      : undefined
                                                  }
                                                  startIcon={
                                                    <ChevronRightIcon
                                                      className={classNames(
                                                        projectcss.all,
                                                        sty.svg__oLjHe
                                                      )}
                                                      role={"img"}
                                                    />
                                                  }
                                                />
                                              </div>
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__pvw2
                                                )}
                                              />
                                            </div>
                                          ) : null}
                                        </TabContent>
                                      </div>
                                    </div>
                                  )}
                                </DataCtxReader__>
                              </TabsContainer>
                            </div>
                          }
                          className={classNames("__wab_instance", sty.dialog2)}
                          onOpenChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "dialog2",
                              "open"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          open={generateStateValueProp($state, [
                            "dialog2",
                            "open"
                          ])}
                          title={
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__mEVje
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ucIxy
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return (
                                        "ثبت شماره کارت" +
                                        ($state.currentAccountType == "centerid"
                                          ? " برای " +
                                            $state.currentAccountTitle
                                          : "")
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                              {(() => {
                                try {
                                  return $state.waitingRegister;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <Icon2Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__gOLu4
                                  )}
                                  role={"img"}
                                />
                              ) : null}
                            </div>
                          }
                          trigger={
                            <Button2
                              children2={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__de3
                                  )}
                                >
                                  {
                                    "\u062d\u0633\u0627\u0628 \u062c\u062f\u06cc\u062f"
                                  }
                                </div>
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.button___3ZAdi
                              )}
                              endIcon={
                                <Icon23Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg___1RvSh
                                  )}
                                  role={"img"}
                                />
                              }
                              onClick={async event => {
                                const $steps = {};

                                $steps["updateWaitingRegister"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        variable: {
                                          objRoot: $state,
                                          variablePath: ["waitingRegister"]
                                        },
                                        operation: 0,
                                        value: false
                                      };
                                      return (({
                                        variable,
                                        value,
                                        startIndex,
                                        deleteCount
                                      }) => {
                                        if (!variable) {
                                          return;
                                        }
                                        const { objRoot, variablePath } =
                                          variable;

                                        $stateSet(objRoot, variablePath, value);
                                        return value;
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["updateWaitingRegister"] != null &&
                                  typeof $steps["updateWaitingRegister"] ===
                                    "object" &&
                                  typeof $steps["updateWaitingRegister"]
                                    .then === "function"
                                ) {
                                  $steps["updateWaitingRegister"] =
                                    await $steps["updateWaitingRegister"];
                                }
                              }}
                              size={"compact"}
                              startIcon={
                                <Icon22Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__wPfF
                                  )}
                                  role={"img"}
                                />
                              }
                            />
                          }
                        />
                      ) : null}
                      {(() => {
                        try {
                          return $state.editProfileShow;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <Button
                          children2={
                            "\u0648\u06cc\u0631\u0627\u06cc\u0634 \u0634\u0645\u0627\u0631\u0647 \u0645\u0644\u06cc \u0648 \u0645\u0648\u0628\u0627\u06cc\u0644"
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.button__abhsC
                          )}
                          color={"softBlue"}
                          onClick={async event => {
                            const $steps = {};

                            $steps["invokeGlobalAction"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "https://www.paziresh24.com/dashboard/profile/"
                                    ]
                                  };
                                  return $globalActions[
                                    "Hamdast.openLink"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["invokeGlobalAction"] != null &&
                              typeof $steps["invokeGlobalAction"] ===
                                "object" &&
                              typeof $steps["invokeGlobalAction"].then ===
                                "function"
                            ) {
                              $steps["invokeGlobalAction"] = await $steps[
                                "invokeGlobalAction"
                              ];
                            }
                          }}
                          size={"compact"}
                        />
                      ) : null}
                    </div>
                    <SideEffect
                      data-plasmic-name={"sideEffectGetCardInquiry2"}
                      data-plasmic-override={
                        overrides.sideEffectGetCardInquiry2
                      }
                      className={classNames(
                        "__wab_instance",
                        sty.sideEffectGetCardInquiry2
                      )}
                      deps={(() => {
                        try {
                          return [$state.txtCardNumber.value];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      onMount={async () => {
                        const $steps = {};

                        $steps["updateWaitingRegister3"] =
                          $state.txtCardNumber.value.length != 16 && false
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["waitingRegister"]
                                  },
                                  operation: 0,
                                  value: false
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["updateWaitingRegister3"] != null &&
                          typeof $steps["updateWaitingRegister3"] ===
                            "object" &&
                          typeof $steps["updateWaitingRegister3"].then ===
                            "function"
                        ) {
                          $steps["updateWaitingRegister3"] = await $steps[
                            "updateWaitingRegister3"
                          ];
                        }

                        $steps["updateWaitingRegister"] =
                          $state.txtCardNumber.value.length == 16 && false
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["waitingRegister"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["updateWaitingRegister"] != null &&
                          typeof $steps["updateWaitingRegister"] === "object" &&
                          typeof $steps["updateWaitingRegister"].then ===
                            "function"
                        ) {
                          $steps["updateWaitingRegister"] = await $steps[
                            "updateWaitingRegister"
                          ];
                        }

                        $steps["runCode"] = false
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    $state.cardInquiry = {};
                                    return ($state.txtCardNumber.value =
                                      $state.txtCardNumber.value
                                        .replaceAll("۰", "0")
                                        .replaceAll("۱", "1")
                                        .replaceAll("۲", "2")
                                        .replaceAll("۳", "3")
                                        .replaceAll("۴", "4")
                                        .replaceAll("۵", "5")
                                        .replaceAll("۶", "6")
                                        .replaceAll("۷", "7")
                                        .replaceAll("۸", "8")
                                        .replaceAll("۹", "9"));
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }

                        $steps["getCardInquiry"] = false
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  undefined,
                                  (() => {
                                    try {
                                      return (
                                        "https://api.paziresh24.com/V1/doctor/payments/iban-inquiry/?card_number=" +
                                        $state.txtCardNumber.value
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["getCardInquiry"] != null &&
                          typeof $steps["getCardInquiry"] === "object" &&
                          typeof $steps["getCardInquiry"].then === "function"
                        ) {
                          $steps["getCardInquiry"] = await $steps[
                            "getCardInquiry"
                          ];
                        }

                        $steps["updateCardInquiry"] =
                          $steps.getCardInquiry.status == 200 && false
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["cardInquiry"]
                                  },
                                  operation: 0,
                                  value: $steps.getCardInquiry.data
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["updateCardInquiry"] != null &&
                          typeof $steps["updateCardInquiry"] === "object" &&
                          typeof $steps["updateCardInquiry"].then === "function"
                        ) {
                          $steps["updateCardInquiry"] = await $steps[
                            "updateCardInquiry"
                          ];
                        }

                        $steps["invokeGlobalAction2"] =
                          $steps.getCardInquiry.status != 200 && false
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "error",
                                    "\u062e\u0637\u0627 \u062f\u0631 \u0639\u0645\u0644\u06cc\u0627\u062a \u0627\u0633\u062a\u0639\u0644\u0627\u0645. \u0644\u0637\u0641\u0627 \u0634\u0645\u0627\u0631\u0647 \u06a9\u0627\u0631\u062a \u0631\u0627 \u0628\u0631\u0631\u0633\u06cc \u06a9\u0631\u062f\u0647 \u0648 \u0645\u062c\u062f\u062f\u0627 \u062a\u0644\u0627\u0634 \u0646\u0645\u0627\u06cc\u06cc\u062f"
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["invokeGlobalAction2"] != null &&
                          typeof $steps["invokeGlobalAction2"] === "object" &&
                          typeof $steps["invokeGlobalAction2"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction2"] = await $steps[
                            "invokeGlobalAction2"
                          ];
                        }

                        $steps["updateWaitingRegister2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["waitingRegister"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateWaitingRegister2"] != null &&
                          typeof $steps["updateWaitingRegister2"] ===
                            "object" &&
                          typeof $steps["updateWaitingRegister2"].then ===
                            "function"
                        ) {
                          $steps["updateWaitingRegister2"] = await $steps[
                            "updateWaitingRegister2"
                          ];
                        }
                      }}
                    />

                    <SideEffect
                      data-plasmic-name={"sideEffectGetIbanInquiry"}
                      data-plasmic-override={overrides.sideEffectGetIbanInquiry}
                      className={classNames(
                        "__wab_instance",
                        sty.sideEffectGetIbanInquiry
                      )}
                      deps={(() => {
                        try {
                          return [
                            $state.ibanInquiryCount,
                            $state.txtIban.value
                          ];
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      onMount={async () => {
                        const $steps = {};

                        $steps["updateWaitingRegister"] =
                          $state.txtIban.value.length == 24
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["waitingRegister"]
                                  },
                                  operation: 0,
                                  value: true
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["updateWaitingRegister"] != null &&
                          typeof $steps["updateWaitingRegister"] === "object" &&
                          typeof $steps["updateWaitingRegister"].then ===
                            "function"
                        ) {
                          $steps["updateWaitingRegister"] = await $steps[
                            "updateWaitingRegister"
                          ];
                        }

                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    $state.ibanInquiry = {};
                                    return ($state.txtIban.value =
                                      $state.txtIban.value
                                        .replaceAll("۰", "0")
                                        .replaceAll("۱", "1")
                                        .replaceAll("۲", "2")
                                        .replaceAll("۳", "3")
                                        .replaceAll("۴", "4")
                                        .replaceAll("۵", "5")
                                        .replaceAll("۶", "6")
                                        .replaceAll("۷", "7")
                                        .replaceAll("۸", "8")
                                        .replaceAll("۹", "9"));
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }

                        $steps["getIBanInquiry"] =
                          $state.txtIban.value.length == 24
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    undefined,
                                    (() => {
                                      try {
                                        return (
                                          "https://apigw.paziresh24.com/ganjname/v1/iban-inquiry/?iban=IR" +
                                          $state.txtIban.value
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return undefined;
                                        }
                                        throw e;
                                      }
                                    })()
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.apiRequest"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["getIBanInquiry"] != null &&
                          typeof $steps["getIBanInquiry"] === "object" &&
                          typeof $steps["getIBanInquiry"].then === "function"
                        ) {
                          $steps["getIBanInquiry"] = await $steps[
                            "getIBanInquiry"
                          ];
                        }

                        $steps["updateIbanInquiry"] =
                          $steps.getIBanInquiry.status == 200 &&
                          $state.txtIban.value.length == 24
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["ibanInquiry"]
                                  },
                                  operation: 0,
                                  value: $steps.getIBanInquiry.data
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["updateIbanInquiry"] != null &&
                          typeof $steps["updateIbanInquiry"] === "object" &&
                          typeof $steps["updateIbanInquiry"].then === "function"
                        ) {
                          $steps["updateIbanInquiry"] = await $steps[
                            "updateIbanInquiry"
                          ];
                        }

                        $steps["invokeGlobalAction2"] =
                          $steps.getIBanInquiry.status != 200
                            ? (() => {
                                const actionArgs = {
                                  args: [
                                    "error",
                                    "\u062e\u0637\u0627 \u062f\u0631 \u0639\u0645\u0644\u06cc\u0627\u062a \u0627\u0633\u062a\u0639\u0644\u0627\u0645. \u0644\u0637\u0641\u0627 \u0634\u0645\u0627\u0631\u0647 \u0634\u0628\u0627 \u0631\u0627 \u0628\u0631\u0631\u0633\u06cc \u06a9\u0631\u062f\u0647 \u0648 \u0645\u062c\u062f\u062f\u0627 \u062a\u0644\u0627\u0634 \u0646\u0645\u0627\u06cc\u06cc\u062f"
                                  ]
                                };
                                return $globalActions[
                                  "Fragment.showToast"
                                ]?.apply(null, [...actionArgs.args]);
                              })()
                            : undefined;
                        if (
                          $steps["invokeGlobalAction2"] != null &&
                          typeof $steps["invokeGlobalAction2"] === "object" &&
                          typeof $steps["invokeGlobalAction2"].then ===
                            "function"
                        ) {
                          $steps["invokeGlobalAction2"] = await $steps[
                            "invokeGlobalAction2"
                          ];
                        }

                        $steps["updateWaitingRegister2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["waitingRegister"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updateWaitingRegister2"] != null &&
                          typeof $steps["updateWaitingRegister2"] ===
                            "object" &&
                          typeof $steps["updateWaitingRegister2"].then ===
                            "function"
                        ) {
                          $steps["updateWaitingRegister2"] = await $steps[
                            "updateWaitingRegister2"
                          ];
                        }
                      }}
                    />
                  </div>
                </div>
              </div>
            ) : null}
            {(() => {
              try {
                return (
                  !$state.waiting &&
                  ($state.userData.isDoctor ||
                    $state.currentAccountType == "centerid")
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div className={classNames(projectcss.all, sty.freeBox__vXn0U)}>
                <div className={classNames(projectcss.all, sty.freeBox__hGHti)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___5PkPs
                    )}
                  >
                    {
                      "\u062a\u0633\u0648\u06cc\u0647 \u062e\u0648\u062f\u06a9\u0627\u0631 \u0631\u0648\u0632\u0627\u0646\u0647"
                    }
                  </div>
                  {(() => {
                    try {
                      return $state.waitingSettlement;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Icon2Icon
                      className={classNames(projectcss.all, sty.svg___8BmBs)}
                      role={"img"}
                    />
                  ) : null}
                </div>
                <div className={classNames(projectcss.all, sty.freeBox___1CP)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qwE5F)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__cTeH0)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ihKmx
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $state.recurringSettlementList.length >
                                0 && $state.recurringSettlementList[0].accountid
                                ? "تسویه حساب خودکار" +
                                    (" برای شماره شبا " +
                                      $state.recurringSettlementList[0].iban +
                                      ($state.recurringSettlementList[0]
                                        .payment_number != undefined &&
                                      $state.recurringSettlementList[0]
                                        .payment_number.length > 1
                                        ? " با شناسه واربز " +
                                          $state.recurringSettlementList[0]
                                            .payment_number
                                        : "")) +
                                    " فعال می‌باشد."
                                : "تسویه حساب خودکار غیرفعال است.";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      {(() => {
                        try {
                          return (
                            $state.recurringSettlementList.length == 0 ||
                            $state.recurringSettlementList[0].accountid ==
                              undefined
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mmoVa
                          )}
                        >
                          {
                            "\u0628\u0627 \u0641\u0639\u0627\u0644 \u06a9\u0631\u062f\u0646 \u062a\u0633\u0648\u06cc\u0647 \u062e\u0648\u062f\u06a9\u0627\u0631\u060c \u062f\u0631\u0622\u0645\u062f \u0634\u0645\u0627 \u0647\u0631 \u0634\u0628 \u0628\u0647 \u062d\u0633\u0627\u0628 \u0628\u0627\u0646\u06a9\u06cc\u200c\u062a\u0627\u0646 \u0648\u0627\u0631\u06cc\u0632 \u0645\u06cc\u200c\u0634\u0648\u062f."
                          }
                        </div>
                      ) : null}
                      {(() => {
                        try {
                          return (
                            $state.recurringSettlementList.length > 0 &&
                            $state.recurringSettlementList.accountid !=
                              undefined
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__dlkwU
                          )}
                        >
                          {
                            "\u0631\u0648\u0632\u0627\u0646\u0647 7\u0635\u0628\u062d \u06a9\u0644 \u0645\u0648\u062c\u0648\u062f\u06cc \u062d\u0633\u0627\u0628 \u0628\u0647\u200c\u0635\u0648\u0631\u062a \u067e\u0627\u06cc\u0627 \u0628\u0631\u0627\u06cc \u0634\u0645\u0627 \u0648\u0627\u0631\u06cc\u0632 \u0645\u06cc\u200c\u0634\u0648\u062f"
                          }
                        </div>
                      ) : null}
                      {(() => {
                        try {
                          return (
                            $state.recurringSettlementList.length > 0 &&
                            $state.recurringSettlementList[0].accountid > 0
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___1CR2O
                          )}
                        >
                          {
                            "\u062f\u0631\u0622\u0645\u062f \u0634\u0645\u0627 \u0647\u0631 \u0634\u0628 \u0628\u0647 \u062d\u0633\u0627\u0628 \u0628\u0627\u0646\u06a9\u06cc\u200c\u062a\u0627\u0646 \u0648\u0627\u0631\u06cc\u0632 \u0645\u06cc\u200c\u0634\u0648\u062f."
                          }
                        </div>
                      ) : null}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__u4WOp)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___75Lbt
                        )}
                      >
                        {"\u062d\u0633\u0627\u0628:"}
                      </div>
                      <AntdRadioGroup
                        data-plasmic-name={"accountSettlement"}
                        data-plasmic-override={overrides.accountSettlement}
                        children={null}
                        className={classNames(
                          "__wab_instance",
                          sty.accountSettlement
                        )}
                        defaultValue={(() => {
                          try {
                            return $state.recurringSettlementList[0].accountid;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        onChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "accountSettlement",
                            "value"
                          ]).apply(null, eventArgs);
                        }}
                        optionType={"default"}
                        options={(() => {
                          try {
                            return $state.useraccounts.map(account => ({
                              label: account.name + "-" + account.cardid,
                              value: account.accountid
                            }));
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()}
                        value={generateStateValueProp($state, [
                          "accountSettlement",
                          "value"
                        ])}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vfGbM)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qoBx8
                        )}
                      >
                        {
                          "\u0634\u0646\u0627\u0633\u0647 \u0648\u0627\u0631\u06cc\u0632:"
                        }
                      </div>
                      <TextInput
                        data-plasmic-name={"txtPaymentNumber"}
                        data-plasmic-override={overrides.txtPaymentNumber}
                        className={classNames(
                          "__wab_instance",
                          sty.txtPaymentNumber
                        )}
                        onChange={async (...eventArgs: any) => {
                          ((...eventArgs) => {
                            generateStateOnChangeProp($state, [
                              "txtPaymentNumber",
                              "value"
                            ])((e => e.target?.value).apply(null, eventArgs));
                          }).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        placeholder={
                          "\u0634\u0646\u0627\u0633\u0647 \u0648\u0627\u0631\u06cc\u0632 \u062f\u0631 \u0635\u0648\u0631\u062a \u0644\u0632\u0648\u0645"
                        }
                        type={"number"}
                        value={
                          generateStateValueProp($state, [
                            "txtPaymentNumber",
                            "value"
                          ]) ?? ""
                        }
                      />
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___2TmJ5
                      )}
                    >
                      {(() => {
                        try {
                          return (
                            $state.recurringSettlementList.length == 0 ||
                            $state.recurringSettlementList[0].accountid ==
                              undefined
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <Button
                          data-plasmic-name={"btnActiveRecuringSettlement"}
                          data-plasmic-override={
                            overrides.btnActiveRecuringSettlement
                          }
                          children2={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__mYa5N
                              )}
                            >
                              {"\u0641\u0639\u0627\u0644 \u06a9\u0646"}
                            </div>
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.btnActiveRecuringSettlement
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["errorAccount"] =
                              $state.useraccounts.length == 0
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "error",
                                        "\u0644\u0637\u0641\u0627 \u06cc\u06a9 \u062d\u0633\u0627\u0628 \u062a\u0639\u0631\u06cc\u0641 \u0646\u0645\u0627\u06cc\u06cc\u062f."
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.showToast"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                            if (
                              $steps["errorAccount"] != null &&
                              typeof $steps["errorAccount"] === "object" &&
                              typeof $steps["errorAccount"].then === "function"
                            ) {
                              $steps["errorAccount"] = await $steps[
                                "errorAccount"
                              ];
                            }

                            $steps["updateWaitingSettlement"] =
                              $state.useraccounts.length > 0
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["waitingSettlement"]
                                      },
                                      operation: 0,
                                      value: true
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["updateWaitingSettlement"] != null &&
                              typeof $steps["updateWaitingSettlement"] ===
                                "object" &&
                              typeof $steps["updateWaitingSettlement"].then ===
                                "function"
                            ) {
                              $steps["updateWaitingSettlement"] = await $steps[
                                "updateWaitingSettlement"
                              ];
                            }

                            $steps["recurringSettlement"] =
                              $state.useraccounts.length > 0
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "POST",
                                        (() => {
                                          try {
                                            return "https://apigw.paziresh24.com/ganjname/v1/recurring-settlement";
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })(),
                                        undefined,
                                        (() => {
                                          try {
                                            return {
                                              accountid:
                                                $state.useraccounts[0].accountid
                                            };
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.apiRequest"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                            if (
                              $steps["recurringSettlement"] != null &&
                              typeof $steps["recurringSettlement"] ===
                                "object" &&
                              typeof $steps["recurringSettlement"].then ===
                                "function"
                            ) {
                              $steps["recurringSettlement"] = await $steps[
                                "recurringSettlement"
                              ];
                            }

                            $steps["waitingFalse2"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["waitingSettlement"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["waitingFalse2"] != null &&
                              typeof $steps["waitingFalse2"] === "object" &&
                              typeof $steps["waitingFalse2"].then === "function"
                            ) {
                              $steps["waitingFalse2"] = await $steps[
                                "waitingFalse2"
                              ];
                            }

                            $steps["getMessage"] =
                              $steps.recurringSettlement.data.message !=
                              undefined
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: [
                                          "recurringSettlementMessage"
                                        ]
                                      },
                                      operation: 0,
                                      value:
                                        $steps.recurringSettlement.data.message
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["getMessage"] != null &&
                              typeof $steps["getMessage"] === "object" &&
                              typeof $steps["getMessage"].then === "function"
                            ) {
                              $steps["getMessage"] = await $steps["getMessage"];
                            }

                            $steps["alertSuccessRecurring"] =
                              $steps.recurringSettlement.status == 200
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        undefined,
                                        (() => {
                                          try {
                                            return $state.recurringSettlementMessage;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.showToast"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                            if (
                              $steps["alertSuccessRecurring"] != null &&
                              typeof $steps["alertSuccessRecurring"] ===
                                "object" &&
                              typeof $steps["alertSuccessRecurring"].then ===
                                "function"
                            ) {
                              $steps["alertSuccessRecurring"] = await $steps[
                                "alertSuccessRecurring"
                              ];
                            }

                            $steps["alertError"] =
                              $steps.recurringSettlement.status != 200
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "error",
                                        (() => {
                                          try {
                                            return $state.recurringSettlementMessage;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.showToast"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                            if (
                              $steps["alertError"] != null &&
                              typeof $steps["alertError"] === "object" &&
                              typeof $steps["alertError"].then === "function"
                            ) {
                              $steps["alertError"] = await $steps["alertError"];
                            }

                            $steps["updateRecuringSetlementCount"] =
                              $steps.recurringSettlement.status == 200
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["recuringSetlementCount"]
                                      },
                                      operation: 2
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      const oldValue = $stateGet(
                                        objRoot,
                                        variablePath
                                      );
                                      $stateSet(
                                        objRoot,
                                        variablePath,
                                        oldValue + 1
                                      );
                                      return oldValue + 1;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["updateRecuringSetlementCount"] != null &&
                              typeof $steps["updateRecuringSetlementCount"] ===
                                "object" &&
                              typeof $steps["updateRecuringSetlementCount"]
                                .then === "function"
                            ) {
                              $steps["updateRecuringSetlementCount"] =
                                await $steps["updateRecuringSetlementCount"];
                            }
                          }}
                          size={"compact"}
                        />
                      ) : null}
                      {(() => {
                        try {
                          return (
                            $state.recurringSettlementList.length > 0 &&
                            $state.recurringSettlementList[0].accountid !=
                              undefined
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <Button
                          data-plasmic-name={"btnDeleteRecuringSettlement"}
                          data-plasmic-override={
                            overrides.btnDeleteRecuringSettlement
                          }
                          children2={
                            "\u063a\u06cc\u0631\u0641\u0639\u0627\u0644 \u06a9\u0646"
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.btnDeleteRecuringSettlement
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["updateWaitingSettlement"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["waitingSettlement"]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateWaitingSettlement"] != null &&
                              typeof $steps["updateWaitingSettlement"] ===
                                "object" &&
                              typeof $steps["updateWaitingSettlement"].then ===
                                "function"
                            ) {
                              $steps["updateWaitingSettlement"] = await $steps[
                                "updateWaitingSettlement"
                              ];
                            }

                            $steps["deleteSettlementStatus"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "PUT",
                                      (() => {
                                        try {
                                          return "https://apigw.paziresh24.com/ganjname/v1/recurring-settlement";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })(),
                                      undefined,
                                      (() => {
                                        try {
                                          return {
                                            accountid:
                                              $state.recurringSettlementList[0]
                                                .accountid
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.apiRequest"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["deleteSettlementStatus"] != null &&
                              typeof $steps["deleteSettlementStatus"] ===
                                "object" &&
                              typeof $steps["deleteSettlementStatus"].then ===
                                "function"
                            ) {
                              $steps["deleteSettlementStatus"] = await $steps[
                                "deleteSettlementStatus"
                              ];
                            }

                            $steps["setDeleteMessage"] =
                              $steps.deleteSettlementStatus.data.message !=
                              undefined
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: [
                                          "recurringSettlementMessage"
                                        ]
                                      },
                                      operation: 0,
                                      value:
                                        $steps.deleteSettlementStatus.data
                                          .message
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["setDeleteMessage"] != null &&
                              typeof $steps["setDeleteMessage"] === "object" &&
                              typeof $steps["setDeleteMessage"].then ===
                                "function"
                            ) {
                              $steps["setDeleteMessage"] = await $steps[
                                "setDeleteMessage"
                              ];
                            }

                            $steps["alertDeleteError"] =
                              $steps.deleteSettlementStatus.status != 200
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        "error",
                                        (() => {
                                          try {
                                            return $state.recurringSettlementMessage;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.showToast"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                            if (
                              $steps["alertDeleteError"] != null &&
                              typeof $steps["alertDeleteError"] === "object" &&
                              typeof $steps["alertDeleteError"].then ===
                                "function"
                            ) {
                              $steps["alertDeleteError"] = await $steps[
                                "alertDeleteError"
                              ];
                            }

                            $steps["alertDeleteSuccess"] =
                              $steps.deleteSettlementStatus.status == 200
                                ? (() => {
                                    const actionArgs = {
                                      args: [
                                        undefined,
                                        (() => {
                                          try {
                                            return $state.recurringSettlementMessage;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                      ]
                                    };
                                    return $globalActions[
                                      "Fragment.showToast"
                                    ]?.apply(null, [...actionArgs.args]);
                                  })()
                                : undefined;
                            if (
                              $steps["alertDeleteSuccess"] != null &&
                              typeof $steps["alertDeleteSuccess"] ===
                                "object" &&
                              typeof $steps["alertDeleteSuccess"].then ===
                                "function"
                            ) {
                              $steps["alertDeleteSuccess"] = await $steps[
                                "alertDeleteSuccess"
                              ];
                            }

                            $steps["waitingFalse"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["waitingSettlement"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["waitingFalse"] != null &&
                              typeof $steps["waitingFalse"] === "object" &&
                              typeof $steps["waitingFalse"].then === "function"
                            ) {
                              $steps["waitingFalse"] = await $steps[
                                "waitingFalse"
                              ];
                            }

                            $steps["refreshRecuringSettlement"] =
                              $steps.deleteSettlementStatus.status == 200
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["recuringSetlementCount"]
                                      },
                                      operation: 2
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      const oldValue = $stateGet(
                                        objRoot,
                                        variablePath
                                      );
                                      $stateSet(
                                        objRoot,
                                        variablePath,
                                        oldValue + 1
                                      );
                                      return oldValue + 1;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["refreshRecuringSettlement"] != null &&
                              typeof $steps["refreshRecuringSettlement"] ===
                                "object" &&
                              typeof $steps["refreshRecuringSettlement"]
                                .then === "function"
                            ) {
                              $steps["refreshRecuringSettlement"] =
                                await $steps["refreshRecuringSettlement"];
                            }
                          }}
                          size={"compact"}
                        />
                      ) : null}
                    </div>
                  </div>
                </div>
              </div>
            ) : null}
            {(() => {
              try {
                return !$state.waiting && $state.userData?.isDoctor;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div className={classNames(projectcss.all, sty.freeBox__kIGjG)}>
                <div className={classNames(projectcss.all, sty.freeBox__gKL5)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jn61K
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      {
                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            projectcss.plasmic_default__inline,
                            sty.link__cgDo7
                          )}
                          component={Link}
                          onClick={async event => {
                            const $steps = {};

                            $steps["invokeGlobalAction"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "https://www.paziresh24.com/dashboard/apps/drapp/service/"
                                    ]
                                  };
                                  return $globalActions[
                                    "Hamdast.openLink"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["invokeGlobalAction"] != null &&
                              typeof $steps["invokeGlobalAction"] ===
                                "object" &&
                              typeof $steps["invokeGlobalAction"].then ===
                                "function"
                            ) {
                              $steps["invokeGlobalAction"] = await $steps[
                                "invokeGlobalAction"
                              ];
                            }
                          }}
                          platform={"nextjs"}
                        >
                          {
                            "\u062a\u063a\u06cc\u06cc\u0631 \u0645\u0628\u0644\u063a \u0648\u06cc\u0632\u06cc\u062a"
                          }
                        </PlasmicLink__>
                      }
                      <React.Fragment>{""}</React.Fragment>
                    </React.Fragment>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__frGpM)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__k9Y
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>
                        {
                          "\u062f\u0631\u0635\u0648\u0631\u062a \u0646\u06cc\u0627\u0632 \u0628\u0647 \u067e\u0634\u062a\u06cc\u0628\u0627\u0646\u06cc "
                        }
                      </React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {
                          "\u067e\u06cc\u0631\u0627\u0645\u0648\u0646 \u0627\u06cc\u0646 \u0635\u0641\u062d\u0647"
                        }
                      </span>
                      <React.Fragment>
                        {"\u060c \u0628\u0647 \u0622\u06cc\u200c\u062f\u06cc "}
                      </React.Fragment>
                      {
                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            projectcss.plasmic_default__inline,
                            sty.link__ej7Dt
                          )}
                          component={Link}
                          href={""}
                          onClick={async event => {
                            const $steps = {};

                            $steps["openLink"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: ["https://t.me/hojatkhajavi"]
                                  };
                                  return $globalActions[
                                    "Hamdast.openLink"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["openLink"] != null &&
                              typeof $steps["openLink"] === "object" &&
                              typeof $steps["openLink"].then === "function"
                            ) {
                              $steps["openLink"] = await $steps["openLink"];
                            }
                          }}
                          platform={"nextjs"}
                        >
                          {"@hojatkhajavi"}
                        </PlasmicLink__>
                      }
                      <React.Fragment>
                        {
                          " \u062f\u0631 \u062a\u0644\u06af\u0631\u0627\u0645 \u067e\u06cc\u0627\u0645 \u062f\u0647\u06cc\u062f."
                        }
                      </React.Fragment>
                    </React.Fragment>
                  </div>
                </div>
              </div>
            ) : null}
          </section>
          <SideEffect
            data-plasmic-name={"sideEffectPageLoad"}
            data-plasmic-override={overrides.sideEffectPageLoad}
            className={classNames("__wab_instance", sty.sideEffectPageLoad)}
            onMount={async () => {
              const $steps = {};

              $steps["updateWaiting"] = false
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["waiting"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateWaiting"] != null &&
                typeof $steps["updateWaiting"] === "object" &&
                typeof $steps["updateWaiting"].then === "function"
              ) {
                $steps["updateWaiting"] = await $steps["updateWaiting"];
              }

              $steps["updateWaitingUserAccount"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["waitingUserAccount"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateWaitingUserAccount"] != null &&
                typeof $steps["updateWaitingUserAccount"] === "object" &&
                typeof $steps["updateWaitingUserAccount"].then === "function"
              ) {
                $steps["updateWaitingUserAccount"] = await $steps[
                  "updateWaitingUserAccount"
                ];
              }

              $steps["getUsers"] = true
                ? (() => {
                    const actionArgs = {
                      args: ["POST", "https://www.paziresh24.com/api/getUser"]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["getUsers"] != null &&
                typeof $steps["getUsers"] === "object" &&
                typeof $steps["getUsers"].then === "function"
              ) {
                $steps["getUsers"] = await $steps["getUsers"];
              }

              $steps["updateUserData"] =
                $steps.getUsers.status == 200
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["userData"]
                        },
                        operation: 0,
                        value: $steps.getUsers.data
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateUserData"] != null &&
                typeof $steps["updateUserData"] === "object" &&
                typeof $steps["updateUserData"].then === "function"
              ) {
                $steps["updateUserData"] = await $steps["updateUserData"];
              }

              $steps["getUserAccounts"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        (() => {
                          try {
                            return (
                              "https://apigw.paziresh24.com/katibe-useraccounts?user_id=" +
                              ($state.userData?.result?.id ||
                                Math.random().toString(36).substring(2, 15))
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["getUserAccounts"] != null &&
                typeof $steps["getUserAccounts"] === "object" &&
                typeof $steps["getUserAccounts"].then === "function"
              ) {
                $steps["getUserAccounts"] = await $steps["getUserAccounts"];
              }

              $steps["runCode"] =
                $steps.getUserAccounts.status == 200
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            const data = $steps.getUserAccounts.data.data;
                            const uniqueData = [];
                            const seenIds = new Set();
                            data.forEach(item => {
                              if (!seenIds.has(item.id)) {
                                seenIds.add(item.id);
                                uniqueData.push(item);
                              }
                            });
                            return ($state.accounts = uniqueData);
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["runCode2"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          if ($state.accounts.length > 0)
                            return ($state.cbAccounts.value =
                              $state.accounts[
                                $state.accounts.length - 1
                              ].uniqueid);
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode2"] != null &&
                typeof $steps["runCode2"] === "object" &&
                typeof $steps["runCode2"].then === "function"
              ) {
                $steps["runCode2"] = await $steps["runCode2"];
              }

              $steps["updateUserData"] =
                $steps.getUsers.status == 200
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            if ($steps.getUsers.data.isDoctor == true) {
                              return $state.accounts.forEach(item => {
                                if (item.account === "p24") {
                                  item.name = "ویزیت آنلاین " + item.name;
                                }
                              });
                            }
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateUserData"] != null &&
                typeof $steps["updateUserData"] === "object" &&
                typeof $steps["updateUserData"].then === "function"
              ) {
                $steps["updateUserData"] = await $steps["updateUserData"];
              }

              $steps["updateCompleteLoad"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["completeLoad"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateCompleteLoad"] != null &&
                typeof $steps["updateCompleteLoad"] === "object" &&
                typeof $steps["updateCompleteLoad"].then === "function"
              ) {
                $steps["updateCompleteLoad"] = await $steps[
                  "updateCompleteLoad"
                ];
              }

              $steps["updateWaiting2"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["waiting"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateWaiting2"] != null &&
                typeof $steps["updateWaiting2"] === "object" &&
                typeof $steps["updateWaiting2"].then === "function"
              ) {
                $steps["updateWaiting2"] = await $steps["updateWaiting2"];
              }

              $steps["updateLoadProfileCount"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["loadProfileCount"]
                      },
                      operation: 2
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      const oldValue = $stateGet(objRoot, variablePath);
                      $stateSet(objRoot, variablePath, oldValue + 1);
                      return oldValue + 1;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateLoadProfileCount"] != null &&
                typeof $steps["updateLoadProfileCount"] === "object" &&
                typeof $steps["updateLoadProfileCount"].then === "function"
              ) {
                $steps["updateLoadProfileCount"] = await $steps[
                  "updateLoadProfileCount"
                ];
              }

              $steps["updateRecuringSetlementCount"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["recuringSetlementCount"]
                      },
                      operation: 2
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      const oldValue = $stateGet(objRoot, variablePath);
                      $stateSet(objRoot, variablePath, oldValue + 1);
                      return oldValue + 1;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateRecuringSetlementCount"] != null &&
                typeof $steps["updateRecuringSetlementCount"] === "object" &&
                typeof $steps["updateRecuringSetlementCount"].then ===
                  "function"
              ) {
                $steps["updateRecuringSetlementCount"] = await $steps[
                  "updateRecuringSetlementCount"
                ];
              }

              $steps["profile"] =
                $state.userData.isDoctor == true
                  ? (() => {
                      const actionArgs = {
                        args: [
                          undefined,
                          "https://api.paziresh24.com/V1/doctor/profile"
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
              if (
                $steps["profile"] != null &&
                typeof $steps["profile"] === "object" &&
                typeof $steps["profile"].then === "function"
              ) {
                $steps["profile"] = await $steps["profile"];
              }

              $steps["updateProfileData"] =
                $steps.profile.status == 200 && $state.userData.isDoctor == true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["profileData"]
                        },
                        operation: 0,
                        value: $steps.profile.data.data
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateProfileData"] != null &&
                typeof $steps["updateProfileData"] === "object" &&
                typeof $steps["updateProfileData"].then === "function"
              ) {
                $steps["updateProfileData"] = await $steps["updateProfileData"];
              }
            }}
          />

          <SideEffect
            data-plasmic-name={"loadProfile"}
            data-plasmic-override={overrides.loadProfile}
            className={classNames("__wab_instance", sty.loadProfile)}
            deps={(() => {
              try {
                return [$state.cbAccounts.value, $state.loadProfileCount];
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            onMount={async () => {
              const $steps = {};

              $steps["runCode"] = $state.completeLoad
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          $state.waiting = false;
                          $state.waitingProfile = false;
                          $state.waitingRegister = false;
                          $state.waitingSettlement = false;
                          $state.waitingUserAccount = false;
                          $state.useraccounts = [];
                          $state.cardInquiry = {};
                          $state.profile = {};
                          $state.recurringSettlementList = [];
                          return $state.accounts.forEach(account => {
                            if (account.uniqueid == $state.cbAccounts.value) {
                              $state.currentAccountType = account.type;
                              $state.currentAccountId = account.id;
                              $state.currentAccountTitle = account.name;
                            }
                          });
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["showWaitingProfile"] = $state.completeLoad
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["waitingProfile"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["showWaitingProfile"] != null &&
                typeof $steps["showWaitingProfile"] === "object" &&
                typeof $steps["showWaitingProfile"].then === "function"
              ) {
                $steps["showWaitingProfile"] = await $steps[
                  "showWaitingProfile"
                ];
              }

              $steps["clearCenterInfo"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["centerInfo"]
                      },
                      operation: 0,
                      value: {}
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["clearCenterInfo"] != null &&
                typeof $steps["clearCenterInfo"] === "object" &&
                typeof $steps["clearCenterInfo"].then === "function"
              ) {
                $steps["clearCenterInfo"] = await $steps["clearCenterInfo"];
              }

              $steps["getCentersInfo"] =
                $state.currentAccountType == "centerid"
                  ? (() => {
                      const actionArgs = {
                        args: [
                          undefined,
                          (() => {
                            try {
                              return (
                                "https://apigw.paziresh24.com/v1/centers/" +
                                $state.currentAccountId
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
              if (
                $steps["getCentersInfo"] != null &&
                typeof $steps["getCentersInfo"] === "object" &&
                typeof $steps["getCentersInfo"].then === "function"
              ) {
                $steps["getCentersInfo"] = await $steps["getCentersInfo"];
              }

              $steps["setCenterInfo"] =
                $state.currentAccountType == "centerid"
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["centerInfo"]
                        },
                        operation: 0,
                        value: $steps.getCentersInfo.data
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["setCenterInfo"] != null &&
                typeof $steps["setCenterInfo"] === "object" &&
                typeof $steps["setCenterInfo"].then === "function"
              ) {
                $steps["setCenterInfo"] = await $steps["setCenterInfo"];
              }

              $steps["updateWaitingUserAccount"] = $state.completeLoad
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["waitingUserAccount"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateWaitingUserAccount"] != null &&
                typeof $steps["updateWaitingUserAccount"] === "object" &&
                typeof $steps["updateWaitingUserAccount"].then === "function"
              ) {
                $steps["updateWaitingUserAccount"] = await $steps[
                  "updateWaitingUserAccount"
                ];
              }

              $steps["updateWaitingSettlement"] = false
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["waitingSettlement"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateWaitingSettlement"] != null &&
                typeof $steps["updateWaitingSettlement"] === "object" &&
                typeof $steps["updateWaitingSettlement"].then === "function"
              ) {
                $steps["updateWaitingSettlement"] = await $steps[
                  "updateWaitingSettlement"
                ];
              }

              $steps["getProfile"] = $state.completeLoad
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        (() => {
                          try {
                            return (
                              "https://apigw.paziresh24.com/financialaccount/v1/profiles" +
                              ($state.currentAccountType == "centerid"
                                ? "/?centerid=" + $state.currentAccountId
                                : "")
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["getProfile"] != null &&
                typeof $steps["getProfile"] === "object" &&
                typeof $steps["getProfile"].then === "function"
              ) {
                $steps["getProfile"] = await $steps["getProfile"];
              }

              $steps["updateProfile"] =
                $steps.getProfile.status == 200 && $state.completeLoad
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["profile"]
                        },
                        operation: 0,
                        value: $steps.getProfile.data.data
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateProfile"] != null &&
                typeof $steps["updateProfile"] === "object" &&
                typeof $steps["updateProfile"].then === "function"
              ) {
                $steps["updateProfile"] = await $steps["updateProfile"];
              }

              $steps["updateWaitingProfile"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["waitingProfile"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateWaitingProfile"] != null &&
                typeof $steps["updateWaitingProfile"] === "object" &&
                typeof $steps["updateWaitingProfile"].then === "function"
              ) {
                $steps["updateWaitingProfile"] = await $steps[
                  "updateWaitingProfile"
                ];
              }

              $steps["getUserAccounts"] = $state.completeLoad
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        (() => {
                          try {
                            return (
                              "https://apigw.paziresh24.com/financialaccount/v1/useraccounts" +
                              ($state.currentAccountType == "centerid"
                                ? "/?centerid=" + $state.currentAccountId
                                : "")
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["getUserAccounts"] != null &&
                typeof $steps["getUserAccounts"] === "object" &&
                typeof $steps["getUserAccounts"].then === "function"
              ) {
                $steps["getUserAccounts"] = await $steps["getUserAccounts"];
              }

              $steps["updateUsersAccounts"] =
                $steps.getUserAccounts.status == 200
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["useraccounts"]
                        },
                        operation: 0,
                        value: $steps.getUserAccounts.data.data
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateUsersAccounts"] != null &&
                typeof $steps["updateUsersAccounts"] === "object" &&
                typeof $steps["updateUsersAccounts"].then === "function"
              ) {
                $steps["updateUsersAccounts"] = await $steps[
                  "updateUsersAccounts"
                ];
              }

              $steps["updateWaitingUserAccount2"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["waitingUserAccount"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateWaitingUserAccount2"] != null &&
                typeof $steps["updateWaitingUserAccount2"] === "object" &&
                typeof $steps["updateWaitingUserAccount2"].then === "function"
              ) {
                $steps["updateWaitingUserAccount2"] = await $steps[
                  "updateWaitingUserAccount2"
                ];
              }
            }}
          />

          <SideEffect
            data-plasmic-name={"refreshRecuringSettlement"}
            data-plasmic-override={overrides.refreshRecuringSettlement}
            className={classNames(
              "__wab_instance",
              sty.refreshRecuringSettlement
            )}
            deps={(() => {
              try {
                return [$state.cbAccounts.value, $state.recuringSetlementCount];
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            onMount={async () => {
              const $steps = {};

              $steps["runCode"] = $state.completeLoad
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          $state.recurringSettlementList = [];
                          return $state.accounts.forEach(account => {
                            if (account.uniqueid == $state.cbAccounts.value) {
                              $state.currentAccountType = account.type;
                              $state.currentAccountId = account.id;
                              $state.currentAccountTitle = account.name;
                            }
                          });
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["updateWaitingSettlement"] = $state.completeLoad
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["waitingSettlement"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateWaitingSettlement"] != null &&
                typeof $steps["updateWaitingSettlement"] === "object" &&
                typeof $steps["updateWaitingSettlement"].then === "function"
              ) {
                $steps["updateWaitingSettlement"] = await $steps[
                  "updateWaitingSettlement"
                ];
              }

              $steps["getRecurringSettlement"] = $state.completeLoad
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        (() => {
                          try {
                            return (
                              "https://apigw.paziresh24.com/ganjname/v1/recurring-settlement" +
                              ($state.currentAccountType == "centerid"
                                ? "/?centerid=" + $state.currentAccountId
                                : "")
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["getRecurringSettlement"] != null &&
                typeof $steps["getRecurringSettlement"] === "object" &&
                typeof $steps["getRecurringSettlement"].then === "function"
              ) {
                $steps["getRecurringSettlement"] = await $steps[
                  "getRecurringSettlement"
                ];
              }

              $steps["updateWaiting2"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["waitingSettlement"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateWaiting2"] != null &&
                typeof $steps["updateWaiting2"] === "object" &&
                typeof $steps["updateWaiting2"].then === "function"
              ) {
                $steps["updateWaiting2"] = await $steps["updateWaiting2"];
              }

              $steps["updateRecurringSettlementList"] =
                $steps.getRecurringSettlement.status == 200
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["recurringSettlementList"]
                        },
                        operation: 0,
                        value: $steps.getRecurringSettlement.data.data
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateRecurringSettlementList"] != null &&
                typeof $steps["updateRecurringSettlementList"] === "object" &&
                typeof $steps["updateRecurringSettlementList"].then ===
                  "function"
              ) {
                $steps["updateRecurringSettlementList"] = await $steps[
                  "updateRecurringSettlementList"
                ];
              }
            }}
          />

          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml)}
            code={
              '<script type="text/javascript">\r\n    (function(c,l,a,r,i,t,y){\r\n        c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};\r\n        t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;\r\n        y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);\r\n    })(window, document, "clarity", "script", "pq37fqev3s");\r\n</script>'
            }
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "cbAccounts",
    "txtName",
    "txtNationalId",
    "txtRegistrationNumber",
    "txtEconomicCode",
    "txtPostalCode",
    "txtPhone",
    "txtAddress",
    "dialogDelete",
    "dialog2",
    "tabsContainer",
    "tabUnderline",
    "txtCardNumber",
    "txtCardownerName",
    "txtcardIban",
    "txtcardBank",
    "txtIban",
    "txtibanownerName",
    "txtIbanaccountNumber",
    "txtIbaNbankName",
    "txtIbanPaymentNumber",
    "sideEffectGetCardInquiry2",
    "sideEffectGetIbanInquiry",
    "accountSettlement",
    "txtPaymentNumber",
    "btnActiveRecuringSettlement",
    "btnDeleteRecuringSettlement",
    "sideEffectPageLoad",
    "loadProfile",
    "refreshRecuringSettlement",
    "embedHtml"
  ],
  section: [
    "section",
    "cbAccounts",
    "txtName",
    "txtNationalId",
    "txtRegistrationNumber",
    "txtEconomicCode",
    "txtPostalCode",
    "txtPhone",
    "txtAddress",
    "dialogDelete",
    "dialog2",
    "tabsContainer",
    "tabUnderline",
    "txtCardNumber",
    "txtCardownerName",
    "txtcardIban",
    "txtcardBank",
    "txtIban",
    "txtibanownerName",
    "txtIbanaccountNumber",
    "txtIbaNbankName",
    "txtIbanPaymentNumber",
    "sideEffectGetCardInquiry2",
    "sideEffectGetIbanInquiry",
    "accountSettlement",
    "txtPaymentNumber",
    "btnActiveRecuringSettlement",
    "btnDeleteRecuringSettlement"
  ],
  cbAccounts: ["cbAccounts"],
  txtName: ["txtName"],
  txtNationalId: ["txtNationalId"],
  txtRegistrationNumber: ["txtRegistrationNumber"],
  txtEconomicCode: ["txtEconomicCode"],
  txtPostalCode: ["txtPostalCode"],
  txtPhone: ["txtPhone"],
  txtAddress: ["txtAddress"],
  dialogDelete: ["dialogDelete"],
  dialog2: [
    "dialog2",
    "tabsContainer",
    "tabUnderline",
    "txtCardNumber",
    "txtCardownerName",
    "txtcardIban",
    "txtcardBank",
    "txtIban",
    "txtibanownerName",
    "txtIbanaccountNumber",
    "txtIbaNbankName",
    "txtIbanPaymentNumber"
  ],
  tabsContainer: [
    "tabsContainer",
    "tabUnderline",
    "txtCardNumber",
    "txtCardownerName",
    "txtcardIban",
    "txtcardBank",
    "txtIban",
    "txtibanownerName",
    "txtIbanaccountNumber",
    "txtIbaNbankName",
    "txtIbanPaymentNumber"
  ],
  tabUnderline: ["tabUnderline"],
  txtCardNumber: ["txtCardNumber"],
  txtCardownerName: ["txtCardownerName"],
  txtcardIban: ["txtcardIban"],
  txtcardBank: ["txtcardBank"],
  txtIban: ["txtIban"],
  txtibanownerName: ["txtibanownerName"],
  txtIbanaccountNumber: ["txtIbanaccountNumber"],
  txtIbaNbankName: ["txtIbaNbankName"],
  txtIbanPaymentNumber: ["txtIbanPaymentNumber"],
  sideEffectGetCardInquiry2: ["sideEffectGetCardInquiry2"],
  sideEffectGetIbanInquiry: ["sideEffectGetIbanInquiry"],
  accountSettlement: ["accountSettlement"],
  txtPaymentNumber: ["txtPaymentNumber"],
  btnActiveRecuringSettlement: ["btnActiveRecuringSettlement"],
  btnDeleteRecuringSettlement: ["btnDeleteRecuringSettlement"],
  sideEffectPageLoad: ["sideEffectPageLoad"],
  loadProfile: ["loadProfile"],
  refreshRecuringSettlement: ["refreshRecuringSettlement"],
  embedHtml: ["embedHtml"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
  cbAccounts: typeof Select;
  txtName: typeof TextInput;
  txtNationalId: typeof TextInput;
  txtRegistrationNumber: typeof TextInput;
  txtEconomicCode: typeof TextInput;
  txtPostalCode: typeof TextInput;
  txtPhone: typeof TextInput;
  txtAddress: typeof TextInput;
  dialogDelete: typeof Dialog;
  dialog2: typeof Dialog;
  tabsContainer: typeof TabsContainer;
  tabUnderline: typeof TabUnderline;
  txtCardNumber: typeof TextInput;
  txtCardownerName: typeof TextInput;
  txtcardIban: typeof TextInput;
  txtcardBank: typeof TextInput;
  txtIban: typeof TextInput;
  txtibanownerName: typeof TextInput;
  txtIbanaccountNumber: typeof TextInput;
  txtIbaNbankName: typeof TextInput;
  txtIbanPaymentNumber: typeof TextInput;
  sideEffectGetCardInquiry2: typeof SideEffect;
  sideEffectGetIbanInquiry: typeof SideEffect;
  accountSettlement: typeof AntdRadioGroup;
  txtPaymentNumber: typeof TextInput;
  btnActiveRecuringSettlement: typeof Button;
  btnDeleteRecuringSettlement: typeof Button;
  sideEffectPageLoad: typeof SideEffect;
  loadProfile: typeof SideEffect;
  refreshRecuringSettlement: typeof SideEffect;
  embedHtml: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFinancialProfiles__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFinancialProfiles__VariantsArgs;
    args?: PlasmicFinancialProfiles__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFinancialProfiles__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFinancialProfiles__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFinancialProfiles__ArgProps,
          internalVariantPropNames: PlasmicFinancialProfiles__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFinancialProfiles__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFinancialProfiles";
  } else {
    func.displayName = `PlasmicFinancialProfiles.${nodeName}`;
  }
  return func;
}

export const PlasmicFinancialProfiles = Object.assign(
  // Top-level PlasmicFinancialProfiles renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    cbAccounts: makeNodeComponent("cbAccounts"),
    txtName: makeNodeComponent("txtName"),
    txtNationalId: makeNodeComponent("txtNationalId"),
    txtRegistrationNumber: makeNodeComponent("txtRegistrationNumber"),
    txtEconomicCode: makeNodeComponent("txtEconomicCode"),
    txtPostalCode: makeNodeComponent("txtPostalCode"),
    txtPhone: makeNodeComponent("txtPhone"),
    txtAddress: makeNodeComponent("txtAddress"),
    dialogDelete: makeNodeComponent("dialogDelete"),
    dialog2: makeNodeComponent("dialog2"),
    tabsContainer: makeNodeComponent("tabsContainer"),
    tabUnderline: makeNodeComponent("tabUnderline"),
    txtCardNumber: makeNodeComponent("txtCardNumber"),
    txtCardownerName: makeNodeComponent("txtCardownerName"),
    txtcardIban: makeNodeComponent("txtcardIban"),
    txtcardBank: makeNodeComponent("txtcardBank"),
    txtIban: makeNodeComponent("txtIban"),
    txtibanownerName: makeNodeComponent("txtibanownerName"),
    txtIbanaccountNumber: makeNodeComponent("txtIbanaccountNumber"),
    txtIbaNbankName: makeNodeComponent("txtIbaNbankName"),
    txtIbanPaymentNumber: makeNodeComponent("txtIbanPaymentNumber"),
    sideEffectGetCardInquiry2: makeNodeComponent("sideEffectGetCardInquiry2"),
    sideEffectGetIbanInquiry: makeNodeComponent("sideEffectGetIbanInquiry"),
    accountSettlement: makeNodeComponent("accountSettlement"),
    txtPaymentNumber: makeNodeComponent("txtPaymentNumber"),
    btnActiveRecuringSettlement: makeNodeComponent(
      "btnActiveRecuringSettlement"
    ),
    btnDeleteRecuringSettlement: makeNodeComponent(
      "btnDeleteRecuringSettlement"
    ),
    sideEffectPageLoad: makeNodeComponent("sideEffectPageLoad"),
    loadProfile: makeNodeComponent("loadProfile"),
    refreshRecuringSettlement: makeNodeComponent("refreshRecuringSettlement"),
    embedHtml: makeNodeComponent("embedHtml"),

    // Metadata about props expected for PlasmicFinancialProfiles
    internalVariantProps: PlasmicFinancialProfiles__VariantProps,
    internalArgProps: PlasmicFinancialProfiles__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "اطلاعات مالی",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicFinancialProfiles;
/* prettier-ignore-end */
