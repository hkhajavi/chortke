/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: afXULSfGYmou2jFpEc2QWJ
// Component: a-KvfqLme6-r

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Chart } from "@/fragment/components/chart"; // plasmic-import: -wp9y67o_-GK/codeComponent
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "../chortke/plasmic.module.css"; // plasmic-import: afXULSfGYmou2jFpEc2QWJ/projectcss
import sty from "./PlasmicReport.module.css"; // plasmic-import: a-KvfqLme6-r/css

import Icon2Icon from "../chortke/icons/PlasmicIcon__Icon2"; // plasmic-import: eeiQdsLura6L/icon

createPlasmicElementProxy;

export type PlasmicReport__VariantMembers = {};
export type PlasmicReport__VariantsArgs = {};
type VariantPropType = keyof PlasmicReport__VariantsArgs;
export const PlasmicReport__VariantProps = new Array<VariantPropType>();

export type PlasmicReport__ArgsType = {};
type ArgPropType = keyof PlasmicReport__ArgsType;
export const PlasmicReport__ArgProps = new Array<ArgPropType>();

export type PlasmicReport__OverridesType = {
  root?: Flex__<"div">;
  fragmentChart?: Flex__<typeof Chart>;
  svg?: Flex__<"svg">;
  sideEffectPageLoad?: Flex__<typeof SideEffect>;
};

export interface DefaultReportProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicReport__RenderFunc(props: {
  variants: PlasmicReport__VariantsArgs;
  args: PlasmicReport__ArgsType;
  overrides: PlasmicReport__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "waiting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "userData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            plasmic_fragment_design_system_css.plasmic_tokens,
            sty.root
          )}
        >
          {(() => {
            try {
              return !$state.waiting;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <section className={classNames(projectcss.all, sty.section__lIisa)}>
              <div className={classNames(projectcss.all, sty.freeBox__hYyDj)}>
                <div className={classNames(projectcss.all, sty.freeBox__bRMnq)}>
                  <Chart
                    data-plasmic-name={"fragmentChart"}
                    data-plasmic-override={overrides.fragmentChart}
                    chartConfig={(() => {
                      const __composite = [
                        {
                          color: null,
                          type: "natural",
                          dot: false,
                          key: null,
                          label: null
                        }
                      ];
                      __composite["0"]["color"] = "var(--token-ct9q_Fh0pmQL)";
                      __composite["0"]["key"] = "value1";
                      __composite["0"]["label"] = "key";
                      return __composite;
                    })()}
                    className={classNames("__wab_instance", sty.fragmentChart)}
                    data={[
                      { date: "2025-07-01", value1: 120, value2: 135 },
                      { date: "2025-07-02", value1: 135, value2: 128 },
                      { date: "2025-07-03", value1: 128, value2: 142 },
                      { date: "2025-07-04", value1: 142, value2: 150 },
                      { date: "2025-07-05", value1: 150, value2: 138 },
                      { date: "2025-07-06", value1: 138, value2: 160 },
                      { date: "2025-07-07", value1: 160, value2: 172 },
                      { date: "2025-07-08", value1: 172, value2: 155 },
                      { date: "2025-07-09", value1: 155, value2: 165 },
                      { date: "2025-07-10", value1: 165, value2: 500 },
                      { date: "2025-07-11", value1: 500, value2: 180 },
                      { date: "2025-07-12", value1: 180, value2: 175 },
                      { date: "2025-07-13", value1: 175, value2: 1900 },
                      { date: "2025-07-14", value1: 1900, value2: 2000 },
                      { date: "2025-07-15", value1: 2000, value2: null }
                    ]}
                    dataKey={(() => {
                      const __composite = { key: null, label: null };
                      __composite["key"] = "value";
                      __composite["label"] = "123";
                      return __composite;
                    })()}
                    label={true}
                    layout={"vertical"}
                    legend={true}
                    nameKey={(() => {
                      const __composite = { key: null, label: null };
                      __composite["key"] = "date";
                      __composite["label"] = "444";
                      return __composite;
                    })()}
                    stack={false}
                    type={"line"}
                    xAxis={(() => {
                      const __composite = {
                        key: null,
                        type: null,
                        tickLine: null
                      };
                      __composite["key"] = "date";
                      __composite["type"] = "category";
                      __composite["tickLine"] = false;
                      return __composite;
                    })()}
                    yAxis={(() => {
                      const __composite = { key: null, type: null };
                      __composite["key"] = "value1";
                      __composite["type"] = "number";
                      return __composite;
                    })()}
                  />
                </div>
              </div>
            </section>
          ) : null}
          {(() => {
            try {
              return $state.waiting;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <section className={classNames(projectcss.all, sty.section__izq4X)}>
              <div className={classNames(projectcss.all, sty.freeBox___9N3Pb)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox___8HgSs)}
                >
                  <Icon2Icon
                    data-plasmic-name={"svg"}
                    data-plasmic-override={overrides.svg}
                    className={classNames(projectcss.all, sty.svg)}
                    role={"img"}
                  />
                </div>
              </div>
            </section>
          ) : null}
          <SideEffect
            data-plasmic-name={"sideEffectPageLoad"}
            data-plasmic-override={overrides.sideEffectPageLoad}
            className={classNames("__wab_instance", sty.sideEffectPageLoad)}
            onMount={async () => {
              const $steps = {};

              $steps["updateWaiting"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["waiting"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateWaiting"] != null &&
                typeof $steps["updateWaiting"] === "object" &&
                typeof $steps["updateWaiting"].then === "function"
              ) {
                $steps["updateWaiting"] = await $steps["updateWaiting"];
              }

              $steps["getUsers"] = true
                ? (() => {
                    const actionArgs = {
                      args: ["POST", "https://www.paziresh24.com/api/getUser"]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["getUsers"] != null &&
                typeof $steps["getUsers"] === "object" &&
                typeof $steps["getUsers"].then === "function"
              ) {
                $steps["getUsers"] = await $steps["getUsers"];
              }

              $steps["updateUserData"] =
                $steps.getUsers.status == 200
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["userData"]
                        },
                        operation: 0,
                        value: $steps.getUsers.data
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateUserData"] != null &&
                typeof $steps["updateUserData"] === "object" &&
                typeof $steps["updateUserData"].then === "function"
              ) {
                $steps["updateUserData"] = await $steps["updateUserData"];
              }

              $steps["updateWaiting2"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["waiting"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateWaiting2"] != null &&
                typeof $steps["updateWaiting2"] === "object" &&
                typeof $steps["updateWaiting2"].then === "function"
              ) {
                $steps["updateWaiting2"] = await $steps["updateWaiting2"];
              }
            }}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "fragmentChart", "svg", "sideEffectPageLoad"],
  fragmentChart: ["fragmentChart"],
  svg: ["svg"],
  sideEffectPageLoad: ["sideEffectPageLoad"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  fragmentChart: typeof Chart;
  svg: "svg";
  sideEffectPageLoad: typeof SideEffect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicReport__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicReport__VariantsArgs;
    args?: PlasmicReport__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicReport__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicReport__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicReport__ArgProps,
          internalVariantPropNames: PlasmicReport__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicReport__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicReport";
  } else {
    func.displayName = `PlasmicReport.${nodeName}`;
  }
  return func;
}

export const PlasmicReport = Object.assign(
  // Top-level PlasmicReport renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    fragmentChart: makeNodeComponent("fragmentChart"),
    svg: makeNodeComponent("svg"),
    sideEffectPageLoad: makeNodeComponent("sideEffectPageLoad"),

    // Metadata about props expected for PlasmicReport
    internalVariantProps: PlasmicReport__VariantProps,
    internalArgProps: PlasmicReport__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicReport;
/* prettier-ignore-end */
