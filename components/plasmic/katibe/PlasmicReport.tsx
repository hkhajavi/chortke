/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: afXULSfGYmou2jFpEc2QWJ
// Component: a-KvfqLme6-r

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Select from "../../Select"; // plasmic-import: 7wkEfmUYAcMf/component
import { Chart } from "@/fragment/components/chart"; // plasmic-import: -wp9y67o_-GK/codeComponent
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";

import { useScreenVariants as useScreenVariantsbr2UhI7UlpvR } from "../fragment_icons/PlasmicGlobalVariant__Screen"; // plasmic-import: BR2UhI7ulpvR/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "../chortke/plasmic.module.css"; // plasmic-import: afXULSfGYmou2jFpEc2QWJ/projectcss
import sty from "./PlasmicReport.module.css"; // plasmic-import: a-KvfqLme6-r/css

import Icon2Icon from "../chortke/icons/PlasmicIcon__Icon2"; // plasmic-import: eeiQdsLura6L/icon

createPlasmicElementProxy;

export type PlasmicReport__VariantMembers = {};
export type PlasmicReport__VariantsArgs = {};
type VariantPropType = keyof PlasmicReport__VariantsArgs;
export const PlasmicReport__VariantProps = new Array<VariantPropType>();

export type PlasmicReport__ArgsType = {};
type ArgPropType = keyof PlasmicReport__ArgsType;
export const PlasmicReport__ArgProps = new Array<ArgPropType>();

export type PlasmicReport__OverridesType = {
  root?: Flex__<"div">;
  section?: Flex__<"section">;
  cbAccounts?: Flex__<typeof Select>;
  fragmentChart?: Flex__<typeof Chart>;
  svg?: Flex__<"svg">;
  sideEffectPageLoad?: Flex__<typeof SideEffect>;
  sideEffectRefresh?: Flex__<typeof SideEffect>;
};

export interface DefaultReportProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicReport__RenderFunc(props: {
  variants: PlasmicReport__VariantsArgs;
  args: PlasmicReport__ArgsType;
  overrides: PlasmicReport__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "waiting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "userData",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "cbAccounts.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $state.accounts[0].id;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "accounts",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "refreshCount",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "chartdata",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "currentAccountTitle",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "currentAccountId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "currentAccountType",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbr2UhI7UlpvR()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            plasmic_fragment_design_system_css.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__uz8V)}>
              <div className={classNames(projectcss.all, sty.freeBox__t8L4J)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__wDmEi
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return "حساب کاربری:  ";
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "\u062d\u0633\u0627\u0628 \u06a9\u0627\u0631\u0628\u0631\u06cc: ";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <Select
                  data-plasmic-name={"cbAccounts"}
                  data-plasmic-override={overrides.cbAccounts}
                  aria-label={"name"}
                  aria-labelledby={"id"}
                  className={classNames("__wab_instance", sty.cbAccounts)}
                  name={"accounts"}
                  onChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "cbAccounts",
                        "value"
                      ])(eventArgs[0]);
                    }).apply(null, eventArgs);

                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }

                    (async value => {
                      const $steps = {};

                      $steps["updateRefreshCount"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["refreshCount"]
                              },
                              operation: 2
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              const oldValue = $stateGet(objRoot, variablePath);
                              $stateSet(objRoot, variablePath, oldValue + 1);
                              return oldValue + 1;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateRefreshCount"] != null &&
                        typeof $steps["updateRefreshCount"] === "object" &&
                        typeof $steps["updateRefreshCount"].then === "function"
                      ) {
                        $steps["updateRefreshCount"] = await $steps[
                          "updateRefreshCount"
                        ];
                      }
                    }).apply(null, eventArgs);
                  }}
                  options={(() => {
                    try {
                      return $state.accounts.map(item => ({
                        value: item.uniqueid.toString(),
                        label: item.name.replace("هزینه‌های ", "")
                      }));
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [
                          { value: "option1", label: "Option 1" },
                          { value: "option2", label: "Option 2" }
                        ];
                      }
                      throw e;
                    }
                  })()}
                  placeholder={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__sTwgy
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                        "\u0627\u0646\u062a\u062e\u0627\u0628 \u0646\u0645\u0627\u06cc\u06cc\u062f"
                      ) : (
                        <React.Fragment>
                          {(() => {
                            try {
                              return "حساب مورد نظر را انتخاب نمایید";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u0645\u0631\u06a9\u0632 \u0645\u0648\u0631\u062f \u0646\u0638\u0631 \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u0646\u0645\u0627\u06cc\u06cc\u062f";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      )}
                    </div>
                  }
                  value={generateStateValueProp($state, [
                    "cbAccounts",
                    "value"
                  ])}
                />
              </div>
            </div>
            {(() => {
              try {
                return !$state.waiting;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div className={classNames(projectcss.all, sty.freeBox__hYyDj)}>
                <div className={classNames(projectcss.all, sty.freeBox__bRMnq)}>
                  <Chart
                    data-plasmic-name={"fragmentChart"}
                    data-plasmic-override={overrides.fragmentChart}
                    cartesianGrid={[]}
                    chartConfig={(() => {
                      const __composite = [
                        { color: null, type: "natural", dot: false, key: null }
                      ];
                      __composite["0"]["color"] = "var(--token-ct9q_Fh0pmQL)";
                      __composite["0"]["key"] = "amount";
                      return __composite;
                    })()}
                    className={classNames("__wab_instance", sty.fragmentChart)}
                    data={(() => {
                      try {
                        return $state.chartdata;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    dataKey={(() => {
                      const __composite = { key: null };
                      __composite["key"] = "name";
                      return __composite;
                    })()}
                    label={true}
                    layout={"horizontal"}
                    legend={false}
                    nameKey={(() => {
                      const __composite = { key: null };
                      __composite["key"] = "name";
                      return __composite;
                    })()}
                    stack={false}
                    tooltip={(() => {
                      const __composite = {
                        enabled: null,
                        indicator: null,
                        hideLabel: null,
                        hideIndicator: null
                      };
                      __composite["enabled"] = true;
                      __composite["indicator"] = "line";
                      __composite["hideLabel"] = false;
                      __composite["hideIndicator"] = false;
                      return __composite;
                    })()}
                    type={"bar"}
                    xAxis={(() => {
                      const __composite = {
                        key: null,
                        enabled: null,
                        type: null
                      };
                      __composite["key"] = "name";
                      __composite["enabled"] = true;
                      __composite["type"] = "category";
                      return __composite;
                    })()}
                    yAxis={(() => {
                      const __composite = {
                        key: null,
                        enabled: null,
                        type: null
                      };
                      __composite["key"] = "amount";
                      __composite["enabled"] = true;
                      __composite["type"] = "number";
                      return __composite;
                    })()}
                  />
                </div>
              </div>
            ) : null}
            {(() => {
              try {
                return $state.waiting;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div className={classNames(projectcss.all, sty.freeBox___9N3Pb)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox___8HgSs)}
                >
                  <Icon2Icon
                    data-plasmic-name={"svg"}
                    data-plasmic-override={overrides.svg}
                    className={classNames(projectcss.all, sty.svg)}
                    role={"img"}
                  />
                </div>
              </div>
            ) : null}
          </section>
          <SideEffect
            data-plasmic-name={"sideEffectPageLoad"}
            data-plasmic-override={overrides.sideEffectPageLoad}
            className={classNames("__wab_instance", sty.sideEffectPageLoad)}
            onMount={async () => {
              const $steps = {};

              $steps["updateWaiting"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["waiting"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateWaiting"] != null &&
                typeof $steps["updateWaiting"] === "object" &&
                typeof $steps["updateWaiting"].then === "function"
              ) {
                $steps["updateWaiting"] = await $steps["updateWaiting"];
              }

              $steps["getUsers"] = true
                ? (() => {
                    const actionArgs = {
                      args: ["POST", "https://www.paziresh24.com/api/getUser"]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["getUsers"] != null &&
                typeof $steps["getUsers"] === "object" &&
                typeof $steps["getUsers"].then === "function"
              ) {
                $steps["getUsers"] = await $steps["getUsers"];
              }

              $steps["updateUserData"] =
                $steps.getUsers.status == 200
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["userData"]
                        },
                        operation: 0,
                        value: $steps.getUsers.data
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateUserData"] != null &&
                typeof $steps["updateUserData"] === "object" &&
                typeof $steps["updateUserData"].then === "function"
              ) {
                $steps["updateUserData"] = await $steps["updateUserData"];
              }

              $steps["getUserAccounts"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        (() => {
                          try {
                            return (
                              "https://apigw.paziresh24.com/katibe-useraccounts?user_id=" +
                              ($state.userData?.result?.id ||
                                Math.random().toString(36).substring(2, 15))
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["getUserAccounts"] != null &&
                typeof $steps["getUserAccounts"] === "object" &&
                typeof $steps["getUserAccounts"].then === "function"
              ) {
                $steps["getUserAccounts"] = await $steps["getUserAccounts"];
              }

              $steps["updateWaiting3"] =
                $steps.getUserAccounts.status == 200
                  ? (() => {
                      const actionArgs = {
                        customFunction: async () => {
                          return (() => {
                            const data = $steps.getUserAccounts.data.data;
                            const uniqueData = [];
                            const seenIds = new Set();
                            data.forEach(item => {
                              if (!seenIds.has(item.id)) {
                                seenIds.add(item.id);
                                uniqueData.push(item);
                              }
                            });
                            return ($state.accounts = uniqueData);
                          })();
                        }
                      };
                      return (({ customFunction }) => {
                        return customFunction();
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateWaiting3"] != null &&
                typeof $steps["updateWaiting3"] === "object" &&
                typeof $steps["updateWaiting3"].then === "function"
              ) {
                $steps["updateWaiting3"] = await $steps["updateWaiting3"];
              }

              $steps["updateWaiting4"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          if ($state.accounts.length > 0)
                            return ($state.cbAccounts.value =
                              $state.accounts[
                                $state.accounts.length - 1
                              ].uniqueid);
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateWaiting4"] != null &&
                typeof $steps["updateWaiting4"] === "object" &&
                typeof $steps["updateWaiting4"].then === "function"
              ) {
                $steps["updateWaiting4"] = await $steps["updateWaiting4"];
              }

              $steps["updateWaiting5"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          if ($steps.getUsers.data.isDoctor == true) {
                            return $state.accounts.forEach(item => {
                              if (item.account === "p24") {
                                item.name = "ویزیت آنلاین " + item.name;
                              }
                            });
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateWaiting5"] != null &&
                typeof $steps["updateWaiting5"] === "object" &&
                typeof $steps["updateWaiting5"].then === "function"
              ) {
                $steps["updateWaiting5"] = await $steps["updateWaiting5"];
              }

              $steps["updateWaiting2"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["waiting"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateWaiting2"] != null &&
                typeof $steps["updateWaiting2"] === "object" &&
                typeof $steps["updateWaiting2"].then === "function"
              ) {
                $steps["updateWaiting2"] = await $steps["updateWaiting2"];
              }

              $steps["updateWaiting6"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["refreshCount"]
                      },
                      operation: 2
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      const oldValue = $stateGet(objRoot, variablePath);
                      $stateSet(objRoot, variablePath, oldValue + 1);
                      return oldValue + 1;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateWaiting6"] != null &&
                typeof $steps["updateWaiting6"] === "object" &&
                typeof $steps["updateWaiting6"].then === "function"
              ) {
                $steps["updateWaiting6"] = await $steps["updateWaiting6"];
              }
            }}
          />

          <SideEffect
            data-plasmic-name={"sideEffectRefresh"}
            data-plasmic-override={overrides.sideEffectRefresh}
            className={classNames("__wab_instance", sty.sideEffectRefresh)}
            deps={(() => {
              try {
                return [$state.refreshCount];
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            onMount={async () => {
              const $steps = {};

              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          $state.waiting = true;
                          $state.chartdata = [];
                          return $state.accounts.forEach(account => {
                            if (account.uniqueid == $state.cbAccounts.value) {
                              $state.currentAccountType = account.type;
                              $state.currentAccountId = account.id;
                              $state.currentAccountTitle = account.name;
                            }
                          });
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }

              $steps["transactionsP24IncomeMonthly"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        (() => {
                          try {
                            return (
                              "https://apigw.paziresh24.com/katibe/v1/transactions/report/p24/income/monthly" +
                              ($state.currentAccountType == "centerid"
                                ? "?centerid=" + $state.currentAccountId
                                : "")
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["transactionsP24IncomeMonthly"] != null &&
                typeof $steps["transactionsP24IncomeMonthly"] === "object" &&
                typeof $steps["transactionsP24IncomeMonthly"].then ===
                  "function"
              ) {
                $steps["transactionsP24IncomeMonthly"] = await $steps[
                  "transactionsP24IncomeMonthly"
                ];
              }

              $steps["updateWaiting2"] =
                $steps.transactionsP24IncomeMonthly.status == 200
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["chartdata"]
                        },
                        operation: 0,
                        value: $steps.transactionsP24IncomeMonthly.data.data
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateWaiting2"] != null &&
                typeof $steps["updateWaiting2"] === "object" &&
                typeof $steps["updateWaiting2"].then === "function"
              ) {
                $steps["updateWaiting2"] = await $steps["updateWaiting2"];
              }

              $steps["updateWaiting3"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["waiting"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateWaiting3"] != null &&
                typeof $steps["updateWaiting3"] === "object" &&
                typeof $steps["updateWaiting3"].then === "function"
              ) {
                $steps["updateWaiting3"] = await $steps["updateWaiting3"];
              }
            }}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "cbAccounts",
    "fragmentChart",
    "svg",
    "sideEffectPageLoad",
    "sideEffectRefresh"
  ],
  section: ["section", "cbAccounts", "fragmentChart", "svg"],
  cbAccounts: ["cbAccounts"],
  fragmentChart: ["fragmentChart"],
  svg: ["svg"],
  sideEffectPageLoad: ["sideEffectPageLoad"],
  sideEffectRefresh: ["sideEffectRefresh"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
  cbAccounts: typeof Select;
  fragmentChart: typeof Chart;
  svg: "svg";
  sideEffectPageLoad: typeof SideEffect;
  sideEffectRefresh: typeof SideEffect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicReport__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicReport__VariantsArgs;
    args?: PlasmicReport__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicReport__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicReport__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicReport__ArgProps,
          internalVariantPropNames: PlasmicReport__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicReport__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicReport";
  } else {
    func.displayName = `PlasmicReport.${nodeName}`;
  }
  return func;
}

export const PlasmicReport = Object.assign(
  // Top-level PlasmicReport renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    cbAccounts: makeNodeComponent("cbAccounts"),
    fragmentChart: makeNodeComponent("fragmentChart"),
    svg: makeNodeComponent("svg"),
    sideEffectPageLoad: makeNodeComponent("sideEffectPageLoad"),
    sideEffectRefresh: makeNodeComponent("sideEffectRefresh"),

    // Metadata about props expected for PlasmicReport
    internalVariantProps: PlasmicReport__VariantProps,
    internalArgProps: PlasmicReport__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicReport;
/* prettier-ignore-end */
