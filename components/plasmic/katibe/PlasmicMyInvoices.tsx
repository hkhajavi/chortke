// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: afXULSfGYmou2jFpEc2QWJ
// Component: GjxR5_VkIiX-

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { TabsContainer } from "@plasmicpkgs/plasmic-tabs";
import { TabButton } from "@plasmicpkgs/plasmic-tabs";
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import { TabUnderline } from "@plasmicpkgs/plasmic-tabs";
import { TabContent } from "@plasmicpkgs/plasmic-tabs";
import { Iframe } from "@plasmicpkgs/plasmic-basic-components";
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "../chortke/plasmic.module.css"; // plasmic-import: afXULSfGYmou2jFpEc2QWJ/projectcss
import sty from "./PlasmicMyInvoices.module.css"; // plasmic-import: GjxR5_VkIiX-/css

import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicMyInvoices__VariantMembers = {};
export type PlasmicMyInvoices__VariantsArgs = {};
type VariantPropType = keyof PlasmicMyInvoices__VariantsArgs;
export const PlasmicMyInvoices__VariantProps = new Array<VariantPropType>();

export type PlasmicMyInvoices__ArgsType = {};
type ArgPropType = keyof PlasmicMyInvoices__ArgsType;
export const PlasmicMyInvoices__ArgProps = new Array<ArgPropType>();

export type PlasmicMyInvoices__OverridesType = {
  root?: Flex__<"div">;
  h3?: Flex__<"h3">;
  tabsContainer?: Flex__<typeof TabsContainer>;
  tabUnderline?: Flex__<typeof TabUnderline>;
  sideEffect?: Flex__<typeof SideEffect>;
};

export interface DefaultMyInvoicesProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMyInvoices__RenderFunc(props: {
  variants: PlasmicMyInvoices__VariantsArgs;
  args: PlasmicMyInvoices__ArgsType;
  overrides: PlasmicMyInvoices__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicMyInvoices.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicMyInvoices.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicMyInvoices.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            plasmic_fragment_design_system_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__kVgw2)}>
            <div className={classNames(projectcss.all, sty.freeBox__seavv)}>
              <h3
                data-plasmic-name={"h3"}
                data-plasmic-override={overrides.h3}
                className={classNames(
                  projectcss.all,
                  projectcss.h3,
                  projectcss.__wab_text,
                  sty.h3
                )}
              >
                {
                  "\u0635\u0648\u0631\u062a \u062d\u0633\u0627\u0628\u200c\u0647\u0627 \u0648 \u062a\u0631\u0627\u06a9\u0646\u0634\u200c\u0647\u0627\u06cc \u0645\u0627\u0644\u06cc"
                }
              </h3>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__j2B68)}>
            <TabsContainer
              data-plasmic-name={"tabsContainer"}
              data-plasmic-override={overrides.tabsContainer}
              className={classNames("__wab_instance", sty.tabsContainer)}
              initialKey={"tab1"}
            >
              <DataCtxReader__>
                {$ctx => (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___1PYjz)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___8Davx
                      )}
                    >
                      <TabButton
                        className={classNames(
                          "__wab_instance",
                          sty.tabButton__ywpCa
                        )}
                        tabKey={"tab1"}
                      >
                        <Button
                          children2={
                            "\u062a\u0631\u0627\u06a9\u0646\u0634\u200c\u0647\u0627\u06cc \u0645\u0646"
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.button__rzuhF
                          )}
                          color={"text"}
                        />
                      </TabButton>
                      <TabButton
                        className={classNames(
                          "__wab_instance",
                          sty.tabButton__mBvZm
                        )}
                        tabKey={"tab2"}
                      >
                        <Button
                          children2={
                            "\u067e\u0631\u0648\u062f\u0627\u06a9\u062a\u200c\u0647\u0627\u06cc \u0645\u0646"
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.button__haevY
                          )}
                          color={"text"}
                        />
                      </TabButton>
                      <TabUnderline
                        data-plasmic-name={"tabUnderline"}
                        data-plasmic-override={overrides.tabUnderline}
                        className={classNames(
                          "__wab_instance",
                          sty.tabUnderline
                        )}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__tngP)}
                    >
                      <TabContent
                        className={classNames(
                          "__wab_instance",
                          sty.tabContent__mjXsz
                        )}
                        tabKey={"tab1"}
                      >
                        <Iframe
                          className={classNames(
                            "__wab_instance",
                            sty.iframe__dKscF
                          )}
                          preview={true}
                          src={
                            "https://katibe.paziresh24.com/transactions-search/"
                          }
                        />
                      </TabContent>
                      <TabContent
                        className={classNames(
                          "__wab_instance",
                          sty.tabContent__hmZwA
                        )}
                        tabKey={"tab2"}
                      >
                        <Iframe
                          className={classNames(
                            "__wab_instance",
                            sty.iframe__uBvqy
                          )}
                          preview={true}
                          src={"https://katibe.paziresh24.com/productAdmin"}
                        />
                      </TabContent>
                    </div>
                  </div>
                )}
              </DataCtxReader__>
            </TabsContainer>
          </div>
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};

              $steps["authMe"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://apigw.paziresh24.com/v1/auth/me"
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["authMe"] != null &&
                typeof $steps["authMe"] === "object" &&
                typeof $steps["authMe"].then === "function"
              ) {
                $steps["authMe"] = await $steps["authMe"];
              }

              $steps[
                "goToHttpsWwwPaziresh24ComLoginRedirectUrlHttpsKatibePaziresh24ComTransactions"
              ] =
                $steps.authMe.status != 200
                  ? (() => {
                      const actionArgs = {
                        destination:
                          "https://www.paziresh24.com/login/?redirect_url=https://katibe.paziresh24.com/transactions"
                      };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps[
                  "goToHttpsWwwPaziresh24ComLoginRedirectUrlHttpsKatibePaziresh24ComTransactions"
                ] != null &&
                typeof $steps[
                  "goToHttpsWwwPaziresh24ComLoginRedirectUrlHttpsKatibePaziresh24ComTransactions"
                ] === "object" &&
                typeof $steps[
                  "goToHttpsWwwPaziresh24ComLoginRedirectUrlHttpsKatibePaziresh24ComTransactions"
                ].then === "function"
              ) {
                $steps[
                  "goToHttpsWwwPaziresh24ComLoginRedirectUrlHttpsKatibePaziresh24ComTransactions"
                ] = await $steps[
                  "goToHttpsWwwPaziresh24ComLoginRedirectUrlHttpsKatibePaziresh24ComTransactions"
                ];
              }
            }}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h3", "tabsContainer", "tabUnderline", "sideEffect"],
  h3: ["h3"],
  tabsContainer: ["tabsContainer", "tabUnderline"],
  tabUnderline: ["tabUnderline"],
  sideEffect: ["sideEffect"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h3: "h3";
  tabsContainer: typeof TabsContainer;
  tabUnderline: typeof TabUnderline;
  sideEffect: typeof SideEffect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMyInvoices__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMyInvoices__VariantsArgs;
    args?: PlasmicMyInvoices__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMyInvoices__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicMyInvoices__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMyInvoices__ArgProps,
          internalVariantPropNames: PlasmicMyInvoices__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMyInvoices__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMyInvoices";
  } else {
    func.displayName = `PlasmicMyInvoices.${nodeName}`;
  }
  return func;
}

export const PlasmicMyInvoices = Object.assign(
  // Top-level PlasmicMyInvoices renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h3: makeNodeComponent("h3"),
    tabsContainer: makeNodeComponent("tabsContainer"),
    tabUnderline: makeNodeComponent("tabUnderline"),
    sideEffect: makeNodeComponent("sideEffect"),

    // Metadata about props expected for PlasmicMyInvoices
    internalVariantProps: PlasmicMyInvoices__VariantProps,
    internalArgProps: PlasmicMyInvoices__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "تراکنش‌های مالی",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicMyInvoices;
/* prettier-ignore-end */
