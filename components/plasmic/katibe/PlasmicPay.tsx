/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: afXULSfGYmou2jFpEc2QWJ
// Component: fXYKZYfose53

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";

import { useScreenVariants as useScreenVariantsbr2UhI7UlpvR } from "../fragment_icons/PlasmicGlobalVariant__Screen"; // plasmic-import: BR2UhI7ulpvR/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "../chortke/plasmic.module.css"; // plasmic-import: afXULSfGYmou2jFpEc2QWJ/projectcss
import sty from "./PlasmicPay.module.css"; // plasmic-import: fXYKZYfose53/css

import Icon50Icon from "./icons/PlasmicIcon__Icon50"; // plasmic-import: xtxGD9pXGJw4/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import Icon2Icon from "../chortke/icons/PlasmicIcon__Icon2"; // plasmic-import: eeiQdsLura6L/icon

createPlasmicElementProxy;

export type PlasmicPay__VariantMembers = {};
export type PlasmicPay__VariantsArgs = {};
type VariantPropType = keyof PlasmicPay__VariantsArgs;
export const PlasmicPay__VariantProps = new Array<VariantPropType>();

export type PlasmicPay__ArgsType = {};
type ArgPropType = keyof PlasmicPay__ArgsType;
export const PlasmicPay__ArgProps = new Array<ArgPropType>();

export type PlasmicPay__OverridesType = {
  pay?: Flex__<"div">;
  sideEffectPageLoad?: Flex__<typeof SideEffect>;
  section?: Flex__<"section">;
  embedHtml?: Flex__<typeof Embed>;
};

export interface DefaultPayProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPay__RenderFunc(props: {
  variants: PlasmicPay__VariantsArgs;
  args: PlasmicPay__ArgsType;
  overrides: PlasmicPay__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "waiting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "balance",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "paymentLink",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "me",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "verifyResponse",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "iplocation",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "cardToCardRequest",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "waitingcardtocard",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "hasCardToCardRequest",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "cardToCardVerify",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "cardToCardHasVerify",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "cardToCardAutoCheck",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "splits",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbr2UhI7UlpvR()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicPay.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicPay.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicPay.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"pay"}
          data-plasmic-override={overrides.pay}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            plasmic_fragment_design_system_css.plasmic_tokens,
            sty.pay
          )}
        >
          <SideEffect
            data-plasmic-name={"sideEffectPageLoad"}
            data-plasmic-override={overrides.sideEffectPageLoad}
            className={classNames("__wab_instance", sty.sideEffectPageLoad)}
            deps={(() => {
              try {
                return [$ctx.params.id];
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            onMount={async () => {
              const $steps = {};

              $steps["updateWaiting"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["waiting"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateWaiting"] != null &&
                typeof $steps["updateWaiting"] === "object" &&
                typeof $steps["updateWaiting"].then === "function"
              ) {
                $steps["updateWaiting"] = await $steps["updateWaiting"];
              }

              $steps["me"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://apigw.paziresh24.com/v1/auth/me"
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["me"] != null &&
                typeof $steps["me"] === "object" &&
                typeof $steps["me"].then === "function"
              ) {
                $steps["me"] = await $steps["me"];
              }

              $steps["updateMe"] =
                $steps.me.status == 200
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["me"]
                        },
                        operation: 0,
                        value: $steps.me.data
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateMe"] != null &&
                typeof $steps["updateMe"] === "object" &&
                typeof $steps["updateMe"].then === "function"
              ) {
                $steps["updateMe"] = await $steps["updateMe"];
              }

              $steps["redirectLogin"] =
                $steps.me.status != 200
                  ? (() => {
                      const actionArgs = {
                        args: [
                          (() => {
                            try {
                              return (
                                "https://www.paziresh24.com/login/?redirect_url=https://www.paziresh24.com/_/katibe/pay/" +
                                $ctx.params.id +
                                "/"
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Hamdast.openLink"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
              if (
                $steps["redirectLogin"] != null &&
                typeof $steps["redirectLogin"] === "object" &&
                typeof $steps["redirectLogin"].then === "function"
              ) {
                $steps["redirectLogin"] = await $steps["redirectLogin"];
              }

              $steps["getSplits"] =
                $ctx.params.id != undefined
                  ? (() => {
                      const actionArgs = {
                        args: [
                          undefined,
                          (() => {
                            try {
                              return (
                                "https://apigw.paziresh24.com/katibe/v1/splits/details/p24/" +
                                ($ctx.params.id || $ctx.query.id)
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })(),
                          undefined
                        ]
                      };
                      return $globalActions["Fragment.apiRequest"]?.apply(
                        null,
                        [...actionArgs.args]
                      );
                    })()
                  : undefined;
              if (
                $steps["getSplits"] != null &&
                typeof $steps["getSplits"] === "object" &&
                typeof $steps["getSplits"].then === "function"
              ) {
                $steps["getSplits"] = await $steps["getSplits"];
              }

              $steps["updateSplits"] =
                $steps.getSplits.status == 200 && $ctx.params.id != undefined
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["splits"]
                        },
                        operation: 0,
                        value: $steps.getSplits.data.data
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateSplits"] != null &&
                typeof $steps["updateSplits"] === "object" &&
                typeof $steps["updateSplits"].then === "function"
              ) {
                $steps["updateSplits"] = await $steps["updateSplits"];
              }

              $steps["redirectFalse"] =
                $state.splits.status == "canceled"
                  ? (() => {
                      const actionArgs = {
                        args: [
                          (() => {
                            try {
                              return $state.splits.return_link.includes("?")
                                ? $state.splits.return_link + "&status=false"
                                : $state.splits.return_link + "?status=false";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Hamdast.openLink"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
              if (
                $steps["redirectFalse"] != null &&
                typeof $steps["redirectFalse"] === "object" &&
                typeof $steps["redirectFalse"].then === "function"
              ) {
                $steps["redirectFalse"] = await $steps["redirectFalse"];
              }

              $steps["redirectTrue"] =
                $state.splits.transferid > 0
                  ? (() => {
                      const actionArgs = {
                        args: [
                          (() => {
                            try {
                              return $state.splits.return_link.includes("?")
                                ? $state.splits.return_link + "&status=true"
                                : $state.splits.return_link + "?status=true";
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return undefined;
                              }
                              throw e;
                            }
                          })()
                        ]
                      };
                      return $globalActions["Hamdast.openLink"]?.apply(null, [
                        ...actionArgs.args
                      ]);
                    })()
                  : undefined;
              if (
                $steps["redirectTrue"] != null &&
                typeof $steps["redirectTrue"] === "object" &&
                typeof $steps["redirectTrue"].then === "function"
              ) {
                $steps["redirectTrue"] = await $steps["redirectTrue"];
              }

              $steps["getBalance"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://apigw.paziresh24.com/katibe/v1/transactions/balance/p24"
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["getBalance"] != null &&
                typeof $steps["getBalance"] === "object" &&
                typeof $steps["getBalance"].then === "function"
              ) {
                $steps["getBalance"] = await $steps["getBalance"];
              }

              $steps["updateBalance"] =
                $steps.getBalance.status == 200
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["balance"]
                        },
                        operation: 0,
                        value: $steps.getBalance.data.data.balance
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateBalance"] != null &&
                typeof $steps["updateBalance"] === "object" &&
                typeof $steps["updateBalance"].then === "function"
              ) {
                $steps["updateBalance"] = await $steps["updateBalance"];
              }

              $steps["updateWaiting2"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["waiting"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateWaiting2"] != null &&
                typeof $steps["updateWaiting2"] === "object" &&
                typeof $steps["updateWaiting2"].then === "function"
              ) {
                $steps["updateWaiting2"] = await $steps["updateWaiting2"];
              }
            }}
          />

          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__pTExT)}>
              <div className={classNames(projectcss.all, sty.freeBox__szLnC)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ekJj
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $state.splits.description;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__wlFOn)}>
              <div className={classNames(projectcss.all, sty.freeBox__sw5Wo)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yfhDc
                  )}
                >
                  {"\u0645\u0628\u0644\u063a:"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__srmzt
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (
                          new Intl.NumberFormat("fa-IR").format(
                            $state.splits.user_amount || 0
                          ) + " ریال"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___6Bmg3)}>
              <div className={classNames(projectcss.all, sty.freeBox__y9Cba)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__skBon
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "\u0645\u0648\u062c\u0648\u062f\u06cc \u06a9\u06cc\u0641 \u067e\u0648\u0644:"
                    : "\u0645\u0648\u062c\u0648\u062f\u06cc \u06a9\u06cc\u0641 \u067e\u0648\u0644:"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jnNv
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (
                          new Intl.NumberFormat("fa-IR").format(
                            $state.balance || 0
                          ) + " ریال"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__lL7S)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__rqDrs)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__uzo26
                  )}
                >
                  {
                    "\u0642\u0627\u0628\u0644 \u067e\u0631\u062f\u0627\u062e\u062a:"
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rAwxn
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return (() => {
                          return $state.splits.user_amount - $state.balance > 0
                            ? new Intl.NumberFormat("fa-IR").format(
                                $state.splits.user_amount - $state.balance || 0
                              ) + " ریال"
                            : "0 ریال";
                        })();
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </Stack__>
            </div>
            {(() => {
              try {
                return (
                  $state.iplocation.length > 0 &&
                  $state.iplocation.toLowerCase().trim() != "iran"
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div className={classNames(projectcss.all, sty.freeBox___30EL)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox___9J65H)}
                >
                  <Icon50Icon
                    className={classNames(projectcss.all, sty.svg__zPr4I)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dioiY
                    )}
                  >
                    {
                      "\u06a9\u0627\u0631\u0628\u0631 \u06af\u0631\u0627\u0645\u06cc\u060c \u0628\u0647\u200c\u0646\u0638\u0631 \u0645\u06cc\u200c\u0631\u0633\u062f \u0641\u06cc\u0644\u062a\u0631\u0634\u06a9\u0646 \u06cc\u0627 VPN \u0634\u0645\u0627 \u0641\u0639\u0627\u0644 \u0627\u0633\u062a. \u0644\u0637\u0641\u0627\u064b \u0622\u0646 \u0631\u0627 \u062e\u0627\u0645\u0648\u0634 \u06a9\u0631\u062f\u0647 \u0648 \u0633\u067e\u0633 \u062f\u06a9\u0645\u0647 \u201c\u0627\u0631\u0633\u0627\u0644 \u0628\u0647 \u062f\u0631\u06af\u0627\u0647 \u067e\u0631\u062f\u0627\u062e\u062a\u201d \u0631\u0627 \u0628\u0632\u0646\u06cc\u062f."
                    }
                  </div>
                </div>
              </div>
            ) : null}
            <div className={classNames(projectcss.all, sty.freeBox__mGnIw)}>
              <div className={classNames(projectcss.all, sty.freeBox__fzrje)}>
                {(() => {
                  try {
                    return (
                      !$state.waiting &&
                      $state.splits.user_amount > $state.balance
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Button
                    children2={
                      "\u0627\u0631\u0633\u0627\u0644 \u0628\u0647 \u062f\u0631\u06af\u0627\u0647 \u067e\u0631\u062f\u0627\u062e\u062a"
                    }
                    className={classNames("__wab_instance", sty.button__vghbE)}
                    isDisabled={(() => {
                      try {
                        return $state.waiting;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateWaiting"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["waiting"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateWaiting"] != null &&
                        typeof $steps["updateWaiting"] === "object" &&
                        typeof $steps["updateWaiting"].then === "function"
                      ) {
                        $steps["updateWaiting"] = await $steps["updateWaiting"];
                      }

                      $steps["paymentRequest"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://apigw.paziresh24.com/katibe/v1/paymentlink/p24",
                                (() => {
                                  try {
                                    return {
                                      productid: 1,
                                      returnlink: globalThis.btoa(
                                        "https://apigw.paziresh24.com/katibe/v1/splits/pay/p24/" +
                                          $ctx.params.id
                                      ),
                                      cancel_returnlink: globalThis.btoa(
                                        "https://www.paziresh24.com/_/katibe/pay/" +
                                          $ctx.params.id
                                      ),
                                      title: "افزایش موجودی",
                                      amount:
                                        $state.splits.user_amount -
                                        $state.balance,
                                      receipt_id: $state.splits.receipt_id
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["paymentRequest"] != null &&
                        typeof $steps["paymentRequest"] === "object" &&
                        typeof $steps["paymentRequest"].then === "function"
                      ) {
                        $steps["paymentRequest"] = await $steps[
                          "paymentRequest"
                        ];
                      }

                      $steps["updatePaymentLink"] =
                        $steps.paymentRequest.status == 200 &&
                        $steps.paymentRequest.data.status == true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["paymentLink"]
                                },
                                operation: 0,
                                value: $steps.paymentRequest.data.data.link
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updatePaymentLink"] != null &&
                        typeof $steps["updatePaymentLink"] === "object" &&
                        typeof $steps["updatePaymentLink"].then === "function"
                      ) {
                        $steps["updatePaymentLink"] = await $steps[
                          "updatePaymentLink"
                        ];
                      }

                      $steps["redirectUser"] =
                        $steps.paymentRequest.status == 200 &&
                        $steps.paymentRequest.data.status == true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  (() => {
                                    try {
                                      return $state.paymentLink;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions["Hamdast.openLink"]?.apply(
                                null,
                                [...actionArgs.args]
                              );
                            })()
                          : undefined;
                      if (
                        $steps["redirectUser"] != null &&
                        typeof $steps["redirectUser"] === "object" &&
                        typeof $steps["redirectUser"].then === "function"
                      ) {
                        $steps["redirectUser"] = await $steps["redirectUser"];
                      }

                      $steps["updateWaiting2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["waiting"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateWaiting2"] != null &&
                        typeof $steps["updateWaiting2"] === "object" &&
                        typeof $steps["updateWaiting2"].then === "function"
                      ) {
                        $steps["updateWaiting2"] = await $steps[
                          "updateWaiting2"
                        ];
                      }
                    }}
                    size={"compact"}
                  />
                ) : null}
                {(() => {
                  try {
                    return (
                      !$state.waiting &&
                      $state.splits.user_amount <= $state.balance
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Button
                    children2={
                      "\u067e\u0631\u062f\u0627\u062e\u062a \u0628\u0627 \u06a9\u06cc\u0641 \u067e\u0648\u0644"
                    }
                    className={classNames("__wab_instance", sty.button___6Apy5)}
                    isDisabled={(() => {
                      try {
                        return $state.waiting;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateWaiting"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["waiting"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateWaiting"] != null &&
                        typeof $steps["updateWaiting"] === "object" &&
                        typeof $steps["updateWaiting"].then === "function"
                      ) {
                        $steps["updateWaiting"] = await $steps["updateWaiting"];
                      }

                      $steps["redirectUser"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                (() => {
                                  try {
                                    return (
                                      "https://apigw.paziresh24.com/katibe/v1/splits/pay/p24/" +
                                      $state.splits.id
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Hamdast.openLink"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["redirectUser"] != null &&
                        typeof $steps["redirectUser"] === "object" &&
                        typeof $steps["redirectUser"].then === "function"
                      ) {
                        $steps["redirectUser"] = await $steps["redirectUser"];
                      }
                    }}
                    size={"compact"}
                  />
                ) : null}
                {(() => {
                  try {
                    return $state.waiting;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Icon2Icon
                    className={classNames(projectcss.all, sty.svg__qi1Yn)}
                    role={"img"}
                  />
                ) : null}
              </div>
            </div>
          </section>
          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml)}
            code={
              '<script type="text/javascript">\r\n    (function(c,l,a,r,i,t,y){\r\n        c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};\r\n        t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;\r\n        y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);\r\n    })(window, document, "clarity", "script", "rr61es0fkb");\r\n</script>'
            }
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  pay: ["pay", "sideEffectPageLoad", "section", "embedHtml"],
  sideEffectPageLoad: ["sideEffectPageLoad"],
  section: ["section"],
  embedHtml: ["embedHtml"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  pay: "div";
  sideEffectPageLoad: typeof SideEffect;
  section: "section";
  embedHtml: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPay__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPay__VariantsArgs;
    args?: PlasmicPay__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPay__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPay__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPay__ArgProps,
          internalVariantPropNames: PlasmicPay__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPay__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "pay") {
    func.displayName = "PlasmicPay";
  } else {
    func.displayName = `PlasmicPay.${nodeName}`;
  }
  return func;
}

export const PlasmicPay = Object.assign(
  // Top-level PlasmicPay renders the root element
  makeNodeComponent("pay"),
  {
    // Helper components rendering sub-elements
    sideEffectPageLoad: makeNodeComponent("sideEffectPageLoad"),
    section: makeNodeComponent("section"),
    embedHtml: makeNodeComponent("embedHtml"),

    // Metadata about props expected for PlasmicPay
    internalVariantProps: PlasmicPay__VariantProps,
    internalArgProps: PlasmicPay__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "پرداخت",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPay;
/* prettier-ignore-end */
