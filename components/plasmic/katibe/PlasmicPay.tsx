/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: afXULSfGYmou2jFpEc2QWJ
// Component: fXYKZYfose53

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import Button from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import RadioGroup from "../../RadioGroup"; // plasmic-import: tqHTZfyBziuN/component
import Radio from "../../Radio"; // plasmic-import: Cbq_rTXOD16b/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: afXULSfGYmou2jFpEc2QWJ/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: afXULSfGYmou2jFpEc2QWJ/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: afXULSfGYmou2jFpEc2QWJ/projectcss
import sty from "./PlasmicPay.module.css"; // plasmic-import: fXYKZYfose53/css

import Icon50Icon from "./icons/PlasmicIcon__Icon50"; // plasmic-import: xtxGD9pXGJw4/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon

createPlasmicElementProxy;

export type PlasmicPay__VariantMembers = {};
export type PlasmicPay__VariantsArgs = {};
type VariantPropType = keyof PlasmicPay__VariantsArgs;
export const PlasmicPay__VariantProps = new Array<VariantPropType>();

export type PlasmicPay__ArgsType = {};
type ArgPropType = keyof PlasmicPay__ArgsType;
export const PlasmicPay__ArgProps = new Array<ArgPropType>();

export type PlasmicPay__OverridesType = {
  pay?: Flex__<"div">;
  sideEffectPageLoad?: Flex__<typeof SideEffect>;
  svg?: Flex__<"svg">;
  paymentsMethod?: Flex__<typeof RadioGroup>;
  btnPayMethod?: Flex__<typeof Button>;
  embedHtml?: Flex__<typeof Embed>;
};

export interface DefaultPayProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPay__RenderFunc(props: {
  variants: PlasmicPay__VariantsArgs;
  args: PlasmicPay__ArgsType;
  overrides: PlasmicPay__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "waiting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "balance",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "paymentLink",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "me",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "verifyResponse",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "iplocation",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "cardToCardRequest",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "waitingcardtocard",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "hasCardToCardRequest",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "cardToCardVerify",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "cardToCardHasVerify",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "cardToCardAutoCheck",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "splits",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "paymentsMethod.value",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicPay.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicPay.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicPay.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"pay"}
          data-plasmic-override={overrides.pay}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.pay
          )}
        >
          <SideEffect
            data-plasmic-name={"sideEffectPageLoad"}
            data-plasmic-override={overrides.sideEffectPageLoad}
            className={classNames("__wab_instance", sty.sideEffectPageLoad)}
            deps={(() => {
              try {
                return [$ctx.query.amount];
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            onMount={async () => {
              const $steps = {};

              $steps["updateWaiting"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["waiting"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateWaiting"] != null &&
                typeof $steps["updateWaiting"] === "object" &&
                typeof $steps["updateWaiting"].then === "function"
              ) {
                $steps["updateWaiting"] = await $steps["updateWaiting"];
              }

              $steps["me"] = false
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://apigw.paziresh24.com/v1/auth/me"
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["me"] != null &&
                typeof $steps["me"] === "object" &&
                typeof $steps["me"].then === "function"
              ) {
                $steps["me"] = await $steps["me"];
              }

              $steps["updateMe"] = false
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["me"]
                      },
                      operation: 0,
                      value: $steps.me.data
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateMe"] != null &&
                typeof $steps["updateMe"] === "object" &&
                typeof $steps["updateMe"].then === "function"
              ) {
                $steps["updateMe"] = await $steps["updateMe"];
              }

              $steps["redirectLogin"] = false
                ? (() => {
                    const actionArgs = {
                      args: [
                        (() => {
                          try {
                            return (
                              "https://www.paziresh24.com/login/?redirect_url=https://www.paziresh24.com/_/katibe/pay/" +
                              $ctx.params.id +
                              "/"
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Hamdast.openLink"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["redirectLogin"] != null &&
                typeof $steps["redirectLogin"] === "object" &&
                typeof $steps["redirectLogin"].then === "function"
              ) {
                $steps["redirectLogin"] = await $steps["redirectLogin"];
              }

              $steps["getSplits"] = false
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        (() => {
                          try {
                            return (
                              "https://apigw.paziresh24.com/katibe/v1/splits/details/p24/" +
                              ($ctx.params.id || $ctx.query.id)
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })(),
                        undefined
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["getSplits"] != null &&
                typeof $steps["getSplits"] === "object" &&
                typeof $steps["getSplits"].then === "function"
              ) {
                $steps["getSplits"] = await $steps["getSplits"];
              }

              $steps["updateSplits"] = false
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["splits"]
                      },
                      operation: 0,
                      value: $steps.getSplits.data.data
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateSplits"] != null &&
                typeof $steps["updateSplits"] === "object" &&
                typeof $steps["updateSplits"].then === "function"
              ) {
                $steps["updateSplits"] = await $steps["updateSplits"];
              }

              $steps["redirectFalse"] = false
                ? (() => {
                    const actionArgs = {
                      args: [
                        (() => {
                          try {
                            return $state.splits.return_link.includes("?")
                              ? $state.splits.return_link + "&status=false"
                              : $state.splits.return_link + "?status=false";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Hamdast.openLink"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["redirectFalse"] != null &&
                typeof $steps["redirectFalse"] === "object" &&
                typeof $steps["redirectFalse"].then === "function"
              ) {
                $steps["redirectFalse"] = await $steps["redirectFalse"];
              }

              $steps["redirectTrue"] = false
                ? (() => {
                    const actionArgs = {
                      args: [
                        (() => {
                          try {
                            return $state.splits.return_link.includes("?")
                              ? $state.splits.return_link + "&status=true"
                              : $state.splits.return_link + "?status=true";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Hamdast.openLink"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["redirectTrue"] != null &&
                typeof $steps["redirectTrue"] === "object" &&
                typeof $steps["redirectTrue"].then === "function"
              ) {
                $steps["redirectTrue"] = await $steps["redirectTrue"];
              }

              $steps["getBalance"] = false
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        "https://apigw.paziresh24.com/katibe/v1/transactions/balance/p24"
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["getBalance"] != null &&
                typeof $steps["getBalance"] === "object" &&
                typeof $steps["getBalance"].then === "function"
              ) {
                $steps["getBalance"] = await $steps["getBalance"];
              }

              $steps["updateBalance"] = false
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["balance"]
                      },
                      operation: 0,
                      value: $steps.getBalance.data.data.balance
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateBalance"] != null &&
                typeof $steps["updateBalance"] === "object" &&
                typeof $steps["updateBalance"].then === "function"
              ) {
                $steps["updateBalance"] = await $steps["updateBalance"];
              }

              $steps["updateWaiting2"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["waiting"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateWaiting2"] != null &&
                typeof $steps["updateWaiting2"] === "object" &&
                typeof $steps["updateWaiting2"].then === "function"
              ) {
                $steps["updateWaiting2"] = await $steps["updateWaiting2"];
              }
            }}
          />

          {(() => {
            try {
              return !($ctx.query.referrer == "saman");
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <section className={classNames(projectcss.all, sty.section__pxswz)}>
              <div className={classNames(projectcss.all, sty.freeBox__pTExT)}>
                <div className={classNames(projectcss.all, sty.freeBox__szLnC)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ekJj
                    )}
                  >
                    {
                      "\u067e\u0631\u062f\u0627\u062e\u062a \u0628\u0627 \u062f\u0631\u06af\u0627\u0647 \u067e\u0631\u062f\u0627\u062e\u062a"
                    }
                  </div>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__wlFOn)}>
                <div className={classNames(projectcss.all, sty.freeBox__sw5Wo)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yfhDc
                    )}
                  >
                    {"\u0645\u0628\u0644\u063a:"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__srmzt
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return (
                            new Intl.NumberFormat("fa-IR").format(
                              $ctx.query.amount || 0
                            ) + " ریال"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___30EL)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox___9J65H)}
                >
                  <Icon50Icon
                    data-plasmic-name={"svg"}
                    data-plasmic-override={overrides.svg}
                    className={classNames(projectcss.all, sty.svg)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dioiY
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#5B2525" }}
                        >
                          {
                            "\u0644\u0637\u0641\u0627\u064b \u0645\u0637\u0645\u0626\u0646 \u0634\u0648\u06cc\u062f \u06a9\u0647 "
                          }
                        </span>
                        <React.Fragment>{""}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"\u0641\u06cc\u0644\u062a\u0631\u0634\u06a9\u0646"}
                        </span>
                        <React.Fragment>{""}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#000000" }}
                        >
                          {
                            " \u0634\u0645\u0627 \u062e\u0627\u0645\u0648\u0634 \u0627\u0633\u062a\u060c \u0633\u067e\u0633 \u062f\u06a9\u0645\u0647 \u0632\u06cc\u0631 \u0631\u0627 \u0628\u0632\u0646\u06cc\u062f:"
                          }
                        </span>
                      </React.Fragment>
                    ) : (
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#5B2525" }}
                        >
                          {
                            "\u0644\u0637\u0641\u0627\u064b \u0645\u0637\u0645\u0626\u0646 \u0634\u0648\u06cc\u062f \u06a9\u0647"
                          }
                        </span>
                        <React.Fragment> </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {
                            "VPN/\u0641\u06cc\u0644\u062a\u0631\u0634\u06a9\u0646"
                          }
                        </span>
                        <React.Fragment>{""}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#000000" }}
                        >
                          {
                            " \u0634\u0645\u0627 \u062e\u0627\u0645\u0648\u0634 \u0627\u0633\u062a \u0648 \u0633\u067e\u0633 \u062f\u06a9\u0645\u0647 \u0632\u06cc\u0631 \u0631\u0627 \u0628\u0632\u0646\u06cc\u062f:"
                          }
                        </span>
                      </React.Fragment>
                    )}
                  </div>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__mGnIw)}>
                <div className={classNames(projectcss.all, sty.freeBox__fzrje)}>
                  <Button
                    children2={
                      "\u0627\u0631\u0633\u0627\u0644 \u0628\u0647 \u062f\u0631\u06af\u0627\u0647 \u067e\u0631\u062f\u0627\u062e\u062a"
                    }
                    className={classNames("__wab_instance", sty.button__vghbE)}
                    isDisabled={(() => {
                      try {
                        return $state.waiting;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateWaiting"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["waiting"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateWaiting"] != null &&
                        typeof $steps["updateWaiting"] === "object" &&
                        typeof $steps["updateWaiting"].then === "function"
                      ) {
                        $steps["updateWaiting"] = await $steps["updateWaiting"];
                      }

                      $steps["redirectUser"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                (() => {
                                  try {
                                    return (
                                      "https://apigw.paziresh24.com/katibe/v1/check-balance-or-pay?amount=" +
                                      ($ctx.query.amount || 0) +
                                      "&returnlink=" +
                                      ($ctx.query.returnlink || "") +
                                      "&cancel_returnlink=" +
                                      ($ctx.query.cancel_returnlink || "") +
                                      "&receipt_id=" +
                                      ($ctx.query.receipt_id || "") +
                                      "&center_id=" +
                                      ($ctx.query.center_id || "") +
                                      "&uuid=" +
                                      Date.now() +
                                      "&check-vpn=true"
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Hamdast.openLink"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["redirectUser"] != null &&
                        typeof $steps["redirectUser"] === "object" &&
                        typeof $steps["redirectUser"].then === "function"
                      ) {
                        $steps["redirectUser"] = await $steps["redirectUser"];
                      }

                      $steps["updateWaiting2"] = false
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["waiting"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateWaiting2"] != null &&
                        typeof $steps["updateWaiting2"] === "object" &&
                        typeof $steps["updateWaiting2"].then === "function"
                      ) {
                        $steps["updateWaiting2"] =
                          await $steps["updateWaiting2"];
                      }
                    }}
                    size={"compact"}
                  />
                </div>
              </div>
            </section>
          ) : null}
          {(() => {
            try {
              return $ctx.query.referrer == "saman";
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <section className={classNames(projectcss.all, sty.section__oAyiu)}>
              <div className={classNames(projectcss.all, sty.freeBox__tWorq)}>
                <div className={classNames(projectcss.all, sty.freeBox__d90NV)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___71Hat
                    )}
                  >
                    {
                      "\u067e\u0631\u062f\u0627\u062e\u062a \u0646\u0627\u0645\u0648\u0641\u0642"
                    }
                  </div>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__jXecp)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox___4R2IR)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xy6SS
                    )}
                  >
                    {
                      "\u06a9\u0627\u0631\u0628\u0631 \u06af\u0631\u0627\u0645\u06cc\u060c \u067e\u0631\u062f\u0627\u062e\u062a \u0634\u0645\u0627 \u0646\u0627\u0645\u0648\u0641\u0642 \u0628\u0648\u062f. \u0644\u0637\u0641\u0627 \u0628\u0627 \u06cc\u06a9\u06cc \u0627\u0632 \u0631\u0648\u0634\u200c\u0647\u0627\u06cc \u0632\u06cc\u0631 \u067e\u0631\u062f\u0627\u062e\u062a \u0646\u0645\u0627\u06cc\u06cc\u062f:"
                    }
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qhNqD)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__g6Dgg)}
                    >
                      <RadioGroup
                        data-plasmic-name={"paymentsMethod"}
                        data-plasmic-override={overrides.paymentsMethod}
                        className={classNames(
                          "__wab_instance",
                          sty.paymentsMethod
                        )}
                        defaultValue={"saman"}
                        label={null}
                        onChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "paymentsMethod",
                            "value"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }

                          (async val => {
                            const $steps = {};

                            $steps["invokeGlobalAction"] = false
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      "POST",
                                      "https://apigw.paziresh24.com/katibe/v1/payments/method/suggest",
                                      undefined,
                                      (() => {
                                        try {
                                          return {
                                            method: $state.paymentsMethod.value
                                          };
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return { method: "" };
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.apiRequest"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["invokeGlobalAction"] != null &&
                              typeof $steps["invokeGlobalAction"] ===
                                "object" &&
                              typeof $steps["invokeGlobalAction"].then ===
                                "function"
                            ) {
                              $steps["invokeGlobalAction"] =
                                await $steps["invokeGlobalAction"];
                            }
                          }).apply(null, eventArgs);
                        }}
                        options={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__xZoDo
                            )}
                          >
                            <Radio
                              className={classNames(
                                "__wab_instance",
                                sty.radio__jX9Ds
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__fd1Xz
                                  )}
                                >
                                  {
                                    "\u062f\u0631\u06af\u0627\u0647 \u067e\u0631\u062f\u0627\u062e\u062a \u0633\u0627\u0645\u0627\u0646"
                                  }
                                </div>
                              }
                              value={"saman"}
                            />

                            <Radio
                              className={classNames(
                                "__wab_instance",
                                sty.radio__mpWa8
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__qhL0P
                                  )}
                                >
                                  {"\u067e\u064f\u0644"}
                                </div>
                              }
                              value={"pol"}
                            />

                            <Radio
                              className={classNames(
                                "__wab_instance",
                                sty.radio___0AuDz
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__xIf3E
                                  )}
                                >
                                  {
                                    "\u06a9\u0627\u0631\u062a \u0628\u0647 \u06a9\u0627\u0631\u062a"
                                  }
                                </div>
                              }
                              value={"cardToCard"}
                            />

                            <Radio
                              className={classNames(
                                "__wab_instance",
                                sty.radio__fh8Uu
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__dzhSk
                                  )}
                                >
                                  {
                                    "\u0628\u0644\u0648 \u0628\u0627\u0646\u06a9"
                                  }
                                </div>
                              }
                              value={"blue"}
                            />

                            <Radio
                              className={classNames(
                                "__wab_instance",
                                sty.radio___6Q1W7
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__n3LPy
                                  )}
                                >
                                  {"\u067e\u0627\u06cc\u0627"}
                                </div>
                              }
                              value={"paya"}
                            />

                            <Radio
                              className={classNames(
                                "__wab_instance",
                                sty.radio__bKkAp
                              )}
                              label={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__wCfBy
                                  )}
                                >
                                  {
                                    "\u0628\u0631\u062f\u0627\u0634\u062a \u0645\u0633\u062a\u0642\u06cc\u0645 \u0627\u0632 \u062d\u0633\u0627\u0628"
                                  }
                                </div>
                              }
                              value={"directDebit"}
                            />
                          </div>
                        }
                      />
                    </div>
                  </div>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__j1DeF)}>
                <div className={classNames(projectcss.all, sty.freeBox__x9B2M)}>
                  <Button
                    data-plasmic-name={"btnPayMethod"}
                    data-plasmic-override={overrides.btnPayMethod}
                    children2={"   \u067e\u0631\u062f\u0627\u062e\u062a  "}
                    className={classNames("__wab_instance", sty.btnPayMethod)}
                    isDisabled={(() => {
                      try {
                        return $state.waiting;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    onClick={async event => {
                      const $steps = {};

                      $steps["alertPaymentMethod"] =
                        $state.paymentsMethod.value == undefined
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  "error",
                                  "\u0644\u0637\u0641\u0627 \u06cc\u06a9 \u0631\u0648\u0634 \u067e\u0631\u062f\u0627\u062e\u062a \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u0646\u0645\u0627\u06cc\u06cc\u062f."
                                ]
                              };
                              return $globalActions[
                                "Fragment.showToast"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                      if (
                        $steps["alertPaymentMethod"] != null &&
                        typeof $steps["alertPaymentMethod"] === "object" &&
                        typeof $steps["alertPaymentMethod"].then === "function"
                      ) {
                        $steps["alertPaymentMethod"] =
                          await $steps["alertPaymentMethod"];
                      }

                      $steps["updateWaiting"] = false
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["waiting"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateWaiting"] != null &&
                        typeof $steps["updateWaiting"] === "object" &&
                        typeof $steps["updateWaiting"].then === "function"
                      ) {
                        $steps["updateWaiting"] = await $steps["updateWaiting"];
                      }

                      $steps["suggest"] = false
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://apigw.paziresh24.com/katibe/v1/payments/method/suggest",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      method: $state.paymentsMethod.value,
                                      center_id: $ctx.query.center_id || ""
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["suggest"] != null &&
                        typeof $steps["suggest"] === "object" &&
                        typeof $steps["suggest"].then === "function"
                      ) {
                        $steps["suggest"] = await $steps["suggest"];
                      }

                      $steps["redirectUser"] =
                        $state.paymentsMethod.value != undefined
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  (() => {
                                    try {
                                      return (
                                        "https://apigw.paziresh24.com/katibe/v1/check-balance-or-pay?amount=" +
                                        ($ctx.query.amount || 0) +
                                        "&returnlink=" +
                                        ($ctx.query.returnlink || "") +
                                        "&cancel_returnlink=" +
                                        ($ctx.query.cancel_returnlink || "") +
                                        "&receipt_id=" +
                                        ($ctx.query.receipt_id || "") +
                                        "&center_id=" +
                                        ($ctx.query.center_id || "") +
                                        "&check-vpn=true" +
                                        "&payment-type=" +
                                        $state.paymentsMethod.value +
                                        "&uuid=" +
                                        Date.now()
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions["Hamdast.openLink"]?.apply(
                                null,
                                [...actionArgs.args]
                              );
                            })()
                          : undefined;
                      if (
                        $steps["redirectUser"] != null &&
                        typeof $steps["redirectUser"] === "object" &&
                        typeof $steps["redirectUser"].then === "function"
                      ) {
                        $steps["redirectUser"] = await $steps["redirectUser"];
                      }

                      $steps["getPaymentLink"] = false
                        ? (() => {
                            const actionArgs = {
                              args: [
                                "POST",
                                "https://apigw.paziresh24.com/katibe/v1/paymentlink/p24",
                                undefined,
                                (() => {
                                  try {
                                    return {
                                      amount: $ctx.query.amount,
                                      returnlink: $ctx.query.returnlink || "",
                                      cancel_returnlink:
                                        $ctx.query.cancel_returnlink || "",
                                      receipt_id: $ctx.query.receipt_id || "",
                                      center_id: $ctx.query.center_id || ""
                                    };
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["getPaymentLink"] != null &&
                        typeof $steps["getPaymentLink"] === "object" &&
                        typeof $steps["getPaymentLink"].then === "function"
                      ) {
                        $steps["getPaymentLink"] =
                          await $steps["getPaymentLink"];
                      }

                      $steps["updatePaymentLink"] = false
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["paymentLink"]
                              },
                              operation: 0,
                              value: $steps.getPaymentLink.data.data.link
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updatePaymentLink"] != null &&
                        typeof $steps["updatePaymentLink"] === "object" &&
                        typeof $steps["updatePaymentLink"].then === "function"
                      ) {
                        $steps["updatePaymentLink"] =
                          await $steps["updatePaymentLink"];
                      }

                      $steps["redirectToIpg"] = false
                        ? (() => {
                            const actionArgs = {
                              args: [
                                (() => {
                                  try {
                                    return $state.paymentLink;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Hamdast.openLink"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["redirectToIpg"] != null &&
                        typeof $steps["redirectToIpg"] === "object" &&
                        typeof $steps["redirectToIpg"].then === "function"
                      ) {
                        $steps["redirectToIpg"] = await $steps["redirectToIpg"];
                      }
                    }}
                    size={"compact"}
                  />

                  <Button
                    children2={"\u0628\u0627\u0632\u06af\u0634\u062a"}
                    className={classNames("__wab_instance", sty.button__xg2W)}
                    color={"softBlue"}
                    isDisabled={(() => {
                      try {
                        return $state.waiting;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateWaiting"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["waiting"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateWaiting"] != null &&
                        typeof $steps["updateWaiting"] === "object" &&
                        typeof $steps["updateWaiting"].then === "function"
                      ) {
                        $steps["updateWaiting"] = await $steps["updateWaiting"];
                      }

                      $steps["redirectUser"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                (() => {
                                  try {
                                    return "https://www.paziresh24.com/dashboard/appointments/";
                                    /*
                              ($ctx.query.cancel_returnlink)?
                              globalThis.atob($ctx.query.cancel_returnlink):
                              "https://www.paziresh24.com/dashboard/appointments/"
                              */
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Hamdast.openLink"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["redirectUser"] != null &&
                        typeof $steps["redirectUser"] === "object" &&
                        typeof $steps["redirectUser"].then === "function"
                      ) {
                        $steps["redirectUser"] = await $steps["redirectUser"];
                      }

                      $steps["updateWaiting2"] = false
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["waiting"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateWaiting2"] != null &&
                        typeof $steps["updateWaiting2"] === "object" &&
                        typeof $steps["updateWaiting2"].then === "function"
                      ) {
                        $steps["updateWaiting2"] =
                          await $steps["updateWaiting2"];
                      }
                    }}
                    size={"compact"}
                  />
                </div>
              </div>
            </section>
          ) : null}
          <Embed
            data-plasmic-name={"embedHtml"}
            data-plasmic-override={overrides.embedHtml}
            className={classNames("__wab_instance", sty.embedHtml)}
            code={
              '<script type="text/javascript">\r\n    (function(c,l,a,r,i,t,y){\r\n        c[a]=c[a]||function(){(c[a].q=c[a].q||[]).push(arguments)};\r\n        t=l.createElement(r);t.async=1;t.src="https://www.clarity.ms/tag/"+i;\r\n        y=l.getElementsByTagName(r)[0];y.parentNode.insertBefore(t,y);\r\n    })(window, document, "clarity", "script", "rr61es0fkb");\r\n</script>'
            }
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  pay: [
    "pay",
    "sideEffectPageLoad",
    "svg",
    "paymentsMethod",
    "btnPayMethod",
    "embedHtml"
  ],
  sideEffectPageLoad: ["sideEffectPageLoad"],
  svg: ["svg"],
  paymentsMethod: ["paymentsMethod"],
  btnPayMethod: ["btnPayMethod"],
  embedHtml: ["embedHtml"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  pay: "div";
  sideEffectPageLoad: typeof SideEffect;
  svg: "svg";
  paymentsMethod: typeof RadioGroup;
  btnPayMethod: typeof Button;
  embedHtml: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPay__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPay__VariantsArgs;
    args?: PlasmicPay__ArgsType;
    overrides?: NodeOverridesType<T>;
  } &
    // Specify variants directly as props
    Omit<PlasmicPay__VariantsArgs, ReservedPropsType> &
    // Specify args directly as props
    Omit<PlasmicPay__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPay__ArgProps,
          internalVariantPropNames: PlasmicPay__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPay__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "pay") {
    func.displayName = "PlasmicPay";
  } else {
    func.displayName = `PlasmicPay.${nodeName}`;
  }
  return func;
}

export const PlasmicPay = Object.assign(
  // Top-level PlasmicPay renders the root element
  makeNodeComponent("pay"),
  {
    // Helper components rendering sub-elements
    sideEffectPageLoad: makeNodeComponent("sideEffectPageLoad"),
    svg: makeNodeComponent("svg"),
    paymentsMethod: makeNodeComponent("paymentsMethod"),
    btnPayMethod: makeNodeComponent("btnPayMethod"),
    embedHtml: makeNodeComponent("embedHtml"),

    // Metadata about props expected for PlasmicPay
    internalVariantProps: PlasmicPay__VariantProps,
    internalArgProps: PlasmicPay__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "پرداخت",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPay;
/* prettier-ignore-end */
