// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: afXULSfGYmou2jFpEc2QWJ
// Component: L5_xWrUT2kGZ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: 0wu_ZE1f8SuT/component
import Select from "../../Select"; // plasmic-import: 7wkEfmUYAcMf/component
import TextInput from "../../TextInput"; // plasmic-import: SePhlRlvEn3n/component
import Dialog from "../../Dialog"; // plasmic-import: 42tFBTdMKvt2/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: hVBOtSJvmbc4/codeComponent
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";

import { useScreenVariants as useScreenVariantsbr2UhI7UlpvR } from "../fragment_icons/PlasmicGlobalVariant__Screen"; // plasmic-import: BR2UhI7ulpvR/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "../chortke/plasmic.module.css"; // plasmic-import: afXULSfGYmou2jFpEc2QWJ/projectcss
import sty from "./PlasmicProductAdmin.module.css"; // plasmic-import: L5_xWrUT2kGZ/css

import Icon11Icon from "../chortke/icons/PlasmicIcon__Icon11"; // plasmic-import: sdf49AtFp7I6/icon
import Icon6Icon from "../chortke/icons/PlasmicIcon__Icon6"; // plasmic-import: 7-KwYGGksEHB/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import SearchSvgIcon from "../chortke/icons/PlasmicIcon__SearchSvg"; // plasmic-import: fjupp6w2fUeo/icon
import CheckSvgIcon from "../chortke/icons/PlasmicIcon__CheckSvg"; // plasmic-import: VZ6Vl-sB0jLM/icon
import Icon2Icon from "../chortke/icons/PlasmicIcon__Icon2"; // plasmic-import: eeiQdsLura6L/icon

createPlasmicElementProxy;

export type PlasmicProductAdmin__VariantMembers = {};
export type PlasmicProductAdmin__VariantsArgs = {};
type VariantPropType = keyof PlasmicProductAdmin__VariantsArgs;
export const PlasmicProductAdmin__VariantProps = new Array<VariantPropType>();

export type PlasmicProductAdmin__ArgsType = {};
type ArgPropType = keyof PlasmicProductAdmin__ArgsType;
export const PlasmicProductAdmin__ArgProps = new Array<ArgPropType>();

export type PlasmicProductAdmin__OverridesType = {
  root?: Flex__<"div">;
  h1?: Flex__<"h1">;
  btnDashboard3?: Flex__<"div">;
  lblUser?: Flex__<"div">;
  btnLogout?: Flex__<"a"> & Partial<LinkProps>;
  btnLogin?: Flex__<typeof Button>;
  section?: Flex__<"section">;
  gridCalculator2?: Flex__<"div">;
  cbProductlist?: Flex__<typeof Select>;
  txtSearch?: Flex__<typeof TextInput>;
  btnSearch?: Flex__<typeof Button>;
  waitingIcon4?: Flex__<"svg">;
  gridInvoice1?: Flex__<"div">;
  gridNoData?: Flex__<"div">;
  gridInvoice12?: Flex__<"div">;
  dialogNewInvoiceDetails?: Flex__<typeof Dialog>;
  btnInvoiceInfo?: Flex__<typeof Button>;
  detailsDataApiRequest?: Flex__<typeof ApiRequest>;
  waitingIcon3?: Flex__<"svg">;
  sideEffectPageLoad?: Flex__<typeof SideEffect>;
  sideEffectFirstLoad?: Flex__<typeof SideEffect>;
};

export interface DefaultProductAdminProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProductAdmin__RenderFunc(props: {
  variants: PlasmicProductAdmin__VariantsArgs;
  args: PlasmicProductAdmin__ArgsType;
  overrides: PlasmicProductAdmin__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "txtSearch.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "dialogNewInvoiceDetails[].open",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "detailsDataApiRequest[].data",
        type: "private",
        variableType: "object"
      },
      {
        path: "detailsDataApiRequest[].error",
        type: "private",
        variableType: "object"
      },
      {
        path: "detailsDataApiRequest[].loading",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "productList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            productid: 0,
            name: "\u0644\u0637\u0641\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u0646\u0645\u0627\u06cc\u06cc\u062f"
          }
        ]
      },
      {
        path: "invoicelist",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "invoiceDetials",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "invoiceHasOnlinePayment",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "waitingInvoiceDetails",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "waitingPayment",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "paymentAmount",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "showMyAmount",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "isShowPaymentButton",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "reminderWallet",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "increaseButtonListBase",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          2000000, 3500000, 5000000
        ]
      },
      {
        path: "showSelectPriceGrid",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "cbProductlist.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return $state.productList[0].productid;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "waiting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbr2UhI7UlpvR()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicProductAdmin.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicProductAdmin.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicProductAdmin.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            plasmic_fragment_design_system_css.plasmic_tokens,
            sty.root
          )}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__mI0Os)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__wlRyf)}>
              <div className={classNames(projectcss.all, sty.freeBox__kX5EF)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox__yDzlb)}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox___79Bju)}>
                <div className={classNames(projectcss.all, sty.freeBox__qdzkg)}>
                  <Icon11Icon
                    className={classNames(projectcss.all, sty.svg__rSpg)}
                    role={"img"}
                  />

                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    {
                      "\u0686\u0631\u062a\u06a9\u0647\u060c \u0645\u062f\u06cc\u0631\u06cc\u062a \u0627\u0645\u0648\u0631 \u0645\u0627\u0644\u06cc"
                    }
                  </h1>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__tRrUy)}>
                <div
                  data-plasmic-name={"btnDashboard3"}
                  data-plasmic-override={overrides.btnDashboard3}
                  className={classNames(projectcss.all, sty.btnDashboard3)}
                >
                  <Icon6Icon
                    className={classNames(projectcss.all, sty.svg__zKJrD)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__boOut
                    )}
                  >
                    {"\u0645\u0627\u0634\u06cc\u0646 \u062d\u0633\u0627\u0628"}
                  </div>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__eYxhR)}>
                <div
                  data-plasmic-name={"lblUser"}
                  data-plasmic-override={overrides.lblUser}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.lblUser
                  )}
                >
                  {""}
                </div>
                <PlasmicLink__
                  data-plasmic-name={"btnLogout"}
                  data-plasmic-override={overrides.btnLogout}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.btnLogout
                  )}
                  component={Link}
                  href={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ""
                      : undefined
                  }
                  platform={"nextjs"}
                >
                  {"\u062e\u0631\u0648\u062c"}
                </PlasmicLink__>
                <Button
                  data-plasmic-name={"btnLogin"}
                  data-plasmic-override={overrides.btnLogin}
                  children2={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__y4PTh
                      )}
                    >
                      {"\u0648\u0631\u0648\u062f"}
                    </div>
                  }
                  className={classNames("__wab_instance", sty.btnLogin)}
                  link={
                    "https://www.paziresh24.com/login/?redirect_url=https://chortke.paziresh24.com/"
                  }
                  outline={true}
                />
              </div>
            </div>
          </Stack__>
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
            dir={"rtl"}
          >
            <div
              data-plasmic-name={"gridCalculator2"}
              data-plasmic-override={overrides.gridCalculator2}
              className={classNames(projectcss.all, sty.gridCalculator2)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__kQpa3,
                  "grid_calculator"
                )}
                id={"grid_calculator"}
              >
                <Select
                  data-plasmic-name={"cbProductlist"}
                  data-plasmic-override={overrides.cbProductlist}
                  aria-label={"name"}
                  aria-labelledby={"productid"}
                  className={classNames("__wab_instance", sty.cbProductlist)}
                  name={"productlist"}
                  onChange={async (...eventArgs: any) => {
                    ((...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "cbProductlist",
                        "value"
                      ])(eventArgs[0]);
                    }).apply(null, eventArgs);
                    (async value => {
                      const $steps = {};

                      $steps["showWaiting"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["waiting"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["showWaiting"] != null &&
                        typeof $steps["showWaiting"] === "object" &&
                        typeof $steps["showWaiting"].then === "function"
                      ) {
                        $steps["showWaiting"] = await $steps["showWaiting"];
                      }

                      $steps["clearInvoiceList"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["invoicelist"]
                              },
                              operation: 0,
                              value: []
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["clearInvoiceList"] != null &&
                        typeof $steps["clearInvoiceList"] === "object" &&
                        typeof $steps["clearInvoiceList"].then === "function"
                      ) {
                        $steps["clearInvoiceList"] = await $steps[
                          "clearInvoiceList"
                        ];
                      }

                      $steps["getInvoiceList"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                undefined,
                                (() => {
                                  try {
                                    return (
                                      "https://apigw.paziresh24.com/transaction/v1/admininvoicelist?productid=" +
                                      $state.cbProductlist.value +
                                      "&search=" +
                                      $state.txtSearch.value
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["getInvoiceList"] != null &&
                        typeof $steps["getInvoiceList"] === "object" &&
                        typeof $steps["getInvoiceList"].then === "function"
                      ) {
                        $steps["getInvoiceList"] = await $steps[
                          "getInvoiceList"
                        ];
                      }

                      $steps["updateInvoicelist"] =
                        $steps.getInvoiceList.status == 200 &&
                        $steps.getInvoiceList.data.status == true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["invoicelist"]
                                },
                                operation: 0,
                                value: $steps.getInvoiceList.data.data
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateInvoicelist"] != null &&
                        typeof $steps["updateInvoicelist"] === "object" &&
                        typeof $steps["updateInvoicelist"].then === "function"
                      ) {
                        $steps["updateInvoicelist"] = await $steps[
                          "updateInvoicelist"
                        ];
                      }

                      $steps["hideWaiting"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["waiting"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["hideWaiting"] != null &&
                        typeof $steps["hideWaiting"] === "object" &&
                        typeof $steps["hideWaiting"].then === "function"
                      ) {
                        $steps["hideWaiting"] = await $steps["hideWaiting"];
                      }
                    }).apply(null, eventArgs);
                  }}
                  options={(() => {
                    try {
                      return $state.productList.map(item => ({
                        value: item.productid.toString(),
                        label: item.name
                      }));
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return [
                          { value: "option1", label: "Option 1" },
                          { value: "option2", label: "Option 2" }
                        ];
                      }
                      throw e;
                    }
                  })()}
                  placeholder={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yc1HJ
                      )}
                    >
                      {
                        "\u0628\u062e\u0634 \u0645\u0648\u0631\u062f \u0646\u0638\u0631 \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u0646\u0645\u0627\u06cc\u06cc\u062f"
                      }
                    </div>
                  }
                  value={generateStateValueProp($state, [
                    "cbProductlist",
                    "value"
                  ])}
                />
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__xmf4E,
                  "grid_calculator"
                )}
                id={"grid_calculator"}
              >
                <div className={classNames(projectcss.all, sty.freeBox__ryqn7)}>
                  <div className={classNames(projectcss.all, sty.freeBox__otz)}>
                    <TextInput
                      data-plasmic-name={"txtSearch"}
                      data-plasmic-override={overrides.txtSearch}
                      className={classNames("__wab_instance", sty.txtSearch)}
                      onChange={(...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "txtSearch",
                          "value"
                        ])((e => e.target?.value).apply(null, eventArgs));
                      }}
                      placeholder={
                        "\u062c\u0633\u062a\u200c \u0648 \u062c\u0648: \u06a9\u062f \u06a9\u0627\u0631\u0628\u0631\u060c \u0639\u0646\u0648\u0627\u0646\u060c \u062a\u0627\u0631\u06cc\u062e"
                      }
                      value={
                        generateStateValueProp($state, [
                          "txtSearch",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__syNqd)}
                  >
                    <Button
                      data-plasmic-name={"btnSearch"}
                      data-plasmic-override={overrides.btnSearch}
                      children2={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yibz4
                          )}
                        >
                          {"\u062c\u0633\u062a \u0648 \u062c\u0648"}
                        </div>
                      }
                      className={classNames("__wab_instance", sty.btnSearch)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["showWaiting"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["waiting"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["showWaiting"] != null &&
                          typeof $steps["showWaiting"] === "object" &&
                          typeof $steps["showWaiting"].then === "function"
                        ) {
                          $steps["showWaiting"] = await $steps["showWaiting"];
                        }

                        $steps["clearInvoiceList"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["invoicelist"]
                                },
                                operation: 0,
                                value: []
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["clearInvoiceList"] != null &&
                          typeof $steps["clearInvoiceList"] === "object" &&
                          typeof $steps["clearInvoiceList"].then === "function"
                        ) {
                          $steps["clearInvoiceList"] = await $steps[
                            "clearInvoiceList"
                          ];
                        }

                        $steps["getInvoiceList"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  undefined,
                                  (() => {
                                    try {
                                      return (
                                        "https://apigw.paziresh24.com/transaction/v1/admininvoicelist?productid=" +
                                        $state.cbProductlist.value +
                                        "&search=" +
                                        $state.txtSearch.value
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["getInvoiceList"] != null &&
                          typeof $steps["getInvoiceList"] === "object" &&
                          typeof $steps["getInvoiceList"].then === "function"
                        ) {
                          $steps["getInvoiceList"] = await $steps[
                            "getInvoiceList"
                          ];
                        }

                        $steps["updateInvoicelist"] =
                          $steps.getInvoiceList.status == 200 &&
                          $steps.getInvoiceList.data.status == true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["invoicelist"]
                                  },
                                  operation: 0,
                                  value: $steps.getInvoiceList.data.data
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["updateInvoicelist"] != null &&
                          typeof $steps["updateInvoicelist"] === "object" &&
                          typeof $steps["updateInvoicelist"].then === "function"
                        ) {
                          $steps["updateInvoicelist"] = await $steps[
                            "updateInvoicelist"
                          ];
                        }

                        $steps["hideWaiting"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["waiting"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["hideWaiting"] != null &&
                          typeof $steps["hideWaiting"] === "object" &&
                          typeof $steps["hideWaiting"].then === "function"
                        ) {
                          $steps["hideWaiting"] = await $steps["hideWaiting"];
                        }
                      }}
                    />
                  </div>
                </div>
              </div>
              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? (() => {
                      try {
                        return $state.waiting;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
                  : (() => {
                      try {
                        return $state.waiting;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })()
              ) ? (
                <div className={classNames(projectcss.all, sty.freeBox__dqrH)}>
                  <Icon2Icon
                    data-plasmic-name={"waitingIcon4"}
                    data-plasmic-override={overrides.waitingIcon4}
                    className={classNames(projectcss.all, sty.waitingIcon4)}
                    role={"img"}
                  />
                </div>
              ) : null}
            </div>
            <div
              data-plasmic-name={"gridInvoice1"}
              data-plasmic-override={overrides.gridInvoice1}
              className={classNames(projectcss.all, sty.gridInvoice1)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__nu0RW,
                  "grid_calculator"
                )}
                id={"grid_calculator"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__okjgH
                  )}
                >
                  {"\u0631\u062f\u06cc\u0641"}
                </div>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__akEKm,
                  "grid_calculator"
                )}
                id={"grid_calculator"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__i6Sbu
                  )}
                >
                  {"\u06a9\u0627\u0631\u0628\u0631"}
                </div>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__lyMq,
                  "grid_calculator"
                )}
                id={"grid_calculator"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tg0It
                  )}
                >
                  {"\u062a\u0627\u0631\u06cc\u062e"}
                </div>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox___99KU,
                  "grid_calculator"
                )}
                id={"grid_calculator"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__g78Vz
                  )}
                >
                  {"\u0639\u0646\u0648\u0627\u0646"}
                </div>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__u3Qr,
                  "grid_calculator"
                )}
                id={"grid_calculator"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dci8K
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "\u0642\u06cc\u0645\u062a "
                    : "\u0642\u06cc\u0645\u062a (\u0631\u06cc\u0627\u0644)"}
                </div>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox___27Oqy,
                  "grid_calculator"
                )}
                id={"grid_calculator"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___4JzyT
                  )}
                >
                  {"\u062c\u0632\u0626\u06cc\u0627\u062a"}
                </div>
              </div>
            </div>
            {(() => {
              try {
                return (() => {
                  return $state.invoicelist.length == 0 ? true : false;
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                data-plasmic-name={"gridNoData"}
                data-plasmic-override={overrides.gridNoData}
                className={classNames(projectcss.all, sty.gridNoData)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__jTdLx,
                    "grid_calculator"
                  )}
                  id={"grid_calculator"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__efGxK
                    )}
                  >
                    {
                      "\u0645\u062d\u062a\u0648\u0627\u06cc\u06cc \u062c\u0647\u062a \u0646\u0645\u0627\u06cc\u0634 \u0648\u062c\u0648\u062f \u0646\u062f\u0627\u0631\u062f"
                    }
                  </div>
                </div>
              </div>
            ) : null}
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $state.invoicelist;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <div
                  data-plasmic-name={"gridInvoice12"}
                  data-plasmic-override={overrides.gridInvoice12}
                  className={classNames(projectcss.all, sty.gridInvoice12)}
                  key={currentIndex}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__pz9Hn,
                      "grid_calculator"
                    )}
                    id={"grid_calculator"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___1Ukim
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              $state.invoicelist.findIndex(
                                item =>
                                  item.invoiceid ===
                                  $state.invoicelist[currentIndex].invoiceid
                              ) + 1
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__vaOyO,
                      "grid_calculator"
                    )}
                    id={"grid_calculator"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__muoMh
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.invoicelist[currentIndex].userinfo;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__bItIr,
                      "grid_calculator"
                    )}
                    id={"grid_calculator"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__novze
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              "" +
                              (() => {
                                const gregorianDate = new Date(
                                  $state.invoicelist[currentIndex].registerdate
                                );
                                const persianDate = new Intl.DateTimeFormat(
                                  "fa-IR"
                                ).format(gregorianDate);
                                return persianDate;
                              })()
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__xhYa,
                      "grid_calculator"
                    )}
                    id={"grid_calculator"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__iFc8K
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.invoicelist[currentIndex].title;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__jyiv5,
                      "grid_calculator"
                    )}
                    id={"grid_calculator"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ue8Il
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return new Intl.NumberFormat("fa-IR").format(
                              $state.invoicelist[currentIndex].finalprice
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__b7I2K,
                      "grid_calculator"
                    )}
                    id={"grid_calculator"}
                  >
                    {(() => {
                      const child$Props = {
                        body: (
                          <ApiRequest
                            data-plasmic-name={"detailsDataApiRequest"}
                            data-plasmic-override={
                              overrides.detailsDataApiRequest
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.detailsDataApiRequest
                            )}
                            errorDisplay={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__gX5B
                                )}
                              >
                                <React.Fragment>
                                  {(() => {
                                    try {
                                      return "خطا در دریافت اطلاعات، لطفا دوباره تلاش نمایید.";
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return "Error fetching data";
                                      }
                                      throw e;
                                    }
                                  })()}
                                </React.Fragment>
                              </div>
                            }
                            loadingDisplay={
                              <Icon2Icon
                                data-plasmic-name={"waitingIcon3"}
                                data-plasmic-override={overrides.waitingIcon3}
                                className={classNames(
                                  projectcss.all,
                                  sty.waitingIcon3
                                )}
                                role={"img"}
                              />
                            }
                            method={"GET"}
                            onError={generateStateOnChangeProp($state, [
                              "detailsDataApiRequest",
                              __plasmic_idx_0,
                              "error"
                            ])}
                            onLoading={generateStateOnChangeProp($state, [
                              "detailsDataApiRequest",
                              __plasmic_idx_0,
                              "loading"
                            ])}
                            onSuccess={generateStateOnChangeProp($state, [
                              "detailsDataApiRequest",
                              __plasmic_idx_0,
                              "data"
                            ])}
                            params={(() => {
                              try {
                                return {
                                  invoiceid:
                                    $state.invoicelist[currentIndex].invoiceid
                                };
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            url={
                              "https://apigw.paziresh24.com/transaction/v1/admininvoicedetails"
                            }
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__p9MF4
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__fayw
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__eFyjC
                                  )}
                                >
                                  {"\u0639\u0646\u0648\u0627\u0646:"}
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__xw4Uu
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__ilNf
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $state.detailsDataApiRequest[
                                          currentIndex
                                        ].data.data.title;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__lh01X
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___9X6Dw
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__ttxoQ
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? "\u062a\u0648\u0636\u06cc\u062d\u0627\u062a:"
                                    : "\u062a\u0648\u0636\u06cc\u062d\u0627\u062a:"}
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__mmJqz
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__gtG3I
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $state.detailsDataApiRequest[
                                          currentIndex
                                        ].data.data.description;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__mNpc0
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__oJiDp
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__nt3Dh
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  ) ? (
                                    "\u06a9\u062f:"
                                  ) : (
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return (
                                            "کد: " +
                                            $state.detailsDataApiRequest[
                                              currentIndex
                                            ].data.data.invoiceid
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "\u06a9\u062f:";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  )}
                                </div>
                              </div>
                              <Stack__
                                as={"div"}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__wWXr
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__sUkj6
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return (
                                          "کد کاربر: " +
                                          $state.detailsDataApiRequest[
                                            currentIndex
                                          ].data.data.userid
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </Stack__>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__x7W0A
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__u03CZ
                                  )}
                                >
                                  {"\u0632\u0645\u0627\u0646:"}
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__ck5Ih
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__ehxJv
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return (
                                          $state.detailsDataApiRequest[
                                            currentIndex
                                          ].data.data.registertime +
                                          " " +
                                          (() => {
                                            const gregorianDate = new Date(
                                              $state.detailsDataApiRequest[
                                                currentIndex
                                              ].data.data.registerdate
                                            );
                                            const persianDate =
                                              new Intl.DateTimeFormat(
                                                "fa-IR"
                                              ).format(gregorianDate);
                                            return persianDate;
                                          })()
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                            </div>
                            {(_par =>
                              !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                              (() => {
                                try {
                                  return $state.detailsDataApiRequest[
                                    currentIndex
                                  ].data.data.services;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return [];
                                  }
                                  throw e;
                                }
                              })()
                            ).map((__plasmic_item_1, __plasmic_idx_1) => {
                              const currentItem = __plasmic_item_1;
                              const currentIndex = __plasmic_idx_1;
                              return (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__zuIb6
                                  )}
                                  dir={"rtl"}
                                  key={currentIndex}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__lgVju
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__uf3Hv
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return "جزئیات:";
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "\u062c\u0632\u0626\u06cc\u0627\u062a:";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__gteXz
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__yJbR
                                      )}
                                      dir={"rtl"}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return (() => {
                                              return currentItem.count > 1
                                                ? currentItem.service +
                                                    " - " +
                                                    new Intl.NumberFormat(
                                                      "fa-IR"
                                                    ).format(
                                                      currentItem.count
                                                    ) +
                                                    "عدد"
                                                : currentItem.service;
                                            })();
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </div>
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__g9TS
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__d5OBx
                                      )}
                                    >
                                      {"\u0645\u0628\u0644\u063a:"}
                                    </div>
                                  </Stack__>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__wCkQ5
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__kValp
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return (
                                              new Intl.NumberFormat(
                                                "fa-IR"
                                              ).format(
                                                currentItem.price *
                                                  currentItem.count
                                              ) +
                                              " " +
                                              "ریال"
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </div>
                                </div>
                              );
                            })}
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___5Mvt2
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___5RZuc
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__lyNBi
                                  )}
                                >
                                  {"\u062c\u0645\u0639 \u06a9\u0644:"}
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___7Pxtk
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__q3Gn
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return (
                                          new Intl.NumberFormat("fa-IR").format(
                                            $state.detailsDataApiRequest[
                                              currentIndex
                                            ].data.data.sumprice
                                          ) + " ریال"
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__m5Uw2
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__dcHhk
                                  )}
                                >
                                  {"\u062a\u062e\u0641\u06cc\u0641:"}
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__z7Zuh
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__hcpvD
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return (
                                          new Intl.NumberFormat("fa-IR").format(
                                            $state.detailsDataApiRequest[
                                              currentIndex
                                            ].data.data.discountprice
                                          ) + " ریال"
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__nW11
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__m8Qc7
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__v1Qby
                                  )}
                                >
                                  {"\u0645\u0627\u0644\u06cc\u0627\u062a:"}
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__s9UbW
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__gxPy
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return (
                                          new Intl.NumberFormat("fa-IR").format(
                                            $state.detailsDataApiRequest[
                                              currentIndex
                                            ].data.data.vatprice
                                          ) + " ریال"
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__nuTfl
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__sDeE
                                  )}
                                >
                                  {
                                    "\u0645\u0628\u0644\u063a \u0646\u0647\u0627\u06cc\u06cc:"
                                  }
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__td6Le
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__iv3Fm
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return (
                                          new Intl.NumberFormat("fa-IR").format(
                                            $state.detailsDataApiRequest[
                                              currentIndex
                                            ].data.data.finalprice
                                          ) + " ریال"
                                        );
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                              </div>
                            </div>
                            {(() => {
                              try {
                                return $state.detailsDataApiRequest[
                                  currentIndex
                                ].data.data !== undefined &&
                                  $state.detailsDataApiRequest[currentIndex]
                                    .data.data.meta !== undefined &&
                                  $state.detailsDataApiRequest[currentIndex]
                                    .data.data.meta.RefNum !== undefined
                                  ? true
                                  : false;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return true;
                                }
                                throw e;
                              }
                            })() ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___9Nc9Y
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__dcrlS
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__ahxu0
                                    )}
                                  >
                                    {
                                      "\u0634\u0646\u0627\u0633\u0647 \u067e\u0631\u062f\u0627\u062e\u062a:"
                                    }
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___7O1Me
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__iUbqP
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return $state.detailsDataApiRequest[
                                            currentIndex
                                          ].data.data.meta.RefNum;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                </div>
                              </div>
                            ) : null}
                          </ApiRequest>
                        ),
                        className: classNames(
                          "__wab_instance",
                          sty.dialogNewInvoiceDetails
                        ),
                        onOpenChange: generateStateOnChangeProp($state, [
                          "dialogNewInvoiceDetails",
                          __plasmic_idx_0,
                          "open"
                        ]),
                        open: generateStateValueProp($state, [
                          "dialogNewInvoiceDetails",
                          __plasmic_idx_0,
                          "open"
                        ]),
                        title: (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__hjyW4
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__gbaSs,
                                ``
                              )}
                              dir={"rtl"}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__dXwej
                                )}
                              >
                                {
                                  "\u062c\u0632\u0626\u06cc\u0627\u062a \u0635\u0648\u0631\u062a \u062d\u0633\u0627\u0628"
                                }
                              </div>
                            </div>
                          </div>
                        ),
                        trigger: (
                          <Button
                            data-plasmic-name={"btnInvoiceInfo"}
                            data-plasmic-override={overrides.btnInvoiceInfo}
                            children2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___0DPkl
                                )}
                              >
                                {"\u062c\u0632\u0626\u06cc\u0627\u062a"}
                              </div>
                            }
                            className={classNames(
                              "__wab_instance",
                              sty.btnInvoiceInfo
                            )}
                            color={"green"}
                          />
                        )
                      };

                      initializePlasmicStates(
                        $state,
                        [
                          {
                            name: "dialogNewInvoiceDetails[].open",
                            initFunc: ({ $props, $state, $queries }) =>
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? false
                                : false
                          }
                        ],
                        [__plasmic_idx_0]
                      );
                      return (
                        <Dialog
                          data-plasmic-name={"dialogNewInvoiceDetails"}
                          data-plasmic-override={
                            overrides.dialogNewInvoiceDetails
                          }
                          {...child$Props}
                        />
                      );
                    })()}
                  </div>
                </div>
              );
            })}
          </section>
          <SideEffect
            data-plasmic-name={"sideEffectPageLoad"}
            data-plasmic-override={overrides.sideEffectPageLoad}
            className={classNames("__wab_instance", sty.sideEffectPageLoad)}
            onMount={async () => {
              const $steps = {};

              $steps["showWaiting"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["waiting"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["showWaiting"] != null &&
                typeof $steps["showWaiting"] === "object" &&
                typeof $steps["showWaiting"].then === "function"
              ) {
                $steps["showWaiting"] = await $steps["showWaiting"];
              }

              $steps["getProductList"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        (() => {
                          try {
                            return "https://apigw.paziresh24.com/transaction/v1/adminproductlist";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["getProductList"] != null &&
                typeof $steps["getProductList"] === "object" &&
                typeof $steps["getProductList"].then === "function"
              ) {
                $steps["getProductList"] = await $steps["getProductList"];
              }

              $steps["setProductListVariable"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return $steps.getProductList.status == 200 &&
                          $steps.getProductList.data.status == true
                          ? ($state.productList = [
                              {
                                productid: 0,
                                name: "همه"
                              },
                              ...$steps.getProductList.data.data
                            ])
                          : ($state.productList = []);
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["setProductListVariable"] != null &&
                typeof $steps["setProductListVariable"] === "object" &&
                typeof $steps["setProductListVariable"].then === "function"
              ) {
                $steps["setProductListVariable"] = await $steps[
                  "setProductListVariable"
                ];
              }

              $steps["getInvoiceList"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        (() => {
                          try {
                            return (
                              "https://apigw.paziresh24.com/transaction/v1/admininvoicelist?productid=" +
                              $state.cbProductlist.value +
                              "&search=" +
                              $state.txtSearch.value
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["getInvoiceList"] != null &&
                typeof $steps["getInvoiceList"] === "object" &&
                typeof $steps["getInvoiceList"].then === "function"
              ) {
                $steps["getInvoiceList"] = await $steps["getInvoiceList"];
              }

              $steps["updateInvoicelist"] =
                $steps.getInvoiceList.status == 200 &&
                $steps.getInvoiceList.data.status == true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["invoicelist"]
                        },
                        operation: 0,
                        value: $steps.getInvoiceList.data.data
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateInvoicelist"] != null &&
                typeof $steps["updateInvoicelist"] === "object" &&
                typeof $steps["updateInvoicelist"].then === "function"
              ) {
                $steps["updateInvoicelist"] = await $steps["updateInvoicelist"];
              }

              $steps["hideWaiting"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["waiting"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["hideWaiting"] != null &&
                typeof $steps["hideWaiting"] === "object" &&
                typeof $steps["hideWaiting"].then === "function"
              ) {
                $steps["hideWaiting"] = await $steps["hideWaiting"];
              }
            }}
          />

          <SideEffect
            data-plasmic-name={"sideEffectFirstLoad"}
            data-plasmic-override={overrides.sideEffectFirstLoad}
            className={classNames("__wab_instance", sty.sideEffectFirstLoad)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "h1",
    "btnDashboard3",
    "lblUser",
    "btnLogout",
    "btnLogin",
    "section",
    "gridCalculator2",
    "cbProductlist",
    "txtSearch",
    "btnSearch",
    "waitingIcon4",
    "gridInvoice1",
    "gridNoData",
    "gridInvoice12",
    "dialogNewInvoiceDetails",
    "btnInvoiceInfo",
    "detailsDataApiRequest",
    "waitingIcon3",
    "sideEffectPageLoad",
    "sideEffectFirstLoad"
  ],
  h1: ["h1"],
  btnDashboard3: ["btnDashboard3"],
  lblUser: ["lblUser"],
  btnLogout: ["btnLogout"],
  btnLogin: ["btnLogin"],
  section: [
    "section",
    "gridCalculator2",
    "cbProductlist",
    "txtSearch",
    "btnSearch",
    "waitingIcon4",
    "gridInvoice1",
    "gridNoData",
    "gridInvoice12",
    "dialogNewInvoiceDetails",
    "btnInvoiceInfo",
    "detailsDataApiRequest",
    "waitingIcon3"
  ],
  gridCalculator2: [
    "gridCalculator2",
    "cbProductlist",
    "txtSearch",
    "btnSearch",
    "waitingIcon4"
  ],
  cbProductlist: ["cbProductlist"],
  txtSearch: ["txtSearch"],
  btnSearch: ["btnSearch"],
  waitingIcon4: ["waitingIcon4"],
  gridInvoice1: ["gridInvoice1"],
  gridNoData: ["gridNoData"],
  gridInvoice12: [
    "gridInvoice12",
    "dialogNewInvoiceDetails",
    "btnInvoiceInfo",
    "detailsDataApiRequest",
    "waitingIcon3"
  ],
  dialogNewInvoiceDetails: [
    "dialogNewInvoiceDetails",
    "btnInvoiceInfo",
    "detailsDataApiRequest",
    "waitingIcon3"
  ],
  btnInvoiceInfo: ["btnInvoiceInfo"],
  detailsDataApiRequest: ["detailsDataApiRequest", "waitingIcon3"],
  waitingIcon3: ["waitingIcon3"],
  sideEffectPageLoad: ["sideEffectPageLoad"],
  sideEffectFirstLoad: ["sideEffectFirstLoad"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h1: "h1";
  btnDashboard3: "div";
  lblUser: "div";
  btnLogout: "a";
  btnLogin: typeof Button;
  section: "section";
  gridCalculator2: "div";
  cbProductlist: typeof Select;
  txtSearch: typeof TextInput;
  btnSearch: typeof Button;
  waitingIcon4: "svg";
  gridInvoice1: "div";
  gridNoData: "div";
  gridInvoice12: "div";
  dialogNewInvoiceDetails: typeof Dialog;
  btnInvoiceInfo: typeof Button;
  detailsDataApiRequest: typeof ApiRequest;
  waitingIcon3: "svg";
  sideEffectPageLoad: typeof SideEffect;
  sideEffectFirstLoad: typeof SideEffect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProductAdmin__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProductAdmin__VariantsArgs;
    args?: PlasmicProductAdmin__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProductAdmin__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicProductAdmin__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProductAdmin__ArgProps,
          internalVariantPropNames: PlasmicProductAdmin__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProductAdmin__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductAdmin";
  } else {
    func.displayName = `PlasmicProductAdmin.${nodeName}`;
  }
  return func;
}

export const PlasmicProductAdmin = Object.assign(
  // Top-level PlasmicProductAdmin renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    btnDashboard3: makeNodeComponent("btnDashboard3"),
    lblUser: makeNodeComponent("lblUser"),
    btnLogout: makeNodeComponent("btnLogout"),
    btnLogin: makeNodeComponent("btnLogin"),
    section: makeNodeComponent("section"),
    gridCalculator2: makeNodeComponent("gridCalculator2"),
    cbProductlist: makeNodeComponent("cbProductlist"),
    txtSearch: makeNodeComponent("txtSearch"),
    btnSearch: makeNodeComponent("btnSearch"),
    waitingIcon4: makeNodeComponent("waitingIcon4"),
    gridInvoice1: makeNodeComponent("gridInvoice1"),
    gridNoData: makeNodeComponent("gridNoData"),
    gridInvoice12: makeNodeComponent("gridInvoice12"),
    dialogNewInvoiceDetails: makeNodeComponent("dialogNewInvoiceDetails"),
    btnInvoiceInfo: makeNodeComponent("btnInvoiceInfo"),
    detailsDataApiRequest: makeNodeComponent("detailsDataApiRequest"),
    waitingIcon3: makeNodeComponent("waitingIcon3"),
    sideEffectPageLoad: makeNodeComponent("sideEffectPageLoad"),
    sideEffectFirstLoad: makeNodeComponent("sideEffectFirstLoad"),

    // Metadata about props expected for PlasmicProductAdmin
    internalVariantProps: PlasmicProductAdmin__VariantProps,
    internalArgProps: PlasmicProductAdmin__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "تراکنش های مالی مدیر محصول",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicProductAdmin;
/* prettier-ignore-end */
