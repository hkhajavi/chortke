// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: afXULSfGYmou2jFpEc2QWJ
// Component: xi8G6lqOVIEm

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: 0wu_ZE1f8SuT/component
import Select from "../../Select"; // plasmic-import: 7wkEfmUYAcMf/component
import TextInput from "../../TextInput"; // plasmic-import: SePhlRlvEn3n/component
import Dialog from "../../Dialog"; // plasmic-import: FJiI2-N1is_F/component
import Button2 from "../../Button"; // plasmic-import: oVzoHzMf1TLl/component
import Dialog2 from "../../Dialog2"; // plasmic-import: 42tFBTdMKvt2/component
import { ApiRequest } from "@/fragment/components/api-request"; // plasmic-import: hVBOtSJvmbc4/codeComponent
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";

import { useScreenVariants as useScreenVariantsbr2UhI7UlpvR } from "../fragment_icons/PlasmicGlobalVariant__Screen"; // plasmic-import: BR2UhI7ulpvR/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_fragment_design_system_css from "../fragment_design_system/plasmic.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "../chortke/plasmic.module.css"; // plasmic-import: afXULSfGYmou2jFpEc2QWJ/projectcss
import sty from "./PlasmicProductAdmin.module.css"; // plasmic-import: xi8G6lqOVIEm/css

import Icon11Icon from "../chortke/icons/PlasmicIcon__Icon11"; // plasmic-import: sdf49AtFp7I6/icon
import Icon6Icon from "../chortke/icons/PlasmicIcon__Icon6"; // plasmic-import: 7-KwYGGksEHB/icon
import ChevronRightIcon from "../fragment_icons/icons/PlasmicIcon__ChevronRight"; // plasmic-import: GHdF3hS-oP_3/icon
import ChevronLeftIcon from "../fragment_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import SearchSvgIcon from "../chortke/icons/PlasmicIcon__SearchSvg"; // plasmic-import: fjupp6w2fUeo/icon
import CheckSvgIcon from "../chortke/icons/PlasmicIcon__CheckSvg"; // plasmic-import: VZ6Vl-sB0jLM/icon
import Icon2Icon from "../chortke/icons/PlasmicIcon__Icon2"; // plasmic-import: eeiQdsLura6L/icon
import Icon29Icon from "./icons/PlasmicIcon__Icon29"; // plasmic-import: v6n1zIPv27O2/icon
import Icon30Icon from "./icons/PlasmicIcon__Icon30"; // plasmic-import: b5udc-7LsSfj/icon

createPlasmicElementProxy;

export type PlasmicProductAdmin__VariantMembers = {};
export type PlasmicProductAdmin__VariantsArgs = {};
type VariantPropType = keyof PlasmicProductAdmin__VariantsArgs;
export const PlasmicProductAdmin__VariantProps = new Array<VariantPropType>();

export type PlasmicProductAdmin__ArgsType = {};
type ArgPropType = keyof PlasmicProductAdmin__ArgsType;
export const PlasmicProductAdmin__ArgProps = new Array<ArgPropType>();

export type PlasmicProductAdmin__OverridesType = {
  root?: Flex__<"div">;
  h1?: Flex__<"h1">;
  btnDashboard3?: Flex__<"div">;
  lblUser?: Flex__<"div">;
  btnLogout?: Flex__<"a"> & Partial<LinkProps>;
  btnLogin?: Flex__<typeof Button>;
  section?: Flex__<"section">;
  gridCalculator2?: Flex__<"div">;
  cbProductlist?: Flex__<typeof Select>;
  txtSearch?: Flex__<typeof TextInput>;
  btnSearch?: Flex__<typeof Button>;
  dialogRegisterInvoice?: Flex__<typeof Dialog>;
  waitingIcon5?: Flex__<"svg">;
  txtUserMobile?: Flex__<typeof TextInput>;
  dialogSelectProduct?: Flex__<typeof Dialog>;
  txtProductFilter?: Flex__<typeof TextInput>;
  txtRegisterInvoiceTitle?: Flex__<typeof TextInput>;
  cbProducregisterInvoice?: Flex__<typeof Select>;
  txtServiceName?: Flex__<typeof TextInput>;
  txtServiceCount?: Flex__<typeof TextInput>;
  txtServicePrice?: Flex__<typeof TextInput>;
  txtRegisterinvoiceDescription?: Flex__<typeof TextInput>;
  txtRegisterInvoiceDiscountPercent?: Flex__<typeof TextInput>;
  txtRegisterInvoiceVatPercent?: Flex__<typeof TextInput>;
  txtFinalPrice?: Flex__<typeof TextInput>;
  txtInvoiceId?: Flex__<typeof TextInput>;
  waitingIcon4?: Flex__<"svg">;
  gridInvoice1?: Flex__<"div">;
  gridNoData?: Flex__<"div">;
  gridInvoice12?: Flex__<"div">;
  dialogInvoiceDetails?: Flex__<typeof Dialog2>;
  btnInvoiceInfo?: Flex__<typeof Button>;
  detailsDataApiRequest?: Flex__<typeof ApiRequest>;
  waitingIcon3?: Flex__<"svg">;
  dialogCancelInvoice?: Flex__<typeof Dialog>;
  txtCancelReason?: Flex__<typeof TextInput>;
  waitingIcon6?: Flex__<"svg">;
  sideEffectPageLoad?: Flex__<typeof SideEffect>;
};

export interface DefaultProductAdminProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProductAdmin__RenderFunc(props: {
  variants: PlasmicProductAdmin__VariantsArgs;
  args: PlasmicProductAdmin__ArgsType;
  overrides: PlasmicProductAdmin__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const $globalActions = useGlobalActions?.();

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "txtSearch.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "dialogInvoiceDetails[].open",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "detailsDataApiRequest[].data",
        type: "private",
        variableType: "object"
      },
      {
        path: "detailsDataApiRequest[].error",
        type: "private",
        variableType: "object"
      },
      {
        path: "detailsDataApiRequest[].loading",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "productList",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          {
            productid: 0,
            name: "\u0644\u0637\u0641\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u0646\u0645\u0627\u06cc\u06cc\u062f",
            codename: ""
          }
        ]
      },
      {
        path: "invoicelist",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "invoiceDetials",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => ({})
      },
      {
        path: "invoiceHasOnlinePayment",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "waitingInvoiceDetails",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "waitingPayment",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "paymentAmount",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "showMyAmount",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "isShowPaymentButton",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "reminderWallet",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "increaseButtonListBase",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          2000000, 3500000, 5000000
        ]
      },
      {
        path: "showSelectPriceGrid",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "cbProductlist.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return $state.productList[0].productid;
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "waiting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "productListBox",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "dialogCancelInvoice[].open",
        type: "private",
        variableType: "boolean"
      },
      {
        path: "txtCancelReason[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "cancelInvoiceWaiting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "dialogRegisterInvoice.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "txtUserMobile.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "txtRegisterinvoiceDescription.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "txtRegisterInvoiceDiscountPercent.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "0"
      },
      {
        path: "txtRegisterInvoiceVatPercent.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "0"
      },
      {
        path: "txtServiceName[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "txtServiceCount[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "txtServicePrice[].value",
        type: "private",
        variableType: "text"
      },
      {
        path: "newInvoiceServices",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => [
          { name: "", count: 0, price: 0 }
        ]
      },
      {
        path: "waitingInvoice",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "txtRegisterInvoiceTitle.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "waitingUser",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "registerinvoiceUserid",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "registerinvoiceUserinfo",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "txtFinalPrice.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "0"
      },
      {
        path: "txtInvoiceId.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "0"
      },
      {
        path: "registerInvoiceFinal",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "servicesToRegister",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "limit",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 20
      },
      {
        path: "offset",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0
      },
      {
        path: "waitingLoading",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "showMoreBtn",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "dialogSelectProduct.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "p24Products",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      },
      {
        path: "txtProductFilter.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "cbProducregisterInvoice.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "pageNumber",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 1
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbr2UhI7UlpvR()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicProductAdmin.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicProductAdmin.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicProductAdmin.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            plasmic_fragment_design_system_css.plasmic_tokens,
            sty.root
          )}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___3MEh4)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__qX32Y)}>
              <div className={classNames(projectcss.all, sty.freeBox__ttFn)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox__n0VmW)}
                />
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__ahZv0)}>
                <div className={classNames(projectcss.all, sty.freeBox__vait3)}>
                  <Icon11Icon
                    className={classNames(projectcss.all, sty.svg__xtIhG)}
                    role={"img"}
                  />

                  <h1
                    data-plasmic-name={"h1"}
                    data-plasmic-override={overrides.h1}
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1
                    )}
                  >
                    {
                      "\u0686\u0631\u062a\u06a9\u0647\u060c \u0645\u062f\u06cc\u0631\u06cc\u062a \u0627\u0645\u0648\u0631 \u0645\u0627\u0644\u06cc"
                    }
                  </h1>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__a86Ss)}>
                <div
                  data-plasmic-name={"btnDashboard3"}
                  data-plasmic-override={overrides.btnDashboard3}
                  className={classNames(projectcss.all, sty.btnDashboard3)}
                >
                  <Icon6Icon
                    className={classNames(projectcss.all, sty.svg__mQqXy)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fVfib
                    )}
                  >
                    {"\u0645\u0627\u0634\u06cc\u0646 \u062d\u0633\u0627\u0628"}
                  </div>
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__bbg7V)}>
                <div
                  data-plasmic-name={"lblUser"}
                  data-plasmic-override={overrides.lblUser}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.lblUser
                  )}
                >
                  {""}
                </div>
                <PlasmicLink__
                  data-plasmic-name={"btnLogout"}
                  data-plasmic-override={overrides.btnLogout}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.btnLogout
                  )}
                  component={Link}
                  href={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ""
                      : undefined
                  }
                  platform={"nextjs"}
                >
                  {"\u062e\u0631\u0648\u062c"}
                </PlasmicLink__>
                <Button
                  data-plasmic-name={"btnLogin"}
                  data-plasmic-override={overrides.btnLogin}
                  children2={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mDn3L
                      )}
                    >
                      {"\u0648\u0631\u0648\u062f"}
                    </div>
                  }
                  className={classNames("__wab_instance", sty.btnLogin)}
                  link={
                    "https://www.paziresh24.com/login/?redirect_url=https://chortke.paziresh24.com/"
                  }
                  outline={true}
                />
              </div>
            </div>
          </Stack__>
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
            dir={"rtl"}
          >
            <div
              data-plasmic-name={"gridCalculator2"}
              data-plasmic-override={overrides.gridCalculator2}
              className={classNames(projectcss.all, sty.gridCalculator2)}
            >
              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : (() => {
                      try {
                        return !($ctx.query.productid > 0);
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return false;
                        }
                        throw e;
                      }
                    })()
              ) ? (
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__i9IV,
                    "grid_calculator"
                  )}
                  id={"grid_calculator"}
                >
                  <Select
                    data-plasmic-name={"cbProductlist"}
                    data-plasmic-override={overrides.cbProductlist}
                    aria-label={"name"}
                    aria-labelledby={"productid"}
                    className={classNames("__wab_instance", sty.cbProductlist)}
                    name={"productlist"}
                    onChange={async (...eventArgs: any) => {
                      ((...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "cbProductlist",
                          "value"
                        ])(eventArgs[0]);
                      }).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }

                      (async value => {
                        const $steps = {};

                        $steps["showWaiting"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["waiting"]
                                },
                                operation: 0,
                                value: true
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["showWaiting"] != null &&
                          typeof $steps["showWaiting"] === "object" &&
                          typeof $steps["showWaiting"].then === "function"
                        ) {
                          $steps["showWaiting"] = await $steps["showWaiting"];
                        }

                        $steps["updatePageNumber2"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["pageNumber"]
                                },
                                operation: 0,
                                value: 1
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["updatePageNumber2"] != null &&
                          typeof $steps["updatePageNumber2"] === "object" &&
                          typeof $steps["updatePageNumber2"].then === "function"
                        ) {
                          $steps["updatePageNumber2"] = await $steps[
                            "updatePageNumber2"
                          ];
                        }

                        $steps["clearInvoiceList"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["invoicelist"]
                                },
                                operation: 0,
                                value: []
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["clearInvoiceList"] != null &&
                          typeof $steps["clearInvoiceList"] === "object" &&
                          typeof $steps["clearInvoiceList"].then === "function"
                        ) {
                          $steps["clearInvoiceList"] = await $steps[
                            "clearInvoiceList"
                          ];
                        }

                        $steps["getInvoiceList"] = true
                          ? (() => {
                              const actionArgs = {
                                args: [
                                  undefined,
                                  (() => {
                                    try {
                                      return (
                                        "https://apigw.paziresh24.com/katibe/v1/factors/search/p24-admin?codename=" +
                                        ($state.cbProductlist.value == "0"
                                          ? ""
                                          : $state.cbProductlist.value) +
                                        "&limit=" +
                                        $state.limit +
                                        "&page=" +
                                        $state.pageNumber
                                      );
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return undefined;
                                      }
                                      throw e;
                                    }
                                  })()
                                ]
                              };
                              return $globalActions[
                                "Fragment.apiRequest"
                              ]?.apply(null, [...actionArgs.args]);
                            })()
                          : undefined;
                        if (
                          $steps["getInvoiceList"] != null &&
                          typeof $steps["getInvoiceList"] === "object" &&
                          typeof $steps["getInvoiceList"].then === "function"
                        ) {
                          $steps["getInvoiceList"] = await $steps[
                            "getInvoiceList"
                          ];
                        }

                        $steps["updateInvoicelist"] =
                          $steps.getInvoiceList.status == 200 &&
                          $steps.getInvoiceList.data.status == true
                            ? (() => {
                                const actionArgs = {
                                  variable: {
                                    objRoot: $state,
                                    variablePath: ["invoicelist"]
                                  },
                                  operation: 0,
                                  value: $steps.getInvoiceList.data.data
                                };
                                return (({
                                  variable,
                                  value,
                                  startIndex,
                                  deleteCount
                                }) => {
                                  if (!variable) {
                                    return;
                                  }
                                  const { objRoot, variablePath } = variable;

                                  $stateSet(objRoot, variablePath, value);
                                  return value;
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                        if (
                          $steps["updateInvoicelist"] != null &&
                          typeof $steps["updateInvoicelist"] === "object" &&
                          typeof $steps["updateInvoicelist"].then === "function"
                        ) {
                          $steps["updateInvoicelist"] = await $steps[
                            "updateInvoicelist"
                          ];
                        }

                        $steps["hideWaiting"] = true
                          ? (() => {
                              const actionArgs = {
                                variable: {
                                  objRoot: $state,
                                  variablePath: ["waiting"]
                                },
                                operation: 0,
                                value: false
                              };
                              return (({
                                variable,
                                value,
                                startIndex,
                                deleteCount
                              }) => {
                                if (!variable) {
                                  return;
                                }
                                const { objRoot, variablePath } = variable;

                                $stateSet(objRoot, variablePath, value);
                                return value;
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["hideWaiting"] != null &&
                          typeof $steps["hideWaiting"] === "object" &&
                          typeof $steps["hideWaiting"].then === "function"
                        ) {
                          $steps["hideWaiting"] = await $steps["hideWaiting"];
                        }

                        $steps["showMoreBtn1"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return (() => {
                                    $state.showMoreBtn = true;
                                    if (
                                      $steps.getInvoiceList.status != 200 ||
                                      $steps.getInvoiceList.data.data.length !=
                                        $state.limit
                                    )
                                      return ($state.showMoreBtn = false);
                                  })();
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["showMoreBtn1"] != null &&
                          typeof $steps["showMoreBtn1"] === "object" &&
                          typeof $steps["showMoreBtn1"].then === "function"
                        ) {
                          $steps["showMoreBtn1"] = await $steps["showMoreBtn1"];
                        }
                      }).apply(null, eventArgs);
                    }}
                    options={(() => {
                      try {
                        return $state.productList.map(item => ({
                          value: item.codename,
                          label: item.name
                        }));
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()}
                    placeholder={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jw7BD
                        )}
                      >
                        {
                          "\u0627\u0646\u062a\u062e\u0627\u0628 \u067e\u0631\u0648\u062f\u0627\u06a9\u062a"
                        }
                      </div>
                    }
                    value={generateStateValueProp($state, [
                      "cbProductlist",
                      "value"
                    ])}
                  />
                </div>
              ) : null}
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__bvP,
                  "grid_calculator"
                )}
                id={"grid_calculator"}
              >
                <div className={classNames(projectcss.all, sty.freeBox__ybpJy)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__eZl8A)}
                    font-size={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "10px"
                        : undefined
                    }
                  >
                    <TextInput
                      data-plasmic-name={"txtSearch"}
                      data-plasmic-override={overrides.txtSearch}
                      className={classNames("__wab_instance", sty.txtSearch)}
                      onChange={async (...eventArgs: any) => {
                        ((...eventArgs) => {
                          generateStateOnChangeProp($state, [
                            "txtSearch",
                            "value"
                          ])((e => e.target?.value).apply(null, eventArgs));
                        }).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      placeholder={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "\u062c\u0633\u062a\u200c \u0648 \u062c\u0648"
                          : "\u062c\u0633\u062a \u0648 \u062c\u0648: \u0639\u0646\u0648\u0627\u0646\u060c \u062a\u0627\u0631\u06cc\u062e"
                      }
                      value={
                        generateStateValueProp($state, [
                          "txtSearch",
                          "value"
                        ]) ?? ""
                      }
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__jG9An)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___37BKk
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__veYrr
                        )}
                      >
                        <Button
                          data-plasmic-name={"btnSearch"}
                          data-plasmic-override={overrides.btnSearch}
                          children2={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__nigBt
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "screen",
                                "mobileOnly"
                              )
                                ? "  \u062c\u0633\u062a \u0648 \u062c\u0648  "
                                : "\u062c\u0633\u062a \u0648 \u062c\u0648"}
                            </div>
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.btnSearch
                          )}
                          onClick={async event => {
                            const $steps = {};

                            $steps["showWaiting"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["waiting"]
                                    },
                                    operation: 0,
                                    value: true
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["showWaiting"] != null &&
                              typeof $steps["showWaiting"] === "object" &&
                              typeof $steps["showWaiting"].then === "function"
                            ) {
                              $steps["showWaiting"] = await $steps[
                                "showWaiting"
                              ];
                            }

                            $steps["updateOffset"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["offset"]
                                    },
                                    operation: 0,
                                    value: 0
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["updateOffset"] != null &&
                              typeof $steps["updateOffset"] === "object" &&
                              typeof $steps["updateOffset"].then === "function"
                            ) {
                              $steps["updateOffset"] = await $steps[
                                "updateOffset"
                              ];
                            }

                            $steps["clearInvoiceList"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["invoicelist"]
                                    },
                                    operation: 0,
                                    value: []
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["clearInvoiceList"] != null &&
                              typeof $steps["clearInvoiceList"] === "object" &&
                              typeof $steps["clearInvoiceList"].then ===
                                "function"
                            ) {
                              $steps["clearInvoiceList"] = await $steps[
                                "clearInvoiceList"
                              ];
                            }

                            $steps["getInvoiceList"] = true
                              ? (() => {
                                  const actionArgs = {
                                    args: [
                                      undefined,
                                      (() => {
                                        try {
                                          return (
                                            "https://apigw.paziresh24.com/transaction/v1/admininvoicelist?productid=" +
                                            ($ctx.query.productid > 0
                                              ? $ctx.query.productid
                                              : $state.cbProductlist.value) +
                                            "&search=" +
                                            $state.txtSearch.value +
                                            "&limit=" +
                                            $state.limit +
                                            "&offset=" +
                                            $state.offset
                                          );
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                    ]
                                  };
                                  return $globalActions[
                                    "Fragment.apiRequest"
                                  ]?.apply(null, [...actionArgs.args]);
                                })()
                              : undefined;
                            if (
                              $steps["getInvoiceList"] != null &&
                              typeof $steps["getInvoiceList"] === "object" &&
                              typeof $steps["getInvoiceList"].then ===
                                "function"
                            ) {
                              $steps["getInvoiceList"] = await $steps[
                                "getInvoiceList"
                              ];
                            }

                            $steps["updateInvoicelist"] =
                              $steps.getInvoiceList.status == 200 &&
                              $steps.getInvoiceList.data.status == true
                                ? (() => {
                                    const actionArgs = {
                                      variable: {
                                        objRoot: $state,
                                        variablePath: ["invoicelist"]
                                      },
                                      operation: 0,
                                      value: $steps.getInvoiceList.data.data
                                    };
                                    return (({
                                      variable,
                                      value,
                                      startIndex,
                                      deleteCount
                                    }) => {
                                      if (!variable) {
                                        return;
                                      }
                                      const { objRoot, variablePath } =
                                        variable;

                                      $stateSet(objRoot, variablePath, value);
                                      return value;
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                            if (
                              $steps["updateInvoicelist"] != null &&
                              typeof $steps["updateInvoicelist"] === "object" &&
                              typeof $steps["updateInvoicelist"].then ===
                                "function"
                            ) {
                              $steps["updateInvoicelist"] = await $steps[
                                "updateInvoicelist"
                              ];
                            }

                            $steps["hideWaiting"] = true
                              ? (() => {
                                  const actionArgs = {
                                    variable: {
                                      objRoot: $state,
                                      variablePath: ["waiting"]
                                    },
                                    operation: 0,
                                    value: false
                                  };
                                  return (({
                                    variable,
                                    value,
                                    startIndex,
                                    deleteCount
                                  }) => {
                                    if (!variable) {
                                      return;
                                    }
                                    const { objRoot, variablePath } = variable;

                                    $stateSet(objRoot, variablePath, value);
                                    return value;
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["hideWaiting"] != null &&
                              typeof $steps["hideWaiting"] === "object" &&
                              typeof $steps["hideWaiting"].then === "function"
                            ) {
                              $steps["hideWaiting"] = await $steps[
                                "hideWaiting"
                              ];
                            }

                            $steps["showMoreBtn1"] = true
                              ? (() => {
                                  const actionArgs = {
                                    customFunction: async () => {
                                      return (() => {
                                        $state.showMoreBtn = true;
                                        if (
                                          $steps.getInvoiceList.status != 200 ||
                                          $steps.getInvoiceList.data.data
                                            .length != $state.limit
                                        )
                                          return ($state.showMoreBtn = false);
                                      })();
                                    }
                                  };
                                  return (({ customFunction }) => {
                                    return customFunction();
                                  })?.apply(null, [actionArgs]);
                                })()
                              : undefined;
                            if (
                              $steps["showMoreBtn1"] != null &&
                              typeof $steps["showMoreBtn1"] === "object" &&
                              typeof $steps["showMoreBtn1"].then === "function"
                            ) {
                              $steps["showMoreBtn1"] = await $steps[
                                "showMoreBtn1"
                              ];
                            }
                          }}
                          size={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "minimal"
                              : "compact"
                          }
                        />

                        <Dialog
                          data-plasmic-name={"dialogRegisterInvoice"}
                          data-plasmic-override={
                            overrides.dialogRegisterInvoice
                          }
                          body={
                            <React.Fragment>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__yGyb
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___4UX9K
                                  )}
                                >
                                  <TextInput
                                    data-plasmic-name={"txtUserMobile"}
                                    data-plasmic-override={
                                      overrides.txtUserMobile
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.txtUserMobile
                                    )}
                                    onChange={async (...eventArgs: any) => {
                                      ((...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "txtUserMobile",
                                          "value"
                                        ])(
                                          (e => e.target?.value).apply(
                                            null,
                                            eventArgs
                                          )
                                        );
                                      }).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }

                                      (async event => {
                                        const $steps = {};

                                        $steps["showWaiting"] =
                                          $state.txtUserMobile.value.length ===
                                            11 &&
                                          $state.txtUserMobile.value.substring(
                                            0,
                                            2
                                          ) == "09"
                                            ? (() => {
                                                const actionArgs = {
                                                  variable: {
                                                    objRoot: $state,
                                                    variablePath: [
                                                      "waitingUser"
                                                    ]
                                                  },
                                                  operation: 0,
                                                  value: true
                                                };
                                                return (({
                                                  variable,
                                                  value,
                                                  startIndex,
                                                  deleteCount
                                                }) => {
                                                  if (!variable) {
                                                    return;
                                                  }
                                                  const {
                                                    objRoot,
                                                    variablePath
                                                  } = variable;

                                                  $stateSet(
                                                    objRoot,
                                                    variablePath,
                                                    value
                                                  );
                                                  return value;
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps["showWaiting"] != null &&
                                          typeof $steps["showWaiting"] ===
                                            "object" &&
                                          typeof $steps["showWaiting"].then ===
                                            "function"
                                        ) {
                                          $steps["showWaiting"] = await $steps[
                                            "showWaiting"
                                          ];
                                        }

                                        $steps["setUserToNull"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                customFunction: async () => {
                                                  return (() => {
                                                    $state.registerinvoiceUserid =
                                                      "";
                                                    return ($state.registerinvoiceUserinfo =
                                                      "");
                                                  })();
                                                }
                                              };
                                              return (({ customFunction }) => {
                                                return customFunction();
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["setUserToNull"] != null &&
                                          typeof $steps["setUserToNull"] ===
                                            "object" &&
                                          typeof $steps["setUserToNull"]
                                            .then === "function"
                                        ) {
                                          $steps["setUserToNull"] =
                                            await $steps["setUserToNull"];
                                        }

                                        $steps["final"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "registerInvoiceFinal"
                                                  ]
                                                },
                                                operation: 0,
                                                value: false
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["final"] != null &&
                                          typeof $steps["final"] === "object" &&
                                          typeof $steps["final"].then ===
                                            "function"
                                        ) {
                                          $steps["final"] = await $steps[
                                            "final"
                                          ];
                                        }

                                        $steps["getUserInfoApi"] =
                                          $state.txtUserMobile.value.length ===
                                            11 &&
                                          $state.txtUserMobile.value.substring(
                                            0,
                                            2
                                          ) == "09"
                                            ? (() => {
                                                const actionArgs = {
                                                  args: [
                                                    undefined,
                                                    (() => {
                                                      try {
                                                        return (
                                                          "https://apigw.paziresh24.com/transaction/v1/userByMobile?mobile=" +
                                                          $state.txtUserMobile
                                                            .value
                                                        );
                                                      } catch (e) {
                                                        if (
                                                          e instanceof
                                                            TypeError ||
                                                          e?.plasmicType ===
                                                            "PlasmicUndefinedDataError"
                                                        ) {
                                                          return "https://apigw.paziresh24.com/transaction/v1/userByMobile?mobile=";
                                                        }
                                                        throw e;
                                                      }
                                                    })()
                                                  ]
                                                };
                                                return $globalActions[
                                                  "Fragment.apiRequest"
                                                ]?.apply(null, [
                                                  ...actionArgs.args
                                                ]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps["getUserInfoApi"] != null &&
                                          typeof $steps["getUserInfoApi"] ===
                                            "object" &&
                                          typeof $steps["getUserInfoApi"]
                                            .then === "function"
                                        ) {
                                          $steps["getUserInfoApi"] =
                                            await $steps["getUserInfoApi"];
                                        }

                                        $steps["updateUserByApi"] =
                                          $state.txtUserMobile.value.length ===
                                            11 &&
                                          $state.txtUserMobile.value.substring(
                                            0,
                                            2
                                          ) == "09" &&
                                          $steps.getUserInfoApi.status == 200
                                            ? (() => {
                                                const actionArgs = {
                                                  customFunction: async () => {
                                                    return (() => {
                                                      $state.registerinvoiceUserinfo =
                                                        " برای " +
                                                        (($state.registerinvoiceUserinfo =
                                                          $steps.getUserInfoApi.data.data.isDoctor)
                                                          ? "پزشک"
                                                          : "") +
                                                        " " +
                                                        $steps.getUserInfoApi
                                                          .data.data.name +
                                                        " " +
                                                        $steps.getUserInfoApi
                                                          .data.data.family;
                                                      return ($state.registerinvoiceUserid =
                                                        $steps.getUserInfoApi.data.data.id);
                                                    })();
                                                  }
                                                };
                                                return (({
                                                  customFunction
                                                }) => {
                                                  return customFunction();
                                                })?.apply(null, [actionArgs]);
                                              })()
                                            : undefined;
                                        if (
                                          $steps["updateUserByApi"] != null &&
                                          typeof $steps["updateUserByApi"] ===
                                            "object" &&
                                          typeof $steps["updateUserByApi"]
                                            .then === "function"
                                        ) {
                                          $steps["updateUserByApi"] =
                                            await $steps["updateUserByApi"];
                                        }

                                        $steps["hideWaiting"] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["waitingUser"]
                                                },
                                                operation: 0,
                                                value: false
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps["hideWaiting"] != null &&
                                          typeof $steps["hideWaiting"] ===
                                            "object" &&
                                          typeof $steps["hideWaiting"].then ===
                                            "function"
                                        ) {
                                          $steps["hideWaiting"] = await $steps[
                                            "hideWaiting"
                                          ];
                                        }
                                      }).apply(null, eventArgs);
                                    }}
                                    placeholder={
                                      "\u0627\u0646\u062a\u062e\u0627\u0628 \u06a9\u0627\u0631\u0628\u0631 \u0628\u0627 \u0634\u0645\u0627\u0631\u0647 \u0645\u0648\u0628\u0627\u06cc\u0644"
                                    }
                                    startIcon={
                                      <SearchSvgIcon
                                        className={classNames(
                                          projectcss.all,
                                          sty.svg__wyVcR
                                        )}
                                        role={"img"}
                                      />
                                    }
                                    value={
                                      generateStateValueProp($state, [
                                        "txtUserMobile",
                                        "value"
                                      ]) ?? ""
                                    }
                                  />
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___3STz1
                                  )}
                                >
                                  <Dialog
                                    data-plasmic-name={"dialogSelectProduct"}
                                    data-plasmic-override={
                                      overrides.dialogSelectProduct
                                    }
                                    body={
                                      <React.Fragment>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__sDRo
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__yws2Z
                                            )}
                                          >
                                            <TextInput
                                              data-plasmic-name={
                                                "txtProductFilter"
                                              }
                                              data-plasmic-override={
                                                overrides.txtProductFilter
                                              }
                                              className={classNames(
                                                "__wab_instance",
                                                sty.txtProductFilter
                                              )}
                                              onChange={async (
                                                ...eventArgs: any
                                              ) => {
                                                ((...eventArgs) => {
                                                  generateStateOnChangeProp(
                                                    $state,
                                                    [
                                                      "txtProductFilter",
                                                      "value"
                                                    ]
                                                  )(
                                                    (e =>
                                                      e.target?.value).apply(
                                                      null,
                                                      eventArgs
                                                    )
                                                  );
                                                }).apply(null, eventArgs);

                                                if (
                                                  eventArgs.length > 1 &&
                                                  eventArgs[1] &&
                                                  eventArgs[1]
                                                    ._plasmic_state_init_
                                                ) {
                                                  return;
                                                }
                                              }}
                                              placeholder={
                                                "\u062c\u0633\u062a \u0648 \u062c\u0648"
                                              }
                                              value={
                                                generateStateValueProp($state, [
                                                  "txtProductFilter",
                                                  "value"
                                                ]) ?? ""
                                              }
                                            />
                                          </div>
                                        </div>
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            sty.freeBox__eSkOy
                                          )}
                                        >
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__oUzO5
                                            )}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text___8SwmW
                                              )}
                                            >
                                              {"\u0631\u062f\u06cc\u0641"}
                                            </div>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__mH8So
                                            )}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__yb4Ue
                                              )}
                                            >
                                              {"\u0634\u0646\u0627\u0633\u0647"}
                                            </div>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__olBzp
                                            )}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__yrBex
                                              )}
                                            >
                                              {"\u0639\u0646\u0648\u0627\u0646"}
                                            </div>
                                          </div>
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__kSAfa
                                            )}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                projectcss.__wab_text,
                                                sty.text__dDh1T
                                              )}
                                            >
                                              {
                                                "\u0639\u0645\u0644\u06cc\u0627\u062a"
                                              }
                                            </div>
                                          </div>
                                        </div>
                                        {(_par =>
                                          !_par
                                            ? []
                                            : Array.isArray(_par)
                                            ? _par
                                            : [_par])(
                                          (() => {
                                            try {
                                              return $state.p24Products.filter(
                                                product =>
                                                  product.name
                                                    .toLowerCase()
                                                    .includes(
                                                      $state.txtProductFilter.value.toLowerCase()
                                                    )
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return [];
                                              }
                                              throw e;
                                            }
                                          })()
                                        ).map(
                                          (
                                            __plasmic_item_0,
                                            __plasmic_idx_0
                                          ) => {
                                            const currentItem =
                                              __plasmic_item_0;
                                            const currentIndex =
                                              __plasmic_idx_0;
                                            return (
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.freeBox__jlIb4
                                                )}
                                                key={currentIndex}
                                              >
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.freeBox__aOnMr
                                                  )}
                                                >
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__qmaws
                                                    )}
                                                  >
                                                    <React.Fragment>
                                                      {(() => {
                                                        try {
                                                          return (
                                                            currentIndex + 1
                                                          );
                                                        } catch (e) {
                                                          if (
                                                            e instanceof
                                                              TypeError ||
                                                            e?.plasmicType ===
                                                              "PlasmicUndefinedDataError"
                                                          ) {
                                                            return "\u0631\u062f\u06cc\u0641";
                                                          }
                                                          throw e;
                                                        }
                                                      })()}
                                                    </React.Fragment>
                                                  </div>
                                                </div>
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.freeBox__uFiL
                                                  )}
                                                >
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text___0ZZxn
                                                    )}
                                                  >
                                                    <React.Fragment>
                                                      {(() => {
                                                        try {
                                                          return currentItem.codename;
                                                        } catch (e) {
                                                          if (
                                                            e instanceof
                                                              TypeError ||
                                                            e?.plasmicType ===
                                                              "PlasmicUndefinedDataError"
                                                          ) {
                                                            return "\u06a9\u062f\u0646\u06cc\u0645";
                                                          }
                                                          throw e;
                                                        }
                                                      })()}
                                                    </React.Fragment>
                                                  </div>
                                                </div>
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.freeBox__jFCfw
                                                  )}
                                                >
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text__luXj
                                                    )}
                                                  >
                                                    <React.Fragment>
                                                      {(() => {
                                                        try {
                                                          return currentItem.name;
                                                        } catch (e) {
                                                          if (
                                                            e instanceof
                                                              TypeError ||
                                                            e?.plasmicType ===
                                                              "PlasmicUndefinedDataError"
                                                          ) {
                                                            return "\u0639\u0646\u0648\u0627\u0646";
                                                          }
                                                          throw e;
                                                        }
                                                      })()}
                                                    </React.Fragment>
                                                  </div>
                                                </div>
                                                <div
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.freeBox__q5VaH
                                                  )}
                                                >
                                                  <Button2
                                                    children2={
                                                      "\u0627\u0646\u062a\u062e\u0627\u0628"
                                                    }
                                                    className={classNames(
                                                      "__wab_instance",
                                                      sty.button__m53Ql
                                                    )}
                                                    color={"green"}
                                                    onClick={async event => {
                                                      const $steps = {};

                                                      $steps[
                                                        "updateRegisterInvoiceFinal"
                                                      ] = true
                                                        ? (() => {
                                                            const actionArgs = {
                                                              variable: {
                                                                objRoot: $state,
                                                                variablePath: [
                                                                  "registerInvoiceFinal"
                                                                ]
                                                              },
                                                              operation: 0,
                                                              value: false
                                                            };
                                                            return (({
                                                              variable,
                                                              value,
                                                              startIndex,
                                                              deleteCount
                                                            }) => {
                                                              if (!variable) {
                                                                return;
                                                              }
                                                              const {
                                                                objRoot,
                                                                variablePath
                                                              } = variable;

                                                              $stateSet(
                                                                objRoot,
                                                                variablePath,
                                                                value
                                                              );
                                                              return value;
                                                            })?.apply(null, [
                                                              actionArgs
                                                            ]);
                                                          })()
                                                        : undefined;
                                                      if (
                                                        $steps[
                                                          "updateRegisterInvoiceFinal"
                                                        ] != null &&
                                                        typeof $steps[
                                                          "updateRegisterInvoiceFinal"
                                                        ] === "object" &&
                                                        typeof $steps[
                                                          "updateRegisterInvoiceFinal"
                                                        ].then === "function"
                                                      ) {
                                                        $steps[
                                                          "updateRegisterInvoiceFinal"
                                                        ] = await $steps[
                                                          "updateRegisterInvoiceFinal"
                                                        ];
                                                      }

                                                      $steps["runCode"] = true
                                                        ? (() => {
                                                            const actionArgs = {
                                                              customFunction:
                                                                async () => {
                                                                  return (() => {
                                                                    $state.registerinvoiceUserinfo =
                                                                      " برای پروداکت " +
                                                                      currentItem.name;
                                                                    return ($state.registerinvoiceUserid =
                                                                      currentItem.codename);
                                                                  })();
                                                                }
                                                            };
                                                            return (({
                                                              customFunction
                                                            }) => {
                                                              return customFunction();
                                                            })?.apply(null, [
                                                              actionArgs
                                                            ]);
                                                          })()
                                                        : undefined;
                                                      if (
                                                        $steps["runCode"] !=
                                                          null &&
                                                        typeof $steps[
                                                          "runCode"
                                                        ] === "object" &&
                                                        typeof $steps["runCode"]
                                                          .then === "function"
                                                      ) {
                                                        $steps["runCode"] =
                                                          await $steps[
                                                            "runCode"
                                                          ];
                                                      }

                                                      $steps["runCode2"] = true
                                                        ? (() => {
                                                            const actionArgs = {
                                                              customFunction:
                                                                async () => {
                                                                  return ($state.dialogSelectProduct.open =
                                                                    false);
                                                                }
                                                            };
                                                            return (({
                                                              customFunction
                                                            }) => {
                                                              return customFunction();
                                                            })?.apply(null, [
                                                              actionArgs
                                                            ]);
                                                          })()
                                                        : undefined;
                                                      if (
                                                        $steps["runCode2"] !=
                                                          null &&
                                                        typeof $steps[
                                                          "runCode2"
                                                        ] === "object" &&
                                                        typeof $steps[
                                                          "runCode2"
                                                        ].then === "function"
                                                      ) {
                                                        $steps["runCode2"] =
                                                          await $steps[
                                                            "runCode2"
                                                          ];
                                                      }
                                                    }}
                                                    size={"compact"}
                                                  />
                                                </div>
                                              </div>
                                            );
                                          }
                                        )}
                                      </React.Fragment>
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.dialogSelectProduct
                                    )}
                                    onOpenChange={async (...eventArgs: any) => {
                                      generateStateOnChangeProp($state, [
                                        "dialogSelectProduct",
                                        "open"
                                      ]).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    }}
                                    open={generateStateValueProp($state, [
                                      "dialogSelectProduct",
                                      "open"
                                    ])}
                                    title={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__jz33O
                                        )}
                                      >
                                        {
                                          "\u067e\u0631\u0648\u062f\u0627\u06a9\u062a \u0645\u0648\u0631\u062f \u0646\u0638\u0631 \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u0646\u0645\u0627\u06cc\u06cc\u062f:"
                                        }
                                      </div>
                                    }
                                    trigger={null}
                                  />

                                  <Button2
                                    children2={
                                      "\u0627\u0646\u062a\u062e\u0627\u0628  \u0645\u0634\u062a\u0631\u06cc"
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.button__yqh7W
                                    )}
                                    onClick={async event => {
                                      const $steps = {};

                                      $steps["txtUserMobile"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              customFunction: async () => {
                                                return (() => {
                                                  $state.txtUserMobile.value =
                                                    "";
                                                  return ($state.cbProducregisterInvoice.value =
                                                    $state.productList[0].productid);
                                                })();
                                              }
                                            };
                                            return (({ customFunction }) => {
                                              return customFunction();
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["txtUserMobile"] != null &&
                                        typeof $steps["txtUserMobile"] ===
                                          "object" &&
                                        typeof $steps["txtUserMobile"].then ===
                                          "function"
                                      ) {
                                        $steps["txtUserMobile"] = await $steps[
                                          "txtUserMobile"
                                        ];
                                      }

                                      $steps["showWaiting"] =
                                        $state.p24Products.length == 0
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["waitingUser"]
                                                },
                                                operation: 0,
                                                value: true
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["showWaiting"] != null &&
                                        typeof $steps["showWaiting"] ===
                                          "object" &&
                                        typeof $steps["showWaiting"].then ===
                                          "function"
                                      ) {
                                        $steps["showWaiting"] = await $steps[
                                          "showWaiting"
                                        ];
                                      }

                                      $steps["getp24Products"] =
                                        $state.p24Products.length == 0
                                          ? (() => {
                                              const actionArgs = {
                                                args: [
                                                  undefined,
                                                  "https://apigw.paziresh24.com/transaction/v1/p24products"
                                                ]
                                              };
                                              return $globalActions[
                                                "Fragment.apiRequest"
                                              ]?.apply(null, [
                                                ...actionArgs.args
                                              ]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["getp24Products"] != null &&
                                        typeof $steps["getp24Products"] ===
                                          "object" &&
                                        typeof $steps["getp24Products"].then ===
                                          "function"
                                      ) {
                                        $steps["getp24Products"] = await $steps[
                                          "getp24Products"
                                        ];
                                      }

                                      $steps["updateP24Products"] =
                                        $state.p24Products.length == 0 &&
                                        $steps.getp24Products.status == 200
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: ["p24Products"]
                                                },
                                                operation: 0,
                                                value:
                                                  $steps.getp24Products.data
                                                    .data
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["updateP24Products"] != null &&
                                        typeof $steps["updateP24Products"] ===
                                          "object" &&
                                        typeof $steps["updateP24Products"]
                                          .then === "function"
                                      ) {
                                        $steps["updateP24Products"] =
                                          await $steps["updateP24Products"];
                                      }

                                      $steps["hideWaiting"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["waitingUser"]
                                              },
                                              operation: 0,
                                              value: false
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["hideWaiting"] != null &&
                                        typeof $steps["hideWaiting"] ===
                                          "object" &&
                                        typeof $steps["hideWaiting"].then ===
                                          "function"
                                      ) {
                                        $steps["hideWaiting"] = await $steps[
                                          "hideWaiting"
                                        ];
                                      }

                                      $steps["updateDialogSelectProductOpen"] =
                                        true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "dialogSelectProduct",
                                                    "open"
                                                  ]
                                                },
                                                operation: 0,
                                                value: true
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps[
                                          "updateDialogSelectProductOpen"
                                        ] != null &&
                                        typeof $steps[
                                          "updateDialogSelectProductOpen"
                                        ] === "object" &&
                                        typeof $steps[
                                          "updateDialogSelectProductOpen"
                                        ].then === "function"
                                      ) {
                                        $steps[
                                          "updateDialogSelectProductOpen"
                                        ] = await $steps[
                                          "updateDialogSelectProductOpen"
                                        ];
                                      }
                                    }}
                                    size={"compact"}
                                  />
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__eWfmw
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__ajrVe
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__bqk0A
                                    )}
                                  >
                                    {"\u0639\u0646\u0648\u0627\u0646:"}
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__ki4Vy
                                  )}
                                >
                                  <TextInput
                                    data-plasmic-name={
                                      "txtRegisterInvoiceTitle"
                                    }
                                    data-plasmic-override={
                                      overrides.txtRegisterInvoiceTitle
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.txtRegisterInvoiceTitle
                                    )}
                                    onChange={async (...eventArgs: any) => {
                                      ((...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "txtRegisterInvoiceTitle",
                                          "value"
                                        ])(
                                          (e => e.target?.value).apply(
                                            null,
                                            eventArgs
                                          )
                                        );
                                      }).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    }}
                                    placeholder={
                                      "\u0639\u0646\u0648\u0627\u0646 \u0635\u0648\u0631\u062a \u062d\u0633\u0627\u0628"
                                    }
                                    value={
                                      generateStateValueProp($state, [
                                        "txtRegisterInvoiceTitle",
                                        "value"
                                      ]) ?? ""
                                    }
                                  />
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__oXgaj
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__nPb0X
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__wdXg4
                                    )}
                                  >
                                    {
                                      "\u067e\u0631\u0648\u062f\u0627\u06a9\u062a \u0634\u0645\u0627:"
                                    }
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__v7BBh
                                  )}
                                >
                                  <Select
                                    data-plasmic-name={
                                      "cbProducregisterInvoice"
                                    }
                                    data-plasmic-override={
                                      overrides.cbProducregisterInvoice
                                    }
                                    aria-label={"name"}
                                    aria-labelledby={"productid"}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.cbProducregisterInvoice
                                    )}
                                    name={"productlist"}
                                    onChange={async (...eventArgs: any) => {
                                      ((...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "cbProducregisterInvoice",
                                          "value"
                                        ])(eventArgs[0]);
                                      }).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }

                                      (async value => {
                                        const $steps = {};

                                        $steps[
                                          "updateDialogRegisterInvoiceOpen"
                                        ] = true
                                          ? (() => {
                                              const actionArgs = {
                                                variable: {
                                                  objRoot: $state,
                                                  variablePath: [
                                                    "dialogRegisterInvoice",
                                                    "open"
                                                  ]
                                                },
                                                operation: 0,
                                                value: true
                                              };
                                              return (({
                                                variable,
                                                value,
                                                startIndex,
                                                deleteCount
                                              }) => {
                                                if (!variable) {
                                                  return;
                                                }
                                                const {
                                                  objRoot,
                                                  variablePath
                                                } = variable;

                                                $stateSet(
                                                  objRoot,
                                                  variablePath,
                                                  value
                                                );
                                                return value;
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                        if (
                                          $steps[
                                            "updateDialogRegisterInvoiceOpen"
                                          ] != null &&
                                          typeof $steps[
                                            "updateDialogRegisterInvoiceOpen"
                                          ] === "object" &&
                                          typeof $steps[
                                            "updateDialogRegisterInvoiceOpen"
                                          ].then === "function"
                                        ) {
                                          $steps[
                                            "updateDialogRegisterInvoiceOpen"
                                          ] = await $steps[
                                            "updateDialogRegisterInvoiceOpen"
                                          ];
                                        }
                                      }).apply(null, eventArgs);
                                    }}
                                    options={(() => {
                                      try {
                                        return $state.productList
                                          .filter(item => item.productid !== 0)
                                          .map(item => ({
                                            value: item.codename,
                                            label: item.name
                                          }));
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return [];
                                        }
                                        throw e;
                                      }
                                    })()}
                                    placeholder={
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__rmHzk
                                        )}
                                      >
                                        {
                                          "\u0627\u0646\u062a\u062e\u0627\u0628 \u067e\u0631\u0648\u062f\u0627\u06a9\u062a"
                                        }
                                      </div>
                                    }
                                    value={generateStateValueProp($state, [
                                      "cbProducregisterInvoice",
                                      "value"
                                    ])}
                                  />
                                </div>
                              </div>
                              {(_par =>
                                !_par
                                  ? []
                                  : Array.isArray(_par)
                                  ? _par
                                  : [_par])(
                                (() => {
                                  try {
                                    return $state.newInvoiceServices;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return [];
                                    }
                                    throw e;
                                  }
                                })()
                              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                                const currentItem = __plasmic_item_0;
                                const currentIndex = __plasmic_idx_0;
                                return (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__oyQrd
                                    )}
                                    key={currentIndex}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__o8S49
                                      )}
                                    >
                                      {(() => {
                                        const child$Props = {
                                          className: classNames(
                                            "__wab_instance",
                                            sty.txtServiceName
                                          ),
                                          onChange: async (
                                            ...eventArgs: any
                                          ) => {
                                            ((...eventArgs) => {
                                              generateStateOnChangeProp(
                                                $state,
                                                [
                                                  "txtServiceName",
                                                  __plasmic_idx_0,
                                                  "value"
                                                ]
                                              )(
                                                (e => e.target?.value).apply(
                                                  null,
                                                  eventArgs
                                                )
                                              );
                                            }).apply(null, eventArgs);

                                            if (
                                              eventArgs.length > 1 &&
                                              eventArgs[1] &&
                                              eventArgs[1]._plasmic_state_init_
                                            ) {
                                              return;
                                            }

                                            (async event => {
                                              const $steps = {};

                                              $steps["runCode"] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      customFunction:
                                                        async () => {
                                                          return (() => {
                                                            return ($state.newInvoiceServices[
                                                              currentIndex
                                                            ].title =
                                                              currentItem.title);
                                                          })();
                                                        }
                                                    };
                                                    return (({
                                                      customFunction
                                                    }) => {
                                                      return customFunction();
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps["runCode"] != null &&
                                                typeof $steps["runCode"] ===
                                                  "object" &&
                                                typeof $steps["runCode"]
                                                  .then === "function"
                                              ) {
                                                $steps["runCode"] =
                                                  await $steps["runCode"];
                                              }
                                            }).apply(null, eventArgs);
                                          },
                                          placeholder:
                                            "\u0639\u0646\u0648\u0627\u0646",
                                          value:
                                            generateStateValueProp($state, [
                                              "txtServiceName",
                                              __plasmic_idx_0,
                                              "value"
                                            ]) ?? ""
                                        };

                                        initializePlasmicStates(
                                          $state,
                                          [
                                            {
                                              name: "txtServiceName[].value",
                                              initFunc: ({
                                                $props,
                                                $state,
                                                $queries
                                              }) =>
                                                (() => {
                                                  try {
                                                    return "";
                                                  } catch (e) {
                                                    if (
                                                      e instanceof TypeError ||
                                                      e?.plasmicType ===
                                                        "PlasmicUndefinedDataError"
                                                    ) {
                                                      return undefined;
                                                    }
                                                    throw e;
                                                  }
                                                })()
                                            }
                                          ],
                                          [__plasmic_idx_0]
                                        );
                                        return (
                                          <TextInput
                                            data-plasmic-name={"txtServiceName"}
                                            data-plasmic-override={
                                              overrides.txtServiceName
                                            }
                                            {...child$Props}
                                          />
                                        );
                                      })()}
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox___8VvBh
                                      )}
                                    >
                                      {(() => {
                                        const child$Props = {
                                          className: classNames(
                                            "__wab_instance",
                                            sty.txtServiceCount
                                          ),
                                          onChange: async (
                                            ...eventArgs: any
                                          ) => {
                                            ((...eventArgs) => {
                                              generateStateOnChangeProp(
                                                $state,
                                                [
                                                  "txtServiceCount",
                                                  __plasmic_idx_0,
                                                  "value"
                                                ]
                                              )(
                                                (e => e.target?.value).apply(
                                                  null,
                                                  eventArgs
                                                )
                                              );
                                            }).apply(null, eventArgs);

                                            if (
                                              eventArgs.length > 1 &&
                                              eventArgs[1] &&
                                              eventArgs[1]._plasmic_state_init_
                                            ) {
                                              return;
                                            }

                                            (async event => {
                                              const $steps = {};

                                              $steps["runCode"] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      customFunction:
                                                        async () => {
                                                          return (() => {
                                                            return ($state.newInvoiceServices[
                                                              currentIndex
                                                            ].title =
                                                              currentItem.count);
                                                          })();
                                                        }
                                                    };
                                                    return (({
                                                      customFunction
                                                    }) => {
                                                      return customFunction();
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps["runCode"] != null &&
                                                typeof $steps["runCode"] ===
                                                  "object" &&
                                                typeof $steps["runCode"]
                                                  .then === "function"
                                              ) {
                                                $steps["runCode"] =
                                                  await $steps["runCode"];
                                              }
                                            }).apply(null, eventArgs);
                                          },
                                          placeholder:
                                            "\u062a\u0639\u062f\u0627\u062f",
                                          type: "number",
                                          value:
                                            generateStateValueProp($state, [
                                              "txtServiceCount",
                                              __plasmic_idx_0,
                                              "value"
                                            ]) ?? ""
                                        };

                                        initializePlasmicStates(
                                          $state,
                                          [
                                            {
                                              name: "txtServiceCount[].value",
                                              initFunc: ({
                                                $props,
                                                $state,
                                                $queries
                                              }) => ""
                                            }
                                          ],
                                          [__plasmic_idx_0]
                                        );
                                        return (
                                          <TextInput
                                            data-plasmic-name={
                                              "txtServiceCount"
                                            }
                                            data-plasmic-override={
                                              overrides.txtServiceCount
                                            }
                                            {...child$Props}
                                          />
                                        );
                                      })()}
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__oWttc
                                      )}
                                    >
                                      {(() => {
                                        const child$Props = {
                                          className: classNames(
                                            "__wab_instance",
                                            sty.txtServicePrice
                                          ),
                                          onChange: async (
                                            ...eventArgs: any
                                          ) => {
                                            ((...eventArgs) => {
                                              generateStateOnChangeProp(
                                                $state,
                                                [
                                                  "txtServicePrice",
                                                  __plasmic_idx_0,
                                                  "value"
                                                ]
                                              )(
                                                (e => e.target?.value).apply(
                                                  null,
                                                  eventArgs
                                                )
                                              );
                                            }).apply(null, eventArgs);

                                            if (
                                              eventArgs.length > 1 &&
                                              eventArgs[1] &&
                                              eventArgs[1]._plasmic_state_init_
                                            ) {
                                              return;
                                            }

                                            (async event => {
                                              const $steps = {};

                                              $steps["runCode"] = true
                                                ? (() => {
                                                    const actionArgs = {
                                                      customFunction:
                                                        async () => {
                                                          return (() => {
                                                            return ($state.newInvoiceServices[
                                                              currentIndex
                                                            ].title =
                                                              currentItem.price);
                                                          })();
                                                        }
                                                    };
                                                    return (({
                                                      customFunction
                                                    }) => {
                                                      return customFunction();
                                                    })?.apply(null, [
                                                      actionArgs
                                                    ]);
                                                  })()
                                                : undefined;
                                              if (
                                                $steps["runCode"] != null &&
                                                typeof $steps["runCode"] ===
                                                  "object" &&
                                                typeof $steps["runCode"]
                                                  .then === "function"
                                              ) {
                                                $steps["runCode"] =
                                                  await $steps["runCode"];
                                              }
                                            }).apply(null, eventArgs);
                                          },
                                          placeholder:
                                            "\u0645\u0628\u0644\u063a - \u0631\u06cc\u0627\u0644",
                                          type: "number",
                                          value:
                                            generateStateValueProp($state, [
                                              "txtServicePrice",
                                              __plasmic_idx_0,
                                              "value"
                                            ]) ?? ""
                                        };

                                        initializePlasmicStates(
                                          $state,
                                          [
                                            {
                                              name: "txtServicePrice[].value",
                                              initFunc: ({
                                                $props,
                                                $state,
                                                $queries
                                              }) => ""
                                            }
                                          ],
                                          [__plasmic_idx_0]
                                        );
                                        return (
                                          <TextInput
                                            data-plasmic-name={
                                              "txtServicePrice"
                                            }
                                            data-plasmic-override={
                                              overrides.txtServicePrice
                                            }
                                            {...child$Props}
                                          />
                                        );
                                      })()}
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__aoh2Q
                                      )}
                                    >
                                      {(() => {
                                        try {
                                          return currentIndex == 0;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <Button2
                                          children2={"+"}
                                          className={classNames(
                                            "__wab_instance",
                                            sty.button__i2Qd
                                          )}
                                          onClick={async event => {
                                            const $steps = {};

                                            $steps["runCode"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    customFunction:
                                                      async () => {
                                                        return (() => {
                                                          return $state.newInvoiceServices.push(
                                                            {
                                                              name: "",
                                                              count: "",
                                                              price: ""
                                                            }
                                                          );
                                                        })();
                                                      }
                                                  };
                                                  return (({
                                                    customFunction
                                                  }) => {
                                                    return customFunction();
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["runCode"] != null &&
                                              typeof $steps["runCode"] ===
                                                "object" &&
                                              typeof $steps["runCode"].then ===
                                                "function"
                                            ) {
                                              $steps["runCode"] = await $steps[
                                                "runCode"
                                              ];
                                            }
                                          }}
                                        />
                                      ) : null}
                                      {(() => {
                                        try {
                                          return false /*currentIndex!=0*/;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return true;
                                          }
                                          throw e;
                                        }
                                      })() ? (
                                        <Button2
                                          children2={"-"}
                                          className={classNames(
                                            "__wab_instance",
                                            sty.button__clwUn
                                          )}
                                          color={"red"}
                                          onClick={async event => {
                                            const $steps = {};

                                            $steps["runCode"] = true
                                              ? (() => {
                                                  const actionArgs = {
                                                    customFunction:
                                                      async () => {
                                                        return $state.newInvoiceServices.splice(
                                                          currentIndex,
                                                          1
                                                        );
                                                      }
                                                  };
                                                  return (({
                                                    customFunction
                                                  }) => {
                                                    return customFunction();
                                                  })?.apply(null, [actionArgs]);
                                                })()
                                              : undefined;
                                            if (
                                              $steps["runCode"] != null &&
                                              typeof $steps["runCode"] ===
                                                "object" &&
                                              typeof $steps["runCode"].then ===
                                                "function"
                                            ) {
                                              $steps["runCode"] = await $steps[
                                                "runCode"
                                              ];
                                            }
                                          }}
                                        />
                                      ) : null}
                                    </div>
                                  </div>
                                );
                              })}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__n4Agk
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__ntWeu
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__mQnEl
                                    )}
                                  >
                                    {
                                      "\u062a\u0648\u0636\u06cc\u062d\u0627\u062a:"
                                    }
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__cfCVy
                                  )}
                                >
                                  <TextInput
                                    data-plasmic-name={
                                      "txtRegisterinvoiceDescription"
                                    }
                                    data-plasmic-override={
                                      overrides.txtRegisterinvoiceDescription
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.txtRegisterinvoiceDescription
                                    )}
                                    onChange={async (...eventArgs: any) => {
                                      ((...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "txtRegisterinvoiceDescription",
                                          "value"
                                        ])(
                                          (e => e.target?.value).apply(
                                            null,
                                            eventArgs
                                          )
                                        );
                                      }).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    }}
                                    placeholder={
                                      "\u062a\u0648\u0636\u06cc\u062d\u0627\u062a \u0635\u0648\u0631\u062a \u062d\u0633\u0627\u0628"
                                    }
                                    value={
                                      generateStateValueProp($state, [
                                        "txtRegisterinvoiceDescription",
                                        "value"
                                      ]) ?? ""
                                    }
                                  />
                                </div>
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__ka9Qe
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__hZa7
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__axDC
                                    )}
                                  >
                                    {
                                      "\u062f\u0631\u0635\u062f \u062a\u062e\u0641\u06cc\u0641:"
                                    }
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__f6W70
                                  )}
                                >
                                  <TextInput
                                    data-plasmic-name={
                                      "txtRegisterInvoiceDiscountPercent"
                                    }
                                    data-plasmic-override={
                                      overrides.txtRegisterInvoiceDiscountPercent
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.txtRegisterInvoiceDiscountPercent
                                    )}
                                    onChange={async (...eventArgs: any) => {
                                      ((...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "txtRegisterInvoiceDiscountPercent",
                                          "value"
                                        ])(
                                          (e => e.target?.value).apply(
                                            null,
                                            eventArgs
                                          )
                                        );
                                      }).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    }}
                                    placeholder={
                                      "\u062f\u0631\u0635\u062f \u062a\u062e\u0641\u06cc\u0641"
                                    }
                                    type={"number"}
                                    value={
                                      generateStateValueProp($state, [
                                        "txtRegisterInvoiceDiscountPercent",
                                        "value"
                                      ]) ?? ""
                                    }
                                  />
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___4OfQ3
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__bgk1J
                                    )}
                                  >
                                    {
                                      "\u062f\u0631\u0635\u062f \u0645\u0627\u0644\u06cc\u0627\u062a:"
                                    }
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__zcG
                                  )}
                                >
                                  <TextInput
                                    data-plasmic-name={
                                      "txtRegisterInvoiceVatPercent"
                                    }
                                    data-plasmic-override={
                                      overrides.txtRegisterInvoiceVatPercent
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.txtRegisterInvoiceVatPercent
                                    )}
                                    onChange={async (...eventArgs: any) => {
                                      ((...eventArgs) => {
                                        generateStateOnChangeProp($state, [
                                          "txtRegisterInvoiceVatPercent",
                                          "value"
                                        ])(
                                          (e => e.target?.value).apply(
                                            null,
                                            eventArgs
                                          )
                                        );
                                      }).apply(null, eventArgs);

                                      if (
                                        eventArgs.length > 1 &&
                                        eventArgs[1] &&
                                        eventArgs[1]._plasmic_state_init_
                                      ) {
                                        return;
                                      }
                                    }}
                                    placeholder={
                                      "\u062f\u0631\u0635\u062f \u0645\u0627\u0644\u06cc\u0627\u062a"
                                    }
                                    type={"number"}
                                    value={
                                      generateStateValueProp($state, [
                                        "txtRegisterInvoiceVatPercent",
                                        "value"
                                      ]) ?? ""
                                    }
                                  />
                                </div>
                              </div>
                              {(() => {
                                try {
                                  return $state.registerInvoiceFinal;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__u1HY
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__gzZr4
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___6Mmu5
                                      )}
                                    >
                                      {
                                        "\u0645\u0644\u0628\u063a \u0646\u0647\u0627\u06cc\u06cc:"
                                      }
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__cD60U
                                    )}
                                  >
                                    <TextInput
                                      data-plasmic-name={"txtFinalPrice"}
                                      data-plasmic-override={
                                        overrides.txtFinalPrice
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.txtFinalPrice
                                      )}
                                      isDisabled={true}
                                      onChange={async (...eventArgs: any) => {
                                        ((...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "txtFinalPrice",
                                            "value"
                                          ])(
                                            (e => e.target?.value).apply(
                                              null,
                                              eventArgs
                                            )
                                          );
                                        }).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      }}
                                      placeholder={``}
                                      value={
                                        generateStateValueProp($state, [
                                          "txtFinalPrice",
                                          "value"
                                        ]) ?? ""
                                      }
                                    />
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__zltcX
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__tuIg0
                                      )}
                                    >
                                      {"\u0634\u0646\u0627\u0633\u0647:"}
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox___57YXp
                                    )}
                                  >
                                    <TextInput
                                      data-plasmic-name={"txtInvoiceId"}
                                      data-plasmic-override={
                                        overrides.txtInvoiceId
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.txtInvoiceId
                                      )}
                                      isDisabled={true}
                                      onChange={async (...eventArgs: any) => {
                                        ((...eventArgs) => {
                                          generateStateOnChangeProp($state, [
                                            "txtInvoiceId",
                                            "value"
                                          ])(
                                            (e => e.target?.value).apply(
                                              null,
                                              eventArgs
                                            )
                                          );
                                        }).apply(null, eventArgs);

                                        if (
                                          eventArgs.length > 1 &&
                                          eventArgs[1] &&
                                          eventArgs[1]._plasmic_state_init_
                                        ) {
                                          return;
                                        }
                                      }}
                                      placeholder={
                                        "\u062f\u0631\u0635\u062f \u0645\u0627\u0644\u06cc\u0627\u062a"
                                      }
                                      value={
                                        generateStateValueProp($state, [
                                          "txtInvoiceId",
                                          "value"
                                        ]) ?? ""
                                      }
                                    />
                                  </div>
                                </div>
                              ) : null}
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__sybWd
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__kOmyn
                                  )}
                                >
                                  <Button2
                                    children2={"   \u062b\u0628\u062a   "}
                                    className={classNames(
                                      "__wab_instance",
                                      sty.button__dl1
                                    )}
                                    color={"green"}
                                    onClick={async event => {
                                      const $steps = {};

                                      $steps["errUser"] =
                                        $state.registerinvoiceUserid.length == 0
                                          ? (() => {
                                              const actionArgs = {
                                                args: [
                                                  "error",
                                                  "\u0644\u0637\u0641\u0627 \u067e\u0631\u0648\u062f\u0627\u06a9\u062a \u0645\u0648\u0631\u062f \u0646\u0638\u0631 \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u0646\u0645\u0627\u06cc\u06cc\u062f"
                                                ]
                                              };
                                              return $globalActions[
                                                "Fragment.showToast"
                                              ]?.apply(null, [
                                                ...actionArgs.args
                                              ]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["errUser"] != null &&
                                        typeof $steps["errUser"] === "object" &&
                                        typeof $steps["errUser"].then ===
                                          "function"
                                      ) {
                                        $steps["errUser"] = await $steps[
                                          "errUser"
                                        ];
                                      }

                                      $steps["errorMyProduct"] =
                                        $state.cbProducregisterInvoice.value ==
                                          0 ||
                                        $state.cbProducregisterInvoice.value ==
                                          ""
                                          ? (() => {
                                              const actionArgs = {
                                                args: [
                                                  "error",
                                                  "\u0644\u0637\u0641\u0627 \u067e\u0631\u0648\u062f\u0627\u06a9\u062a \u062e\u0648\u062f \u0631\u0627 \u0627\u0646\u062a\u062e\u0627\u0628 \u0646\u0645\u0627\u06cc\u06cc\u062f"
                                                ]
                                              };
                                              return $globalActions[
                                                "Fragment.showToast"
                                              ]?.apply(null, [
                                                ...actionArgs.args
                                              ]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["errorMyProduct"] != null &&
                                        typeof $steps["errorMyProduct"] ===
                                          "object" &&
                                        typeof $steps["errorMyProduct"].then ===
                                          "function"
                                      ) {
                                        $steps["errorMyProduct"] = await $steps[
                                          "errorMyProduct"
                                        ];
                                      }

                                      $steps["showWaiting"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["waitingInvoice"]
                                              },
                                              operation: 0,
                                              value: true
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["showWaiting"] != null &&
                                        typeof $steps["showWaiting"] ===
                                          "object" &&
                                        typeof $steps["showWaiting"].then ===
                                          "function"
                                      ) {
                                        $steps["showWaiting"] = await $steps[
                                          "showWaiting"
                                        ];
                                      }

                                      $steps["registerInvoiceApi"] =
                                        $state.registerinvoiceUserid.length >
                                          0 &&
                                        $state.cbProducregisterInvoice.value !=
                                          0 &&
                                        $state.cbProducregisterInvoice.value !=
                                          ""
                                          ? (() => {
                                              const actionArgs = {
                                                args: [
                                                  "POST",
                                                  "https://apigw.paziresh24.com/katibe/v1/factors/p24-admin",
                                                  undefined,
                                                  (() => {
                                                    try {
                                                      return {
                                                        userid:
                                                          $state.registerinvoiceUserid,
                                                        title:
                                                          $state
                                                            .txtServiceName[0]
                                                            .value,
                                                        description:
                                                          $state
                                                            .txtRegisterinvoiceDescription
                                                            .value,
                                                        discountpercent:
                                                          parseInt(
                                                            $state
                                                              .txtRegisterInvoiceDiscountPercent
                                                              .value
                                                          ),
                                                        vatpercent: parseInt(
                                                          $state
                                                            .txtRegisterInvoiceVatPercent
                                                            .value
                                                        ),
                                                        services: [
                                                          {
                                                            name: $state
                                                              .txtServiceName[0]
                                                              .value,
                                                            count:
                                                              $state
                                                                .txtServiceCount[0]
                                                                .value,
                                                            price:
                                                              $state
                                                                .txtServicePrice[0]
                                                                .value
                                                          }
                                                        ],
                                                        codename:
                                                          $state
                                                            .cbProducregisterInvoice
                                                            .value
                                                      };
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })()
                                                ]
                                              };
                                              return $globalActions[
                                                "Fragment.apiRequest"
                                              ]?.apply(null, [
                                                ...actionArgs.args
                                              ]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["registerInvoiceApi"] != null &&
                                        typeof $steps["registerInvoiceApi"] ===
                                          "object" &&
                                        typeof $steps["registerInvoiceApi"]
                                          .then === "function"
                                      ) {
                                        $steps["registerInvoiceApi"] =
                                          await $steps["registerInvoiceApi"];
                                      }

                                      $steps["hideWaiting"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["waitingInvoice"]
                                              },
                                              operation: 0,
                                              value: false
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["hideWaiting"] != null &&
                                        typeof $steps["hideWaiting"] ===
                                          "object" &&
                                        typeof $steps["hideWaiting"].then ===
                                          "function"
                                      ) {
                                        $steps["hideWaiting"] = await $steps[
                                          "hideWaiting"
                                        ];
                                      }

                                      $steps["alertSucess"] =
                                        $steps.registerInvoiceApi.status ==
                                          200 &&
                                        $state.registerinvoiceUserid.length > 0
                                          ? (() => {
                                              const actionArgs = {
                                                args: [
                                                  undefined,
                                                  "\u0635\u0648\u0631\u062a \u062d\u0633\u0627\u0628 \u0645\u0648\u0631\u062f \u0646\u0638\u0631 \u062b\u0628\u062a \u06af\u0631\u062f\u06cc\u062f"
                                                ]
                                              };
                                              return $globalActions[
                                                "Fragment.showToast"
                                              ]?.apply(null, [
                                                ...actionArgs.args
                                              ]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["alertSucess"] != null &&
                                        typeof $steps["alertSucess"] ===
                                          "object" &&
                                        typeof $steps["alertSucess"].then ===
                                          "function"
                                      ) {
                                        $steps["alertSucess"] = await $steps[
                                          "alertSucess"
                                        ];
                                      }

                                      $steps["alertError"] =
                                        $steps.registerInvoiceApi.status !=
                                          200 &&
                                        $state.registerinvoiceUserid.length > 0
                                          ? (() => {
                                              const actionArgs = {
                                                args: [
                                                  "error",
                                                  "\u062e\u0637\u0627 \u062f\u0631 \u062b\u0628\u062a \u0635\u0648\u0631\u062a \u062d\u0633\u0627\u0628. \u0644\u0637\u0641\u0627 \u0645\u0642\u0627\u062f\u06cc\u0631 \u0648\u0627\u0631\u062f \u0634\u062f\u0647 \u0631\u0627 \u0628\u0631\u0631\u0633\u06cc \u0646\u0645\u0627\u06cc\u06cc\u062f"
                                                ]
                                              };
                                              return $globalActions[
                                                "Fragment.showToast"
                                              ]?.apply(null, [
                                                ...actionArgs.args
                                              ]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["alertError"] != null &&
                                        typeof $steps["alertError"] ===
                                          "object" &&
                                        typeof $steps["alertError"].then ===
                                          "function"
                                      ) {
                                        $steps["alertError"] = await $steps[
                                          "alertError"
                                        ];
                                      }

                                      $steps["final"] =
                                        $steps.registerInvoiceApi.status == 200
                                          ? (() => {
                                              const actionArgs = {
                                                customFunction: async () => {
                                                  return (() => {
                                                    $state.registerinvoiceUserid =
                                                      "";
                                                    $state.txtUserMobile.value =
                                                      "";
                                                    $state.txtServiceCount[0].value =
                                                      "";
                                                    $state.txtServiceName[0].value =
                                                      "";
                                                    $state.txtServicePrice[0].value =
                                                      "";
                                                    $state.registerinvoiceUserinfo =
                                                      "";
                                                    $state.txtRegisterInvoiceVatPercent.value = 0;
                                                    $state.txtRegisterInvoiceTitle.value =
                                                      "";
                                                    $state.txtRegisterInvoiceDiscountPercent.value = 0;
                                                    $state.txtRegisterinvoiceDescription.value =
                                                      "";
                                                    $state.waitingInvoice =
                                                      false;
                                                    $state.newInvoiceServices =
                                                      [
                                                        {
                                                          name: "",
                                                          count: "",
                                                          price: ""
                                                        }
                                                      ];
                                                    $state.servicesToRegister =
                                                      [];
                                                    $state.waiting = true;
                                                    $state.offset = 0;
                                                    $state.pageNumber = 1;
                                                    return ($state.invoicelist =
                                                      []);
                                                  })();
                                                }
                                              };
                                              return (({ customFunction }) => {
                                                return customFunction();
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["final"] != null &&
                                        typeof $steps["final"] === "object" &&
                                        typeof $steps["final"].then ===
                                          "function"
                                      ) {
                                        $steps["final"] = await $steps["final"];
                                      }

                                      $steps["getInvoiceList"] =
                                        $steps.registerInvoiceApi.status == 200
                                          ? (() => {
                                              const actionArgs = {
                                                args: [
                                                  undefined,
                                                  (() => {
                                                    try {
                                                      return (
                                                        "https://apigw.paziresh24.com/transaction/v1/factors/search/p24-admin?codename=" +
                                                        ($state.cbProductlist
                                                          .value == "0"
                                                          ? ""
                                                          : $state.cbProductlist
                                                              .value) +
                                                        "&limit=" +
                                                        $state.limit +
                                                        "&page=1"
                                                      );
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return undefined;
                                                      }
                                                      throw e;
                                                    }
                                                  })()
                                                ]
                                              };
                                              return $globalActions[
                                                "Fragment.apiRequest"
                                              ]?.apply(null, [
                                                ...actionArgs.args
                                              ]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["getInvoiceList"] != null &&
                                        typeof $steps["getInvoiceList"] ===
                                          "object" &&
                                        typeof $steps["getInvoiceList"].then ===
                                          "function"
                                      ) {
                                        $steps["getInvoiceList"] = await $steps[
                                          "getInvoiceList"
                                        ];
                                      }

                                      $steps["updateInvoicelist"] =
                                        $steps.getInvoiceList.status == 200 &&
                                        $steps.getInvoiceList.data.status ==
                                          true &&
                                        $steps.registerInvoiceApi.status == 200
                                          ? (() => {
                                              const actionArgs = {
                                                customFunction: async () => {
                                                  return ($state.invoicelist =
                                                    $steps.getInvoiceList.data.data);
                                                }
                                              };
                                              return (({ customFunction }) => {
                                                return customFunction();
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["updateInvoicelist"] != null &&
                                        typeof $steps["updateInvoicelist"] ===
                                          "object" &&
                                        typeof $steps["updateInvoicelist"]
                                          .then === "function"
                                      ) {
                                        $steps["updateInvoicelist"] =
                                          await $steps["updateInvoicelist"];
                                      }

                                      $steps["showMoreBtn1"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              customFunction: async () => {
                                                return (() => {
                                                  $state.showMoreBtn = true;
                                                  if (
                                                    $steps.getInvoiceList
                                                      .status != 200 ||
                                                    $steps.getInvoiceList.data
                                                      .data.length !=
                                                      $state.limit
                                                  )
                                                    return ($state.showMoreBtn =
                                                      false);
                                                })();
                                              }
                                            };
                                            return (({ customFunction }) => {
                                              return customFunction();
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["showMoreBtn1"] != null &&
                                        typeof $steps["showMoreBtn1"] ===
                                          "object" &&
                                        typeof $steps["showMoreBtn1"].then ===
                                          "function"
                                      ) {
                                        $steps["showMoreBtn1"] = await $steps[
                                          "showMoreBtn1"
                                        ];
                                      }

                                      $steps["closeModal"] =
                                        $steps.registerInvoiceApi.status == 200
                                          ? (() => {
                                              const actionArgs = {
                                                customFunction: async () => {
                                                  return ($state.dialogRegisterInvoice.open =
                                                    false);
                                                }
                                              };
                                              return (({ customFunction }) => {
                                                return customFunction();
                                              })?.apply(null, [actionArgs]);
                                            })()
                                          : undefined;
                                      if (
                                        $steps["closeModal"] != null &&
                                        typeof $steps["closeModal"] ===
                                          "object" &&
                                        typeof $steps["closeModal"].then ===
                                          "function"
                                      ) {
                                        $steps["closeModal"] = await $steps[
                                          "closeModal"
                                        ];
                                      }

                                      $steps["updateWaiting"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              variable: {
                                                objRoot: $state,
                                                variablePath: ["waiting"]
                                              },
                                              operation: 0,
                                              value: false
                                            };
                                            return (({
                                              variable,
                                              value,
                                              startIndex,
                                              deleteCount
                                            }) => {
                                              if (!variable) {
                                                return;
                                              }
                                              const { objRoot, variablePath } =
                                                variable;

                                              $stateSet(
                                                objRoot,
                                                variablePath,
                                                value
                                              );
                                              return value;
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["updateWaiting"] != null &&
                                        typeof $steps["updateWaiting"] ===
                                          "object" &&
                                        typeof $steps["updateWaiting"].then ===
                                          "function"
                                      ) {
                                        $steps["updateWaiting"] = await $steps[
                                          "updateWaiting"
                                        ];
                                      }
                                    }}
                                  />

                                  <Button2
                                    children2={
                                      "\u0628\u0627\u0632\u06af\u0634\u062a"
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.button__f8D7U
                                    )}
                                    onClick={async event => {
                                      const $steps = {};

                                      $steps["closeDialog"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              customFunction: async () => {
                                                return ($state.dialogRegisterInvoice.open =
                                                  false);
                                              }
                                            };
                                            return (({ customFunction }) => {
                                              return customFunction();
                                            })?.apply(null, [actionArgs]);
                                          })()
                                        : undefined;
                                      if (
                                        $steps["closeDialog"] != null &&
                                        typeof $steps["closeDialog"] ===
                                          "object" &&
                                        typeof $steps["closeDialog"].then ===
                                          "function"
                                      ) {
                                        $steps["closeDialog"] = await $steps[
                                          "closeDialog"
                                        ];
                                      }
                                    }}
                                  />
                                </div>
                              </div>
                              {(() => {
                                try {
                                  return $state.waitingInvoice;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return true;
                                  }
                                  throw e;
                                }
                              })() ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__ySbWl
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__e7W
                                    )}
                                  >
                                    <Icon2Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg___3D8SZ
                                      )}
                                      role={"img"}
                                    />
                                  </div>
                                </div>
                              ) : null}
                            </React.Fragment>
                          }
                          className={classNames(
                            "__wab_instance",
                            sty.dialogRegisterInvoice
                          )}
                          onOpenChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "dialogRegisterInvoice",
                              "open"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          open={generateStateValueProp($state, [
                            "dialogRegisterInvoice",
                            "open"
                          ])}
                          title={
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__e0UzX
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__gu0Y
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__jGFp
                                  )}
                                >
                                  {
                                    "\u062b\u0628\u062a \u0641\u0627\u06a9\u062a\u0648\u0631 "
                                  }
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__s0Hph
                                  )}
                                >
                                  <React.Fragment>
                                    {(() => {
                                      try {
                                        return $state.registerinvoiceUserinfo;
                                      } catch (e) {
                                        if (
                                          e instanceof TypeError ||
                                          e?.plasmicType ===
                                            "PlasmicUndefinedDataError"
                                        ) {
                                          return "...";
                                        }
                                        throw e;
                                      }
                                    })()}
                                  </React.Fragment>
                                </div>
                                {(() => {
                                  try {
                                    return $state.waitingUser;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <Icon2Icon
                                    data-plasmic-name={"waitingIcon5"}
                                    data-plasmic-override={
                                      overrides.waitingIcon5
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.waitingIcon5
                                    )}
                                    role={"img"}
                                  />
                                ) : null}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__fyKvO
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__ucOxr
                                  )}
                                >
                                  {
                                    "\u0627\u0628\u062a\u062f\u0627 \u06a9\u0627\u0631\u0628\u0631 \u06cc\u0627 \u067e\u0631\u0648\u062f\u0627\u06a9\u062a \u0645\u0648\u0631\u062f \u0646\u0638\u0631 \u0631\u0627 \u0645\u0634\u062e\u0635 \u0646\u0645\u0627\u06cc\u06cc\u062f. "
                                  }
                                </div>
                              </div>
                            </div>
                          }
                          trigger={
                            <Button2
                              children2={
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__nixpH
                                  )}
                                >
                                  {hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  ) ? (
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return "  +  ";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return " ";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  ) : (
                                    "\u062b\u0628\u062a \u0641\u0627\u06a9\u062a\u0648\u0631"
                                  )}
                                </div>
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.button__zDibf
                              )}
                              color={"green"}
                              onClick={async event => {
                                const $steps = {};

                                $steps["cleaRAll"] = true
                                  ? (() => {
                                      const actionArgs = {
                                        customFunction: async () => {
                                          return (() => {
                                            $state.registerInvoiceFinal = false;
                                            $state.txtUserMobile.value = "";
                                            $state.txtServiceCount[0].value =
                                              "";
                                            $state.txtServiceName[0].value = "";
                                            $state.txtServicePrice[0].value =
                                              "";
                                            $state.registerinvoiceUserinfo = "";
                                            $state.registerinvoiceUserid = "";
                                            $state.txtRegisterInvoiceVatPercent.value =
                                              "0";
                                            $state.txtRegisterInvoiceTitle.value =
                                              "";
                                            $state.txtRegisterInvoiceDiscountPercent.value =
                                              "0";
                                            $state.txtRegisterinvoiceDescription.value =
                                              "";
                                            $state.waitingInvoice = false;
                                            $state.newInvoiceServices = [
                                              {
                                                name: "",
                                                count: "",
                                                price: ""
                                              }
                                            ];
                                            return ($state.servicesToRegister =
                                              []);
                                          })();
                                        }
                                      };
                                      return (({ customFunction }) => {
                                        return customFunction();
                                      })?.apply(null, [actionArgs]);
                                    })()
                                  : undefined;
                                if (
                                  $steps["cleaRAll"] != null &&
                                  typeof $steps["cleaRAll"] === "object" &&
                                  typeof $steps["cleaRAll"].then === "function"
                                ) {
                                  $steps["cleaRAll"] = await $steps["cleaRAll"];
                                }
                              }}
                              size={
                                hasVariant(
                                  globalVariants,
                                  "screen",
                                  "mobileOnly"
                                )
                                  ? undefined
                                  : "compact"
                              }
                            />
                          }
                        />
                      </div>
                      {(() => {
                        try {
                          return $state.waiting;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__vNrRc
                          )}
                        >
                          {(
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? (() => {
                                  try {
                                    return $state.waiting;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })()
                              : true
                          ) ? (
                            <Icon2Icon
                              data-plasmic-name={"waitingIcon4"}
                              data-plasmic-override={overrides.waitingIcon4}
                              className={classNames(
                                projectcss.all,
                                sty.waitingIcon4
                              )}
                              role={"img"}
                            />
                          ) : null}
                        </div>
                      ) : null}
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"gridInvoice1"}
              data-plasmic-override={overrides.gridInvoice1}
              className={classNames(projectcss.all, sty.gridInvoice1)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__ouM3,
                  "grid_calculator"
                )}
                id={"grid_calculator"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__uiGqY
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "\u0631\u062f\u06cc\u0641"
                    : "\u0631\u062f\u06cc\u0641"}
                </div>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__wTwXr,
                  "grid_calculator"
                )}
                id={"grid_calculator"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___8Uc0H
                  )}
                >
                  {"\u062a\u0627\u0631\u06cc\u062e"}
                </div>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__u7LdY,
                  "grid_calculator"
                )}
                id={"grid_calculator"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__deHlE
                  )}
                >
                  {"\u0639\u0646\u0648\u0627\u0646"}
                </div>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox___5IsZb,
                  "grid_calculator"
                )}
                id={"grid_calculator"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__uQz0Q
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "\u0642\u06cc\u0645\u062a "
                    : "\u0642\u06cc\u0645\u062a (\u0631\u06cc\u0627\u0644)"}
                </div>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox__pt18H,
                  "grid_calculator"
                )}
                id={"grid_calculator"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nE06S
                  )}
                >
                  {"\u0645\u0627\u0646\u062f\u0647"}
                </div>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox___9Bj4F,
                  "grid_calculator"
                )}
                id={"grid_calculator"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__d2UUt
                  )}
                >
                  {"\u062c\u0632\u0626\u06cc\u0627\u062a"}
                </div>
              </div>
            </div>
            {(() => {
              try {
                return (() => {
                  return $state.invoicelist.length == 0 ? true : false;
                })();
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                data-plasmic-name={"gridNoData"}
                data-plasmic-override={overrides.gridNoData}
                className={classNames(projectcss.all, sty.gridNoData)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox___6MvXg,
                    "grid_calculator"
                  )}
                  id={"grid_calculator"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__eQpif
                    )}
                  >
                    {
                      "\u0645\u062d\u062a\u0648\u0627\u06cc\u06cc \u062c\u0647\u062a \u0646\u0645\u0627\u06cc\u0634 \u0648\u062c\u0648\u062f \u0646\u062f\u0627\u0631\u062f."
                    }
                  </div>
                </div>
              </div>
            ) : null}
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $state.invoicelist;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <div
                  data-plasmic-name={"gridInvoice12"}
                  data-plasmic-override={overrides.gridInvoice12}
                  className={classNames(projectcss.all, sty.gridInvoice12)}
                  key={currentIndex}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__h0Ls,
                      "grid_calculator"
                    )}
                    id={"grid_calculator"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rJzBr
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                $state.invoicelist.findIndex(
                                  item =>
                                    item.invoiceid ===
                                    $state.invoicelist[currentIndex].invoiceid
                                ) +
                                1 /*+"\n"+$state.invoicelist[currentIndex].invoiceid*/
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      ) : (
                        <React.Fragment>
                          {(() => {
                            try {
                              return (
                                $state.invoicelist.findIndex(
                                  item =>
                                    item.factorid ===
                                    $state.invoicelist[currentIndex].factorid
                                ) + 1
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      )}
                    </div>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__dtv0I,
                      "grid_calculator"
                    )}
                    id={"grid_calculator"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nN9RS
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (() => {
                              const gregorianDate = new Date(
                                $state.invoicelist[currentIndex].registerdate
                              );
                              const persianDate = new Intl.DateTimeFormat(
                                "fa-IR"
                              ).format(gregorianDate);
                              return persianDate;
                            })();
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox___1Ej7T,
                      "grid_calculator"
                    )}
                    id={"grid_calculator"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cvRXd
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.invoicelist[currentIndex].title;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__bQjO,
                      "grid_calculator"
                    )}
                    id={"grid_calculator"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___8LKhl
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return new Intl.NumberFormat("fa-IR").format(
                              $state.invoicelist[currentIndex].finalprice
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    {(() => {
                      try {
                        return (
                          $state.invoicelist[currentIndex].type == "deposit"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <Icon29Icon
                        className={classNames(projectcss.all, sty.svg__yAkO)}
                        role={"img"}
                      />
                    ) : null}
                    {(() => {
                      try {
                        return (
                          $state.invoicelist[currentIndex].type == "withdraw"
                        );
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <Icon30Icon
                        className={classNames(projectcss.all, sty.svg__sJKnb)}
                        role={"img"}
                      />
                    ) : null}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__oh4Xc,
                      "grid_calculator"
                    )}
                    id={"grid_calculator"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cnOYp
                      )}
                      direction={``}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $state.invoicelist[currentIndex].balance;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__v5Tt4,
                      "grid_calculator"
                    )}
                    id={"grid_calculator"}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : (() => {
                            try {
                              return (
                                $state.invoicelist[currentIndex].factorid > 0
                              );
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return true;
                              }
                              throw e;
                            }
                          })()
                    )
                      ? (() => {
                          const child$Props = {
                            body: (
                              <ApiRequest
                                data-plasmic-name={"detailsDataApiRequest"}
                                data-plasmic-override={
                                  overrides.detailsDataApiRequest
                                }
                                className={classNames(
                                  "__wab_instance",
                                  sty.detailsDataApiRequest
                                )}
                                errorDisplay={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__fj2Q1
                                    )}
                                  >
                                    <React.Fragment>
                                      {(() => {
                                        try {
                                          return "خطا در دریافت اطلاعات، لطفا دوباره تلاش نمایید.";
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return "Error fetching data";
                                          }
                                          throw e;
                                        }
                                      })()}
                                    </React.Fragment>
                                  </div>
                                }
                                loadingDisplay={
                                  <Icon2Icon
                                    data-plasmic-name={"waitingIcon3"}
                                    data-plasmic-override={
                                      overrides.waitingIcon3
                                    }
                                    className={classNames(
                                      projectcss.all,
                                      sty.waitingIcon3
                                    )}
                                    role={"img"}
                                  />
                                }
                                method={"GET"}
                                onError={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "detailsDataApiRequest",
                                    __plasmic_idx_0,
                                    "error"
                                  ]).apply(null, eventArgs);
                                }}
                                onLoading={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "detailsDataApiRequest",
                                    __plasmic_idx_0,
                                    "loading"
                                  ]).apply(null, eventArgs);
                                }}
                                onSuccess={async (...eventArgs: any) => {
                                  generateStateOnChangeProp($state, [
                                    "detailsDataApiRequest",
                                    __plasmic_idx_0,
                                    "data"
                                  ]).apply(null, eventArgs);
                                }}
                                url={(() => {
                                  try {
                                    return (
                                      "https://apigw.paziresh24.com/katibe/v1/factors/p24-admin/" +
                                      $state.invoicelist[currentIndex].factorid
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__kbVZy
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__iQj9H
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___2YpMc
                                      )}
                                    >
                                      {"\u0639\u0646\u0648\u0627\u0646:"}
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__rGyb
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__ibknp
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return $state.detailsDataApiRequest[
                                              currentIndex
                                            ].data.data.title;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__qUrxf
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__e1MbJ
                                      )}
                                    >
                                      {hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      ) ? (
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return (
                                                "صادر شده توسط " +
                                                $state.detailsDataApiRequest[
                                                  currentIndex
                                                ].data.data.productname
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      ) : (
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return (
                                                "صادر شده توسط " +
                                                $state.detailsDataApiRequest[
                                                  currentIndex
                                                ].data.data.productname
                                              );
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      )}
                                    </div>
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___4W7Tn
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__koPra
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__kHayS
                                      )}
                                    >
                                      {hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      )
                                        ? "\u062a\u0648\u0636\u06cc\u062d\u0627\u062a:"
                                        : "\u062a\u0648\u0636\u06cc\u062d\u0627\u062a:"}
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__htNxj
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__uePsd
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return $state.detailsDataApiRequest[
                                              currentIndex
                                            ].data.data.description;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox___29R3K
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__fT3V
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__ofQsQ
                                      )}
                                    >
                                      {hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      ) ? (
                                        "\u06a9\u062f:"
                                      ) : (
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return "کد: ";
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "\u06a9\u062f:";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      )}
                                    </div>
                                  </div>
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox___3Yz1Y
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___8WX78
                                      )}
                                    >
                                      {hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      ) ? (
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return $state
                                                .detailsDataApiRequest[
                                                currentIndex
                                              ].data.data.invoiceid;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      ) : (
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return $state
                                                .detailsDataApiRequest[
                                                currentIndex
                                              ].data.data.factorid;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      )}
                                    </div>
                                  </Stack__>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__jeTpf
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__yfXb
                                      )}
                                    >
                                      {"\u0632\u0645\u0627\u0646:"}
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__nkyHb
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__x8Vno
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return (
                                              $state.detailsDataApiRequest[
                                                currentIndex
                                              ].data.data.registertime +
                                              " " +
                                              (() => {
                                                const gregorianDate = new Date(
                                                  $state.detailsDataApiRequest[
                                                    currentIndex
                                                  ].data.data.registerdate
                                                );
                                                const persianDate =
                                                  new Intl.DateTimeFormat(
                                                    "fa-IR"
                                                  ).format(gregorianDate);
                                                return persianDate;
                                              })()
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__vajZ0
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox___321Hg
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__coLp8
                                      )}
                                    >
                                      {hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      ) ? (
                                        "\u06a9\u062f:"
                                      ) : (
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return "کد کاربر:";
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "\u06a9\u062f:";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      )}
                                    </div>
                                  </div>
                                  <Stack__
                                    as={"div"}
                                    hasGap={true}
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__uz1X
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__pB0Es
                                      )}
                                    >
                                      {hasVariant(
                                        globalVariants,
                                        "screen",
                                        "mobileOnly"
                                      ) ? (
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return $state
                                                .detailsDataApiRequest[
                                                currentIndex
                                              ].data.data.invoiceid;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      ) : (
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return $state
                                                .detailsDataApiRequest[
                                                currentIndex
                                              ].data.data.userid;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      )}
                                    </div>
                                  </Stack__>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__bAhjQ
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__a89Uw
                                      )}
                                    >
                                      {"\u06a9\u0627\u0631\u0628\u0631:"}
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__jWnaw
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__o0VQa
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return $state.invoicelist[
                                              currentIndex
                                            ].userinfo;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </div>
                                </div>
                                {(
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? true
                                    : false
                                ) ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__z15Pf
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox___1XNel
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__qUh9Y
                                        )}
                                      >
                                        {hasVariant(
                                          globalVariants,
                                          "screen",
                                          "mobileOnly"
                                        ) ? (
                                          "\u06a9\u062f \u06a9\u0627\u0631\u0628\u0631:"
                                        ) : (
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return (
                                                  "کد: " +
                                                  $state.detailsDataApiRequest[
                                                    currentIndex
                                                  ].data.data.invoiceid
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "\u06a9\u062f:";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        )}
                                      </div>
                                    </div>
                                    <Stack__
                                      as={"div"}
                                      hasGap={true}
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__uTamH
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__uSe43
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return $state
                                                .detailsDataApiRequest[
                                                currentIndex
                                              ].data.data.userid;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </Stack__>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__gdDn4
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__rwI2
                                        )}
                                      >
                                        {hasVariant(
                                          globalVariants,
                                          "screen",
                                          "mobileOnly"
                                        )
                                          ? "\u06a9\u0627\u0631\u0628\u0631:"
                                          : "\u0632\u0645\u0627\u0646:"}
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__mxLj
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__cAv8
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return $state.invoicelist[
                                                currentIndex
                                              ].userinfo;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </div>
                                  </div>
                                ) : null}
                                {(_par =>
                                  !_par
                                    ? []
                                    : Array.isArray(_par)
                                    ? _par
                                    : [_par])(
                                  (() => {
                                    try {
                                      return $state.detailsDataApiRequest[
                                        currentIndex
                                      ].data.data.services;
                                    } catch (e) {
                                      if (
                                        e instanceof TypeError ||
                                        e?.plasmicType ===
                                          "PlasmicUndefinedDataError"
                                      ) {
                                        return [];
                                      }
                                      throw e;
                                    }
                                  })()
                                ).map((__plasmic_item_1, __plasmic_idx_1) => {
                                  const currentItem = __plasmic_item_1;
                                  const currentIndex = __plasmic_idx_1;
                                  return (
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox__beOtg
                                      )}
                                      dir={"rtl"}
                                      key={currentIndex}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__q3QtH
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__kdPP
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return "جزئیات:";
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "\u062c\u0632\u0626\u06cc\u0627\u062a:";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__wJi8Q
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__rjDeQ
                                          )}
                                          dir={"rtl"}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return (() => {
                                                  return currentItem.count > 1
                                                    ? currentItem.service +
                                                        " - " +
                                                        new Intl.NumberFormat(
                                                          "fa-IR"
                                                        ).format(
                                                          currentItem.count
                                                        ) +
                                                        "عدد"
                                                    : currentItem.service;
                                                })();
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                      <Stack__
                                        as={"div"}
                                        hasGap={true}
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__fYid
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__lrifO
                                          )}
                                        >
                                          {"\u0645\u0628\u0644\u063a:"}
                                        </div>
                                      </Stack__>
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          sty.freeBox__tU2Tn
                                        )}
                                      >
                                        <div
                                          className={classNames(
                                            projectcss.all,
                                            projectcss.__wab_text,
                                            sty.text__w743F
                                          )}
                                        >
                                          <React.Fragment>
                                            {(() => {
                                              try {
                                                return (
                                                  new Intl.NumberFormat(
                                                    "fa-IR"
                                                  ).format(
                                                    currentItem.price *
                                                      currentItem.count
                                                  ) +
                                                  " " +
                                                  "ریال"
                                                );
                                              } catch (e) {
                                                if (
                                                  e instanceof TypeError ||
                                                  e?.plasmicType ===
                                                    "PlasmicUndefinedDataError"
                                                ) {
                                                  return "";
                                                }
                                                throw e;
                                              }
                                            })()}
                                          </React.Fragment>
                                        </div>
                                      </div>
                                    </div>
                                  );
                                })}
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__uqde1
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__ksfKe
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__gQaj
                                      )}
                                    >
                                      {"\u062c\u0645\u0639 \u06a9\u0644:"}
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__cjFxx
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__eIqS
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return (
                                              new Intl.NumberFormat(
                                                "fa-IR"
                                              ).format(
                                                $state.detailsDataApiRequest[
                                                  currentIndex
                                                ].data.data.sumprice
                                              ) + " ریال"
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__o9LBi
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__tkrcU
                                      )}
                                    >
                                      {"\u062a\u062e\u0641\u06cc\u0641:"}
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__dj2NQ
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__vBXwl
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return (
                                              new Intl.NumberFormat(
                                                "fa-IR"
                                              ).format(
                                                $state.detailsDataApiRequest[
                                                  currentIndex
                                                ].data.data.discountprice
                                              ) + " ریال"
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </div>
                                </div>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__rQhmZ
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__dyGp5
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___0Oa16
                                      )}
                                    >
                                      {"\u0645\u0627\u0644\u06cc\u0627\u062a:"}
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__jth4Y
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__qeSa
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return (
                                              new Intl.NumberFormat(
                                                "fa-IR"
                                              ).format(
                                                $state.detailsDataApiRequest[
                                                  currentIndex
                                                ].data.data.vatprice
                                              ) + " ریال"
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__qIiVm
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___5Fs61
                                      )}
                                    >
                                      {
                                        "\u0645\u0628\u0644\u063a \u0646\u0647\u0627\u06cc\u06cc:"
                                      }
                                    </div>
                                  </div>
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox___4Oeqg
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text___3PGZt
                                      )}
                                    >
                                      <React.Fragment>
                                        {(() => {
                                          try {
                                            return (
                                              new Intl.NumberFormat(
                                                "fa-IR"
                                              ).format(
                                                $state.detailsDataApiRequest[
                                                  currentIndex
                                                ].data.data.finalprice
                                              ) + " ریال"
                                            );
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return "";
                                            }
                                            throw e;
                                          }
                                        })()}
                                      </React.Fragment>
                                    </div>
                                  </div>
                                </div>
                                {(() => {
                                  try {
                                    return $state.detailsDataApiRequest[
                                      currentIndex
                                    ].data.data !== undefined &&
                                      $state.detailsDataApiRequest[currentIndex]
                                        .data.data.meta !== undefined &&
                                      $state.detailsDataApiRequest[currentIndex]
                                        .data.data.meta.RefNum !== undefined
                                      ? true
                                      : false;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return true;
                                    }
                                    throw e;
                                  }
                                })() ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__lOiI
                                    )}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox___6GtW1
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text__qVvT4
                                        )}
                                      >
                                        {
                                          "\u0634\u0646\u0627\u0633\u0647 \u067e\u0631\u062f\u0627\u062e\u062a:"
                                        }
                                      </div>
                                    </div>
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        sty.freeBox___0TGl3
                                      )}
                                    >
                                      <div
                                        className={classNames(
                                          projectcss.all,
                                          projectcss.__wab_text,
                                          sty.text___9MWuN
                                        )}
                                      >
                                        <React.Fragment>
                                          {(() => {
                                            try {
                                              return $state
                                                .detailsDataApiRequest[
                                                currentIndex
                                              ].data.data.meta.RefNum;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return "";
                                              }
                                              throw e;
                                            }
                                          })()}
                                        </React.Fragment>
                                      </div>
                                    </div>
                                  </div>
                                ) : null}
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__dMbl1
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__h9QN0
                                    )}
                                  >
                                    {(() => {
                                      const child$Props = {
                                        body: (
                                          <div
                                            className={classNames(
                                              projectcss.all,
                                              sty.freeBox__dDsil
                                            )}
                                          >
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__vv53U
                                              )}
                                            >
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__tiinb
                                                )}
                                              >
                                                <React.Fragment>
                                                  {(() => {
                                                    try {
                                                      return (
                                                        "آیا مایل به لغو صورت حساب " +
                                                        $state
                                                          .detailsDataApiRequest[
                                                          currentIndex
                                                        ].data.data.title +
                                                        " می باشید؟"
                                                      );
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "You can insert dialog body content here in this slot.";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                </React.Fragment>
                                              </div>
                                            </div>
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__s05W0
                                              )}
                                            >
                                              {(() => {
                                                const child$Props = {
                                                  className: classNames(
                                                    "__wab_instance",
                                                    sty.txtCancelReason
                                                  ),
                                                  onChange: async (
                                                    ...eventArgs: any
                                                  ) => {
                                                    ((...eventArgs) => {
                                                      generateStateOnChangeProp(
                                                        $state,
                                                        [
                                                          "txtCancelReason",
                                                          __plasmic_idx_0,
                                                          "value"
                                                        ]
                                                      )(
                                                        (e =>
                                                          e.target
                                                            ?.value).apply(
                                                          null,
                                                          eventArgs
                                                        )
                                                      );
                                                    }).apply(null, eventArgs);

                                                    if (
                                                      eventArgs.length > 1 &&
                                                      eventArgs[1] &&
                                                      eventArgs[1]
                                                        ._plasmic_state_init_
                                                    ) {
                                                      return;
                                                    }
                                                  },
                                                  placeholder:
                                                    "\u062f\u0644\u06cc\u0644 \u0644\u063a\u0648 \u0635\u0648\u0631\u062a \u062d\u0633\u0627\u0628",
                                                  value:
                                                    generateStateValueProp(
                                                      $state,
                                                      [
                                                        "txtCancelReason",
                                                        __plasmic_idx_0,
                                                        "value"
                                                      ]
                                                    ) ?? ""
                                                };

                                                initializePlasmicStates(
                                                  $state,
                                                  [
                                                    {
                                                      name: "txtCancelReason[].value",
                                                      initFunc: ({
                                                        $props,
                                                        $state,
                                                        $queries
                                                      }) => ""
                                                    }
                                                  ],
                                                  [__plasmic_idx_0]
                                                );
                                                return (
                                                  <TextInput
                                                    data-plasmic-name={
                                                      "txtCancelReason"
                                                    }
                                                    data-plasmic-override={
                                                      overrides.txtCancelReason
                                                    }
                                                    {...child$Props}
                                                  />
                                                );
                                              })()}
                                            </div>
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__fcDhe
                                              )}
                                            >
                                              <Button2
                                                children2={
                                                  "\u0628\u0627\u0632\u06af\u0634\u062a"
                                                }
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.button__oGve6
                                                )}
                                                onClick={async event => {
                                                  const $steps = {};

                                                  $steps["runCode"] = true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          customFunction:
                                                            async () => {
                                                              return (() => {
                                                                return ($state.dialogCancelInvoice[
                                                                  currentIndex
                                                                ].open = false);
                                                              })();
                                                            }
                                                        };
                                                        return (({
                                                          customFunction
                                                        }) => {
                                                          return customFunction();
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                  if (
                                                    $steps["runCode"] != null &&
                                                    typeof $steps["runCode"] ===
                                                      "object" &&
                                                    typeof $steps["runCode"]
                                                      .then === "function"
                                                  ) {
                                                    $steps["runCode"] =
                                                      await $steps["runCode"];
                                                  }
                                                }}
                                              />

                                              <Button2
                                                children2={
                                                  <div
                                                    className={classNames(
                                                      projectcss.all,
                                                      projectcss.__wab_text,
                                                      sty.text___6Km6
                                                    )}
                                                  >
                                                    {
                                                      "\u0644\u063a\u0648 \u0634\u0648\u062f"
                                                    }
                                                  </div>
                                                }
                                                className={classNames(
                                                  "__wab_instance",
                                                  sty.button__hUi1M
                                                )}
                                                color={"red"}
                                                onClick={async event => {
                                                  const $steps = {};

                                                  $steps["showWaiting"] = true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          variable: {
                                                            objRoot: $state,
                                                            variablePath: [
                                                              "cancelInvoiceWaiting"
                                                            ]
                                                          },
                                                          operation: 0,
                                                          value: true
                                                        };
                                                        return (({
                                                          variable,
                                                          value,
                                                          startIndex,
                                                          deleteCount
                                                        }) => {
                                                          if (!variable) {
                                                            return;
                                                          }
                                                          const {
                                                            objRoot,
                                                            variablePath
                                                          } = variable;

                                                          $stateSet(
                                                            objRoot,
                                                            variablePath,
                                                            value
                                                          );
                                                          return value;
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                  if (
                                                    $steps["showWaiting"] !=
                                                      null &&
                                                    typeof $steps[
                                                      "showWaiting"
                                                    ] === "object" &&
                                                    typeof $steps["showWaiting"]
                                                      .then === "function"
                                                  ) {
                                                    $steps["showWaiting"] =
                                                      await $steps[
                                                        "showWaiting"
                                                      ];
                                                  }

                                                  $steps["cancelInvoice"] = true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          args: [
                                                            "PUT",
                                                            "https://apigw.paziresh24.com/transaction/v1/admininvoice",
                                                            undefined,
                                                            (() => {
                                                              try {
                                                                return {
                                                                  invoiceid:
                                                                    $state
                                                                      .detailsDataApiRequest[
                                                                      currentIndex
                                                                    ].data.data
                                                                      .invoiceid,
                                                                  reason: "",
                                                                  status:
                                                                    "canceled"
                                                                };
                                                              } catch (e) {
                                                                if (
                                                                  e instanceof
                                                                    TypeError ||
                                                                  e?.plasmicType ===
                                                                    "PlasmicUndefinedDataError"
                                                                ) {
                                                                  return undefined;
                                                                }
                                                                throw e;
                                                              }
                                                            })()
                                                          ]
                                                        };
                                                        return $globalActions[
                                                          "Fragment.apiRequest"
                                                        ]?.apply(null, [
                                                          ...actionArgs.args
                                                        ]);
                                                      })()
                                                    : undefined;
                                                  if (
                                                    $steps["cancelInvoice"] !=
                                                      null &&
                                                    typeof $steps[
                                                      "cancelInvoice"
                                                    ] === "object" &&
                                                    typeof $steps[
                                                      "cancelInvoice"
                                                    ].then === "function"
                                                  ) {
                                                    $steps["cancelInvoice"] =
                                                      await $steps[
                                                        "cancelInvoice"
                                                      ];
                                                  }

                                                  $steps["hideWaiting"] = true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          variable: {
                                                            objRoot: $state,
                                                            variablePath: [
                                                              "cancelInvoiceWaiting"
                                                            ]
                                                          },
                                                          operation: 0,
                                                          value: false
                                                        };
                                                        return (({
                                                          variable,
                                                          value,
                                                          startIndex,
                                                          deleteCount
                                                        }) => {
                                                          if (!variable) {
                                                            return;
                                                          }
                                                          const {
                                                            objRoot,
                                                            variablePath
                                                          } = variable;

                                                          $stateSet(
                                                            objRoot,
                                                            variablePath,
                                                            value
                                                          );
                                                          return value;
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                  if (
                                                    $steps["hideWaiting"] !=
                                                      null &&
                                                    typeof $steps[
                                                      "hideWaiting"
                                                    ] === "object" &&
                                                    typeof $steps["hideWaiting"]
                                                      .then === "function"
                                                  ) {
                                                    $steps["hideWaiting"] =
                                                      await $steps[
                                                        "hideWaiting"
                                                      ];
                                                  }

                                                  $steps["modalData"] = true
                                                    ? (() => {
                                                        const actionArgs = {
                                                          customFunction:
                                                            async () => {
                                                              return (() => {
                                                                $state.dialogInvoiceDetails[
                                                                  currentIndex
                                                                ].open = false;
                                                                $state.dialogCancelInvoice[
                                                                  currentIndex
                                                                ].open = false;
                                                                if (
                                                                  $steps
                                                                    .cancelInvoice
                                                                    .status ==
                                                                  200
                                                                ) {
                                                                  return ($state.invoicelist =
                                                                    $state.invoicelist.filter(
                                                                      item =>
                                                                        item.invoiceid !==
                                                                        $state
                                                                          .detailsDataApiRequest[
                                                                          currentIndex
                                                                        ].data
                                                                          .data
                                                                          .invoiceid
                                                                    ));
                                                                }
                                                              })();
                                                            }
                                                        };
                                                        return (({
                                                          customFunction
                                                        }) => {
                                                          return customFunction();
                                                        })?.apply(null, [
                                                          actionArgs
                                                        ]);
                                                      })()
                                                    : undefined;
                                                  if (
                                                    $steps["modalData"] !=
                                                      null &&
                                                    typeof $steps[
                                                      "modalData"
                                                    ] === "object" &&
                                                    typeof $steps["modalData"]
                                                      .then === "function"
                                                  ) {
                                                    $steps["modalData"] =
                                                      await $steps["modalData"];
                                                  }

                                                  $steps["alertOk"] =
                                                    $steps.cancelInvoice
                                                      .status == 200
                                                      ? (() => {
                                                          const actionArgs = {
                                                            args: [
                                                              undefined,
                                                              "\u0635\u0648\u0631\u062a \u062d\u0633\u0627\u0628 \u0645\u0648\u0631\u062f \u0646\u0638\u0631 \u0644\u063a\u0648 \u06af\u0631\u062f\u06cc\u062f"
                                                            ]
                                                          };
                                                          return $globalActions[
                                                            "Fragment.showToast"
                                                          ]?.apply(null, [
                                                            ...actionArgs.args
                                                          ]);
                                                        })()
                                                      : undefined;
                                                  if (
                                                    $steps["alertOk"] != null &&
                                                    typeof $steps["alertOk"] ===
                                                      "object" &&
                                                    typeof $steps["alertOk"]
                                                      .then === "function"
                                                  ) {
                                                    $steps["alertOk"] =
                                                      await $steps["alertOk"];
                                                  }

                                                  $steps["alertError"] =
                                                    $steps.cancelInvoice
                                                      .status != 200
                                                      ? (() => {
                                                          const actionArgs = {
                                                            args: [
                                                              "error",
                                                              "\u062e\u0638\u0627 \u062f\u0631 \u0644\u063a\u0648 \u0635\u0648\u0631\u062a \u062d\u0633\u0627\u0628"
                                                            ]
                                                          };
                                                          return $globalActions[
                                                            "Fragment.showToast"
                                                          ]?.apply(null, [
                                                            ...actionArgs.args
                                                          ]);
                                                        })()
                                                      : undefined;
                                                  if (
                                                    $steps["alertError"] !=
                                                      null &&
                                                    typeof $steps[
                                                      "alertError"
                                                    ] === "object" &&
                                                    typeof $steps["alertError"]
                                                      .then === "function"
                                                  ) {
                                                    $steps["alertError"] =
                                                      await $steps[
                                                        "alertError"
                                                      ];
                                                  }
                                                }}
                                              />
                                            </div>
                                            <div
                                              className={classNames(
                                                projectcss.all,
                                                sty.freeBox__id22
                                              )}
                                            >
                                              {(() => {
                                                try {
                                                  return $state.cancelInvoiceWaiting;
                                                } catch (e) {
                                                  if (
                                                    e instanceof TypeError ||
                                                    e?.plasmicType ===
                                                      "PlasmicUndefinedDataError"
                                                  ) {
                                                    return true;
                                                  }
                                                  throw e;
                                                }
                                              })() ? (
                                                <Icon2Icon
                                                  className={classNames(
                                                    projectcss.all,
                                                    sty.svg___00Vgp
                                                  )}
                                                  role={"img"}
                                                />
                                              ) : null}
                                            </div>
                                          </div>
                                        ),
                                        className: classNames(
                                          "__wab_instance",
                                          sty.dialogCancelInvoice
                                        ),
                                        onOpenChange: async (
                                          ...eventArgs: any
                                        ) => {
                                          generateStateOnChangeProp($state, [
                                            "dialogCancelInvoice",
                                            __plasmic_idx_0,
                                            "open"
                                          ]).apply(null, eventArgs);

                                          if (
                                            eventArgs.length > 1 &&
                                            eventArgs[1] &&
                                            eventArgs[1]._plasmic_state_init_
                                          ) {
                                            return;
                                          }
                                        },
                                        open: generateStateValueProp($state, [
                                          "dialogCancelInvoice",
                                          __plasmic_idx_0,
                                          "open"
                                        ]),
                                        title:
                                          "\u0644\u063a\u0648 \u0635\u0648\u0631\u062a \u062d\u0633\u0627\u0628:",
                                        trigger: (
                                          <Button2
                                            children2={
                                              <div
                                                className={classNames(
                                                  projectcss.all,
                                                  projectcss.__wab_text,
                                                  sty.text__mwHwc
                                                )}
                                              >
                                                <React.Fragment>
                                                  {(() => {
                                                    try {
                                                      return "لغو صورت حساب";
                                                    } catch (e) {
                                                      if (
                                                        e instanceof
                                                          TypeError ||
                                                        e?.plasmicType ===
                                                          "PlasmicUndefinedDataError"
                                                      ) {
                                                        return "\u0644\u063a\u0648 ";
                                                      }
                                                      throw e;
                                                    }
                                                  })()}
                                                </React.Fragment>
                                              </div>
                                            }
                                            color={"blue"}
                                            endIcon={
                                              <ChevronLeftIcon
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.svg___5Mxi
                                                )}
                                                role={"img"}
                                              />
                                            }
                                            size={"compact"}
                                            startIcon={
                                              <ChevronRightIcon
                                                className={classNames(
                                                  projectcss.all,
                                                  sty.svg__howIx
                                                )}
                                                role={"img"}
                                              />
                                            }
                                          />
                                        )
                                      };

                                      initializePlasmicStates(
                                        $state,
                                        [
                                          {
                                            name: "dialogCancelInvoice[].open",
                                            initFunc: ({
                                              $props,
                                              $state,
                                              $queries
                                            }) => false
                                          }
                                        ],
                                        [__plasmic_idx_0]
                                      );
                                      return (
                                        <Dialog
                                          data-plasmic-name={
                                            "dialogCancelInvoice"
                                          }
                                          data-plasmic-override={
                                            overrides.dialogCancelInvoice
                                          }
                                          {...child$Props}
                                        />
                                      );
                                    })()}
                                  </div>
                                </div>
                              </ApiRequest>
                            ),
                            className: classNames(
                              "__wab_instance",
                              sty.dialogInvoiceDetails
                            ),
                            onOpenChange: async (...eventArgs: any) => {
                              generateStateOnChangeProp($state, [
                                "dialogInvoiceDetails",
                                __plasmic_idx_0,
                                "open"
                              ]).apply(null, eventArgs);

                              if (
                                eventArgs.length > 1 &&
                                eventArgs[1] &&
                                eventArgs[1]._plasmic_state_init_
                              ) {
                                return;
                              }
                            },
                            open: generateStateValueProp($state, [
                              "dialogInvoiceDetails",
                              __plasmic_idx_0,
                              "open"
                            ]),
                            title: (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__j3Geg
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__mEzG7,
                                    ``
                                  )}
                                  dir={"rtl"}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__ccP8D
                                    )}
                                  >
                                    {
                                      "\u062c\u0632\u0626\u06cc\u0627\u062a \u0641\u0627\u06a9\u062a\u0648\u0631"
                                    }
                                  </div>
                                </div>
                              </div>
                            ),
                            trigger: (
                              <Button
                                data-plasmic-name={"btnInvoiceInfo"}
                                data-plasmic-override={overrides.btnInvoiceInfo}
                                children2={
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__eufZz
                                    )}
                                  >
                                    {hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? "..."
                                      : "\u062c\u0632\u0626\u06cc\u0627\u062a"}
                                  </div>
                                }
                                className={classNames(
                                  "__wab_instance",
                                  sty.btnInvoiceInfo
                                )}
                                color={"green"}
                              />
                            )
                          };

                          initializePlasmicStates(
                            $state,
                            [
                              {
                                name: "dialogInvoiceDetails[].open",
                                initFunc: ({ $props, $state, $queries }) =>
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? false
                                    : false
                              }
                            ],
                            [__plasmic_idx_0]
                          );
                          return (
                            <Dialog2
                              data-plasmic-name={"dialogInvoiceDetails"}
                              data-plasmic-override={
                                overrides.dialogInvoiceDetails
                              }
                              {...child$Props}
                            />
                          );
                        })()
                      : null}
                  </div>
                </div>
              );
            })}
            <div className={classNames(projectcss.all, sty.freeBox__xvA9A)}>
              <div className={classNames(projectcss.all, sty.freeBox__lGdRe)}>
                {(() => {
                  try {
                    return (
                      !$state.waiting &&
                      $state.invoicelist.length > 0 &&
                      !$state.waitingLoading &&
                      $state.showMoreBtn
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Button2
                    children2={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___2CdV
                        )}
                      >
                        {
                          "\u0646\u0645\u0627\u06cc\u0634 \u0628\u06cc\u0634\u062a\u0631..."
                        }
                      </div>
                    }
                    className={classNames("__wab_instance", sty.button__xfWxj)}
                    color={"softBlue"}
                    onClick={async event => {
                      const $steps = {};

                      $steps["updateWaitingLoading"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["waitingLoading"]
                              },
                              operation: 0,
                              value: true
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateWaitingLoading"] != null &&
                        typeof $steps["updateWaitingLoading"] === "object" &&
                        typeof $steps["updateWaitingLoading"].then ===
                          "function"
                      ) {
                        $steps["updateWaitingLoading"] = await $steps[
                          "updateWaitingLoading"
                        ];
                      }

                      $steps["runCode"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return ($state.pageNumber += 1);
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["runCode"] != null &&
                        typeof $steps["runCode"] === "object" &&
                        typeof $steps["runCode"].then === "function"
                      ) {
                        $steps["runCode"] = await $steps["runCode"];
                      }

                      $steps["getInvoiceList"] = true
                        ? (() => {
                            const actionArgs = {
                              args: [
                                undefined,
                                (() => {
                                  try {
                                    return (
                                      "https://apigw.paziresh24.com/katibe/v1/factors/search/p24-admin?codename=" +
                                      ($state.cbProductlist.value == "0"
                                        ? ""
                                        : $state.cbProductlist.value) +
                                      "&limit=" +
                                      $state.limit +
                                      "&page=" +
                                      $state.pageNumber
                                    );
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              ]
                            };
                            return $globalActions["Fragment.apiRequest"]?.apply(
                              null,
                              [...actionArgs.args]
                            );
                          })()
                        : undefined;
                      if (
                        $steps["getInvoiceList"] != null &&
                        typeof $steps["getInvoiceList"] === "object" &&
                        typeof $steps["getInvoiceList"].then === "function"
                      ) {
                        $steps["getInvoiceList"] = await $steps[
                          "getInvoiceList"
                        ];
                      }

                      $steps["updateInvoicesList"] =
                        $steps.getInvoiceList.status == 200 &&
                        $steps.getInvoiceList.data.status == true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return $state.invoicelist.push(
                                    ...$steps.getInvoiceList.data.data
                                  );
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                      if (
                        $steps["updateInvoicesList"] != null &&
                        typeof $steps["updateInvoicesList"] === "object" &&
                        typeof $steps["updateInvoicesList"].then === "function"
                      ) {
                        $steps["updateInvoicesList"] = await $steps[
                          "updateInvoicesList"
                        ];
                      }

                      $steps["updateWaitingLoading2"] = true
                        ? (() => {
                            const actionArgs = {
                              variable: {
                                objRoot: $state,
                                variablePath: ["waitingLoading"]
                              },
                              operation: 0,
                              value: false
                            };
                            return (({
                              variable,
                              value,
                              startIndex,
                              deleteCount
                            }) => {
                              if (!variable) {
                                return;
                              }
                              const { objRoot, variablePath } = variable;

                              $stateSet(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["updateWaitingLoading2"] != null &&
                        typeof $steps["updateWaitingLoading2"] === "object" &&
                        typeof $steps["updateWaitingLoading2"].then ===
                          "function"
                      ) {
                        $steps["updateWaitingLoading2"] = await $steps[
                          "updateWaitingLoading2"
                        ];
                      }

                      $steps["showMoreBtn"] = true
                        ? (() => {
                            const actionArgs = {
                              customFunction: async () => {
                                return (() => {
                                  $state.showMoreBtn = true;
                                  if (
                                    $steps.getInvoiceList.status != 200 ||
                                    $steps.getInvoiceList.data.data.length !=
                                      $state.limit
                                  )
                                    return ($state.showMoreBtn = false);
                                })();
                              }
                            };
                            return (({ customFunction }) => {
                              return customFunction();
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["showMoreBtn"] != null &&
                        typeof $steps["showMoreBtn"] === "object" &&
                        typeof $steps["showMoreBtn"].then === "function"
                      ) {
                        $steps["showMoreBtn"] = await $steps["showMoreBtn"];
                      }
                    }}
                    size={"compact"}
                  />
                ) : null}
                {(() => {
                  try {
                    return $state.waitingLoading;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <Icon2Icon
                    data-plasmic-name={"waitingIcon6"}
                    data-plasmic-override={overrides.waitingIcon6}
                    className={classNames(projectcss.all, sty.waitingIcon6)}
                    role={"img"}
                  />
                ) : null}
              </div>
            </div>
          </section>
          <SideEffect
            data-plasmic-name={"sideEffectPageLoad"}
            data-plasmic-override={overrides.sideEffectPageLoad}
            className={classNames("__wab_instance", sty.sideEffectPageLoad)}
            deps={(() => {
              try {
                return [$ctx.query.productid];
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            onMount={async () => {
              const $steps = {};

              $steps["showWaiting"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["waiting"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["showWaiting"] != null &&
                typeof $steps["showWaiting"] === "object" &&
                typeof $steps["showWaiting"].then === "function"
              ) {
                $steps["showWaiting"] = await $steps["showWaiting"];
              }

              $steps["getProductList"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        (() => {
                          try {
                            return "https://apigw.paziresh24.com/transaction/v1/adminproductlist";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["getProductList"] != null &&
                typeof $steps["getProductList"] === "object" &&
                typeof $steps["getProductList"].then === "function"
              ) {
                $steps["getProductList"] = await $steps["getProductList"];
              }

              $steps["setProductListVariable"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          $steps.getProductList.status == 200 &&
                          $steps.getProductList.data.status == true
                            ? ($state.productList = [
                                {
                                  productid: 0,
                                  name: "همه",
                                  codename: ""
                                },
                                ...$steps.getProductList.data.data
                              ])
                            : ($state.productList = []);
                          return ($state.cbProductlist.value = 0);
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["setProductListVariable"] != null &&
                typeof $steps["setProductListVariable"] === "object" &&
                typeof $steps["setProductListVariable"].then === "function"
              ) {
                $steps["setProductListVariable"] = await $steps[
                  "setProductListVariable"
                ];
              }

              $steps["urlproductid"] = false
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          if ($ctx.query.productid > 0) {
                            return ($state.cbProductlist.value =
                              $ctx.query.productid);
                          }
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["urlproductid"] != null &&
                typeof $steps["urlproductid"] === "object" &&
                typeof $steps["urlproductid"].then === "function"
              ) {
                $steps["urlproductid"] = await $steps["urlproductid"];
              }

              $steps["selectFirstProduct"] = false
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          return ($state.cbProductlist.value =
                            $state.productList.find(
                              item => item.productid > 0
                            ).productid);
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["selectFirstProduct"] != null &&
                typeof $steps["selectFirstProduct"] === "object" &&
                typeof $steps["selectFirstProduct"].then === "function"
              ) {
                $steps["selectFirstProduct"] = await $steps[
                  "selectFirstProduct"
                ];
              }

              $steps["getInvoiceList"] = true
                ? (() => {
                    const actionArgs = {
                      args: [
                        undefined,
                        (() => {
                          try {
                            return (
                              "https://apigw.paziresh24.com/katibe/v1/factors/search/p24-admin?page" +
                              $state.pageNumber +
                              "&limit=" +
                              $state.limit
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()
                      ]
                    };
                    return $globalActions["Fragment.apiRequest"]?.apply(null, [
                      ...actionArgs.args
                    ]);
                  })()
                : undefined;
              if (
                $steps["getInvoiceList"] != null &&
                typeof $steps["getInvoiceList"] === "object" &&
                typeof $steps["getInvoiceList"].then === "function"
              ) {
                $steps["getInvoiceList"] = await $steps["getInvoiceList"];
              }

              $steps["hideWaiting"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["waiting"]
                      },
                      operation: 0,
                      value: false
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;

                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["hideWaiting"] != null &&
                typeof $steps["hideWaiting"] === "object" &&
                typeof $steps["hideWaiting"].then === "function"
              ) {
                $steps["hideWaiting"] = await $steps["hideWaiting"];
              }

              $steps["updateInvoicelist"] =
                $steps.getInvoiceList.status == 200 &&
                $steps.getInvoiceList.data.status == true
                  ? (() => {
                      const actionArgs = {
                        variable: {
                          objRoot: $state,
                          variablePath: ["invoicelist"]
                        },
                        operation: 0,
                        value: $steps.getInvoiceList.data.data
                      };
                      return (({
                        variable,
                        value,
                        startIndex,
                        deleteCount
                      }) => {
                        if (!variable) {
                          return;
                        }
                        const { objRoot, variablePath } = variable;

                        $stateSet(objRoot, variablePath, value);
                        return value;
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
              if (
                $steps["updateInvoicelist"] != null &&
                typeof $steps["updateInvoicelist"] === "object" &&
                typeof $steps["updateInvoicelist"].then === "function"
              ) {
                $steps["updateInvoicelist"] = await $steps["updateInvoicelist"];
              }

              $steps["showMoreBtn"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return (() => {
                          if (
                            $steps.getInvoiceList.status != 200 ||
                            $steps.getInvoiceList.data.data.length !=
                              $state.limit
                          )
                            return ($state.showMoreBtn = false);
                        })();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["showMoreBtn"] != null &&
                typeof $steps["showMoreBtn"] === "object" &&
                typeof $steps["showMoreBtn"].then === "function"
              ) {
                $steps["showMoreBtn"] = await $steps["showMoreBtn"];
              }
            }}
          />

          <div className={classNames(projectcss.all, sty.freeBox__zLrYr)}>
            <div className={classNames(projectcss.all, sty.freeBox__pvi8Y)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yrB4Y
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                  <React.Fragment>
                    <React.Fragment>
                      {
                        "\u0647\u0645\u06a9\u0627\u0631 \u06af\u0631\u0627\u0645\u06cc\u060c \u0644\u0637\u0641\u0627 \u0646\u0638\u0631\u0627\u062a \u0648 \u067e\u06cc\u0634\u0646\u0647\u0627\u062f\u0627\u062a \u062e\u0648\u062f \u0631\u0627 \u062c\u0647\u062a \u0628\u0647\u0628\u0648\u062f \u0627\u06cc\u0646 \u0635\u0641\u062d\u0647\u060c \u0628\u0647 \u0622\u06cc\u200c\u062f\u06cc "
                      }
                    </React.Fragment>
                    {
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.link__fwOm
                        )}
                        component={Link}
                        href={"https://t.me/hojatkhajavi"}
                        platform={"nextjs"}
                      >
                        {"@hojatkhajavi"}
                      </PlasmicLink__>
                    }
                    <React.Fragment>
                      {
                        " \u062f\u0631 \u062a\u0644\u06af\u0631\u0627\u0645 \u0627\u0631\u0633\u0627\u0644 \u0646\u0645\u0627\u06cc\u06cc\u062f."
                      }
                    </React.Fragment>
                  </React.Fragment>
                ) : (
                  <React.Fragment>
                    <React.Fragment>
                      {
                        "\u0647\u0645\u06a9\u0627\u0631 \u06af\u0631\u0627\u0645\u06cc\u060c \u0644\u0637\u0641\u0627 \u0646\u0638\u0631\u0627\u062a \u0648 \u067e\u06cc\u0634\u0646\u0647\u0627\u062f\u0627\u062a \u062e\u0648\u062f \u0631\u0627 \u062c\u0647\u062a \u0628\u0647\u0628\u0648\u062f \u0627\u06cc\u0646 \u0635\u0641\u062d\u0647\u060c \u0628\u0647 \u0622\u06cc\u200c\u062f\u06cc "
                      }
                    </React.Fragment>
                    {
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.link__mdh75
                        )}
                        component={Link}
                        href={"https://t.me/hojatkhajavi"}
                        platform={"nextjs"}
                      >
                        {"@hojatkhajavi"}
                      </PlasmicLink__>
                    }
                    <React.Fragment>
                      {
                        " \u062f\u0631 \u062a\u0644\u06af\u0631\u0627\u0645 \u0627\u0631\u0633\u0627\u0644 \u0646\u0645\u0627\u06cc\u06cc\u062f."
                      }
                    </React.Fragment>
                  </React.Fragment>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "h1",
    "btnDashboard3",
    "lblUser",
    "btnLogout",
    "btnLogin",
    "section",
    "gridCalculator2",
    "cbProductlist",
    "txtSearch",
    "btnSearch",
    "dialogRegisterInvoice",
    "waitingIcon5",
    "txtUserMobile",
    "dialogSelectProduct",
    "txtProductFilter",
    "txtRegisterInvoiceTitle",
    "cbProducregisterInvoice",
    "txtServiceName",
    "txtServiceCount",
    "txtServicePrice",
    "txtRegisterinvoiceDescription",
    "txtRegisterInvoiceDiscountPercent",
    "txtRegisterInvoiceVatPercent",
    "txtFinalPrice",
    "txtInvoiceId",
    "waitingIcon4",
    "gridInvoice1",
    "gridNoData",
    "gridInvoice12",
    "dialogInvoiceDetails",
    "btnInvoiceInfo",
    "detailsDataApiRequest",
    "waitingIcon3",
    "dialogCancelInvoice",
    "txtCancelReason",
    "waitingIcon6",
    "sideEffectPageLoad"
  ],
  h1: ["h1"],
  btnDashboard3: ["btnDashboard3"],
  lblUser: ["lblUser"],
  btnLogout: ["btnLogout"],
  btnLogin: ["btnLogin"],
  section: [
    "section",
    "gridCalculator2",
    "cbProductlist",
    "txtSearch",
    "btnSearch",
    "dialogRegisterInvoice",
    "waitingIcon5",
    "txtUserMobile",
    "dialogSelectProduct",
    "txtProductFilter",
    "txtRegisterInvoiceTitle",
    "cbProducregisterInvoice",
    "txtServiceName",
    "txtServiceCount",
    "txtServicePrice",
    "txtRegisterinvoiceDescription",
    "txtRegisterInvoiceDiscountPercent",
    "txtRegisterInvoiceVatPercent",
    "txtFinalPrice",
    "txtInvoiceId",
    "waitingIcon4",
    "gridInvoice1",
    "gridNoData",
    "gridInvoice12",
    "dialogInvoiceDetails",
    "btnInvoiceInfo",
    "detailsDataApiRequest",
    "waitingIcon3",
    "dialogCancelInvoice",
    "txtCancelReason",
    "waitingIcon6"
  ],
  gridCalculator2: [
    "gridCalculator2",
    "cbProductlist",
    "txtSearch",
    "btnSearch",
    "dialogRegisterInvoice",
    "waitingIcon5",
    "txtUserMobile",
    "dialogSelectProduct",
    "txtProductFilter",
    "txtRegisterInvoiceTitle",
    "cbProducregisterInvoice",
    "txtServiceName",
    "txtServiceCount",
    "txtServicePrice",
    "txtRegisterinvoiceDescription",
    "txtRegisterInvoiceDiscountPercent",
    "txtRegisterInvoiceVatPercent",
    "txtFinalPrice",
    "txtInvoiceId",
    "waitingIcon4"
  ],
  cbProductlist: ["cbProductlist"],
  txtSearch: ["txtSearch"],
  btnSearch: ["btnSearch"],
  dialogRegisterInvoice: [
    "dialogRegisterInvoice",
    "waitingIcon5",
    "txtUserMobile",
    "dialogSelectProduct",
    "txtProductFilter",
    "txtRegisterInvoiceTitle",
    "cbProducregisterInvoice",
    "txtServiceName",
    "txtServiceCount",
    "txtServicePrice",
    "txtRegisterinvoiceDescription",
    "txtRegisterInvoiceDiscountPercent",
    "txtRegisterInvoiceVatPercent",
    "txtFinalPrice",
    "txtInvoiceId"
  ],
  waitingIcon5: ["waitingIcon5"],
  txtUserMobile: ["txtUserMobile"],
  dialogSelectProduct: ["dialogSelectProduct", "txtProductFilter"],
  txtProductFilter: ["txtProductFilter"],
  txtRegisterInvoiceTitle: ["txtRegisterInvoiceTitle"],
  cbProducregisterInvoice: ["cbProducregisterInvoice"],
  txtServiceName: ["txtServiceName"],
  txtServiceCount: ["txtServiceCount"],
  txtServicePrice: ["txtServicePrice"],
  txtRegisterinvoiceDescription: ["txtRegisterinvoiceDescription"],
  txtRegisterInvoiceDiscountPercent: ["txtRegisterInvoiceDiscountPercent"],
  txtRegisterInvoiceVatPercent: ["txtRegisterInvoiceVatPercent"],
  txtFinalPrice: ["txtFinalPrice"],
  txtInvoiceId: ["txtInvoiceId"],
  waitingIcon4: ["waitingIcon4"],
  gridInvoice1: ["gridInvoice1"],
  gridNoData: ["gridNoData"],
  gridInvoice12: [
    "gridInvoice12",
    "dialogInvoiceDetails",
    "btnInvoiceInfo",
    "detailsDataApiRequest",
    "waitingIcon3",
    "dialogCancelInvoice",
    "txtCancelReason"
  ],
  dialogInvoiceDetails: [
    "dialogInvoiceDetails",
    "btnInvoiceInfo",
    "detailsDataApiRequest",
    "waitingIcon3",
    "dialogCancelInvoice",
    "txtCancelReason"
  ],
  btnInvoiceInfo: ["btnInvoiceInfo"],
  detailsDataApiRequest: [
    "detailsDataApiRequest",
    "waitingIcon3",
    "dialogCancelInvoice",
    "txtCancelReason"
  ],
  waitingIcon3: ["waitingIcon3"],
  dialogCancelInvoice: ["dialogCancelInvoice", "txtCancelReason"],
  txtCancelReason: ["txtCancelReason"],
  waitingIcon6: ["waitingIcon6"],
  sideEffectPageLoad: ["sideEffectPageLoad"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h1: "h1";
  btnDashboard3: "div";
  lblUser: "div";
  btnLogout: "a";
  btnLogin: typeof Button;
  section: "section";
  gridCalculator2: "div";
  cbProductlist: typeof Select;
  txtSearch: typeof TextInput;
  btnSearch: typeof Button;
  dialogRegisterInvoice: typeof Dialog;
  waitingIcon5: "svg";
  txtUserMobile: typeof TextInput;
  dialogSelectProduct: typeof Dialog;
  txtProductFilter: typeof TextInput;
  txtRegisterInvoiceTitle: typeof TextInput;
  cbProducregisterInvoice: typeof Select;
  txtServiceName: typeof TextInput;
  txtServiceCount: typeof TextInput;
  txtServicePrice: typeof TextInput;
  txtRegisterinvoiceDescription: typeof TextInput;
  txtRegisterInvoiceDiscountPercent: typeof TextInput;
  txtRegisterInvoiceVatPercent: typeof TextInput;
  txtFinalPrice: typeof TextInput;
  txtInvoiceId: typeof TextInput;
  waitingIcon4: "svg";
  gridInvoice1: "div";
  gridNoData: "div";
  gridInvoice12: "div";
  dialogInvoiceDetails: typeof Dialog2;
  btnInvoiceInfo: typeof Button;
  detailsDataApiRequest: typeof ApiRequest;
  waitingIcon3: "svg";
  dialogCancelInvoice: typeof Dialog;
  txtCancelReason: typeof TextInput;
  waitingIcon6: "svg";
  sideEffectPageLoad: typeof SideEffect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProductAdmin__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProductAdmin__VariantsArgs;
    args?: PlasmicProductAdmin__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProductAdmin__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicProductAdmin__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProductAdmin__ArgProps,
          internalVariantPropNames: PlasmicProductAdmin__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProductAdmin__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductAdmin";
  } else {
    func.displayName = `PlasmicProductAdmin.${nodeName}`;
  }
  return func;
}

export const PlasmicProductAdmin = Object.assign(
  // Top-level PlasmicProductAdmin renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    btnDashboard3: makeNodeComponent("btnDashboard3"),
    lblUser: makeNodeComponent("lblUser"),
    btnLogout: makeNodeComponent("btnLogout"),
    btnLogin: makeNodeComponent("btnLogin"),
    section: makeNodeComponent("section"),
    gridCalculator2: makeNodeComponent("gridCalculator2"),
    cbProductlist: makeNodeComponent("cbProductlist"),
    txtSearch: makeNodeComponent("txtSearch"),
    btnSearch: makeNodeComponent("btnSearch"),
    dialogRegisterInvoice: makeNodeComponent("dialogRegisterInvoice"),
    waitingIcon5: makeNodeComponent("waitingIcon5"),
    txtUserMobile: makeNodeComponent("txtUserMobile"),
    dialogSelectProduct: makeNodeComponent("dialogSelectProduct"),
    txtProductFilter: makeNodeComponent("txtProductFilter"),
    txtRegisterInvoiceTitle: makeNodeComponent("txtRegisterInvoiceTitle"),
    cbProducregisterInvoice: makeNodeComponent("cbProducregisterInvoice"),
    txtServiceName: makeNodeComponent("txtServiceName"),
    txtServiceCount: makeNodeComponent("txtServiceCount"),
    txtServicePrice: makeNodeComponent("txtServicePrice"),
    txtRegisterinvoiceDescription: makeNodeComponent(
      "txtRegisterinvoiceDescription"
    ),
    txtRegisterInvoiceDiscountPercent: makeNodeComponent(
      "txtRegisterInvoiceDiscountPercent"
    ),
    txtRegisterInvoiceVatPercent: makeNodeComponent(
      "txtRegisterInvoiceVatPercent"
    ),
    txtFinalPrice: makeNodeComponent("txtFinalPrice"),
    txtInvoiceId: makeNodeComponent("txtInvoiceId"),
    waitingIcon4: makeNodeComponent("waitingIcon4"),
    gridInvoice1: makeNodeComponent("gridInvoice1"),
    gridNoData: makeNodeComponent("gridNoData"),
    gridInvoice12: makeNodeComponent("gridInvoice12"),
    dialogInvoiceDetails: makeNodeComponent("dialogInvoiceDetails"),
    btnInvoiceInfo: makeNodeComponent("btnInvoiceInfo"),
    detailsDataApiRequest: makeNodeComponent("detailsDataApiRequest"),
    waitingIcon3: makeNodeComponent("waitingIcon3"),
    dialogCancelInvoice: makeNodeComponent("dialogCancelInvoice"),
    txtCancelReason: makeNodeComponent("txtCancelReason"),
    waitingIcon6: makeNodeComponent("waitingIcon6"),
    sideEffectPageLoad: makeNodeComponent("sideEffectPageLoad"),

    // Metadata about props expected for PlasmicProductAdmin
    internalVariantProps: PlasmicProductAdmin__VariantProps,
    internalArgProps: PlasmicProductAdmin__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "تراکنش های مالی مدیر محصول",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicProductAdmin;
/* prettier-ignore-end */
